<!DOCTYPE html>
<!-- paulirish.com/2008/conditional-stylesheets-vs-css-hacks-answer-neither/ -->
<!--[if lt IE 7]> <html class="no-js ie6 oldie" lang="en"> <![endif]-->
<!--[if IE 7]>    <html class="no-js ie7 oldie" lang="en"> <![endif]-->
<!--[if IE 8]>    <html class="no-js ie8 oldie" lang="en"> <![endif]-->
<!-- Consider adding an manifest.appcache: h5bp.com/d/Offline -->
<!--[if gt IE 8]><!-->
<html class=" js flexbox canvas canvastext webgl no-touch geolocation postmessage no-websqldatabase indexeddb hashchange history draganddrop websockets rgba hsla multiplebgs backgroundsize borderimage borderradius boxshadow textshadow opacity cssanimations csscolumns cssgradients no-cssreflections csstransforms csstransforms3d csstransitions fontface generatedcontent video audio localstorage sessionstorage webworkers applicationcache svg inlinesvg smil svgclippaths" xmlns="http://www.w3.org/1999/xhtml" xmlns:og="http://ogp.me/ns#" xmlns:fb="https://www.facebook.com/2008/fbml" lang="en"><script src="Deadlocks%20in%20Practice%20%20Don%E2%80%99t%20Hold%20Locks%20While%20Notifying%20_%20Twisted%20Oak%20Studios%20Blog_files/Post8424_deadlocks-in-practice-dont-hold-locks-while-notifyi.htm" async=""></script><script id="bug.surrogate.1">var urchinTracker=function(){},_gaq={push:function(){try {if(arguments[0][0]=='_link')window.location.href=arguments[0][1]}catch(er){}}},_gat={_createTracker:function(){}, _getTracker:function(){return{__noSuchMethod__:function(){},_link:function(o){if(o)location.href=o;},_linkByPost:function(){return true;},_getLinkerUrl:function(o){return o;},_trackEvent:function(){}}}};</script><!--<![endif]--><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
  <meta charset="utf-8">
   <!-- blog feed link -->
  <link href="http://twistedoakstudios.com/blog/?feed=rss" rel="alternate" type="application/rss+xml" title="Twisted Oak Studios Blog">

  <!-- Use the .htaccess and remove these lines to avoid edge case issues.
       More info: h5bp.com/b/378 -->
  <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">

<title>Deadlocks in Practice: Don’t Hold Locks While Notifying | Twisted Oak Studios Blog</title>

  <meta name="description" content="As a lean co-operative team of seasoned developers, Twisted Oak is able to offer efficient, flexible remote and on-the-floor development and consulting without any middle-man or excessive administrivia.">
  <meta name="author" content="/humans.txt">

  <meta name="viewport" content="width=device-width,initial-scale=1">

  <link rel="shortcut icon" href="http://twistedoakstudios.com/blog/favicon.ico">
  <link rel="apple-touch-icon-precomposed" href="http://twistedoakstudios.com/blog/apple-touch-icon-precomposed.png">

  	<!-- The 1140px Grid - http://cssgrid.net/ -->
	<link rel="stylesheet" href="Deadlocks%20in%20Practice%20%20Don%E2%80%99t%20Hold%20Locks%20While%20Notifying%20_%20Twisted%20Oak%20Studios%20Blog_files/1140.css">
    <link rel="stylesheet" href="Deadlocks%20in%20Practice%20%20Don%E2%80%99t%20Hold%20Locks%20While%20Notifying%20_%20Twisted%20Oak%20Studios%20Blog_files/style.css">
    <link rel="stylesheet" href="Deadlocks%20in%20Practice%20%20Don%E2%80%99t%20Hold%20Locks%20While%20Notifying%20_%20Twisted%20Oak%20Studios%20Blog_files/blogstyle.css">
<link rel="stylesheet" href="Deadlocks%20in%20Practice%20%20Don%E2%80%99t%20Hold%20Locks%20While%20Notifying%20_%20Twisted%20Oak%20Studios%20Blog_files/prettify.css" media="all">
<link rel="stylesheet" href="Deadlocks%20in%20Practice%20%20Don%E2%80%99t%20Hold%20Locks%20While%20Notifying%20_%20Twisted%20Oak%20Studios%20Blog_files/sunburst.css" media="all">
<script type="text/javascript" src="Deadlocks%20in%20Practice%20%20Don%E2%80%99t%20Hold%20Locks%20While%20Notifying%20_%20Twisted%20Oak%20Studios%20Blog_files/prettify.js"></script>

	<!-- Webfonts! -->
	<link href="Deadlocks%20in%20Practice%20%20Don%E2%80%99t%20Hold%20Locks%20While%20Notifying%20_%20Twisted%20Oak%20Studios%20Blog_files/css.css" rel="stylesheet" type="text/css">

	<!-- Open Graph -->
	<meta property="og:title" content="Twisted Oak Studios">
	<meta property="og:type" content="company">
	<meta property="og:url" content="http://www.twistedoakstudios.com/">
	<meta property="og:image" content="http://www.twistedoakstudios.com/images/logo.png">
	<meta property="og:description" content="As a lean co-operative team of seasoned developers, Twisted Oak is able to offer efficient, flexible remote and on-the-floor development and consulting without any middle-man or excessive administrivia.">
  
  <script src="Deadlocks%20in%20Practice%20%20Don%E2%80%99t%20Hold%20Locks%20While%20Notifying%20_%20Twisted%20Oak%20Studios%20Blog_files/modernizr-2.js"></script>
<script src="Deadlocks%20in%20Practice%20%20Don%E2%80%99t%20Hold%20Locks%20While%20Notifying%20_%20Twisted%20Oak%20Studios%20Blog_files/embed.js" async="" type="text/javascript"></script></head>
<body class=" customize-support" onload="prettyPrint()">
<!-- begin header -->
<div class="container header-container">
	<div class="row">
		<header>
			<div class="threecol">
				<a href="http://twistedoakstudios.com/"><img class="logo" src="Deadlocks%20in%20Practice%20%20Don%E2%80%99t%20Hold%20Locks%20While%20Notifying%20_%20Twisted%20Oak%20Studios%20Blog_files/logo.png"></a>
			</div><!-- .threecol -->
		
			<div class="fourcol navcol">
				<nav>
					<ul class="primary-nav clearfix">
						<li><a href="http://twistedoakstudios.com/">Home</a></li>
						<li><a href="http://twistedoakstudios.com/portfolio/">Portfolio</a></li>
						<li><a href="http://twistedoakstudios.com/labs/">Labs</a></li>
						<li><a class="scroll" href="#contact">Contact</a></li>
						<li><a href="http://twistedoakstudios.com/blog/">Blog</a></li>
					</ul>
				</nav>
			</div>    

    	</header>
	</div><!-- .row -->
</div><!-- .container -->


	<div id="main">
<span class="blog">
<div class="container home-container" id="home">
	<div class="row">
    <p class="big-callout">
    <!--We're hiring! Experience with Game Dev, Unity3D, Graphics, Signal Processing, or Networking? Eligible to work in Canada? 
      <a href="http://www.twistedoakstudios.com/jobs.php">Check it out</a>!
-->
		</p><section>
			
			<div class="ninecol">


<h2><a href="http://twistedoakstudios.com/blog/Post8424_deadlocks-in-practice-dont-hold-locks-while-notifying" rel="bookmark" title="Permanent Link to Deadlocks in Practice: Don’t Hold Locks While Notifying">Deadlocks in Practice: Don’t Hold Locks While Notifying</a></h2>
<div class="meta">posted by Craig Gidney on December 22, 2013</div>

<p>In this post: a subtle way that reactive/event-based code can 
deadlock, how it affects ReactiveCocoa (obj-c) and Reactive Extensions 
(.Net), and ways to work around the problem.</p>
<h3>Realization</h3>
<p>Today I noticed that ReactiveCocoa, the Objective-C port of .Net’s Rx
 (Reactive Extensions), implements different semantics for its 
BehaviorSubject.</p>
<p>This would be moderately interesting, except the change in semantics introduces a bug. Even more interestingly, there’s a <em>different</em> bug in the original Rx implementation. Then, to top it off, the bugs might actually be intentional design decisions!</p>
<p>But before I can talk about all that I need to explain what the heck a “BehaviorSubject” is.</p>
<h3>Behavior Subject</h3>
<p>A BehaviorSubject is an observable value. I have no idea why you would ever call an observable value a behavior subject (<a href="http://stackoverflow.com/a/20013720/52239">it’s from the observer pattern</a>), but we’re stuck with the name now.</p>
<p>Behavior subjects must support four operations: updating a value, 
sealing the value as ‘complete’, sealing the value with a failure, and 
subscribing to be told about those things. Note that the operations must
 be thread-safe. In Rx the operations are called OnNext, OnCompleted, 
OnError, and Subscribe. In ReactiveCocoa they’re more appropriately 
called sendNext, sendCompleted, sendError, and subscribe.</p>
<p>When you subscribe an IObserver/RACSubscriber to a behavior subject, 
the observer/subscriber’s OnNext method is immediately invoked with the 
current value stored in the behavior subject. Additionally, whenever the
 value changes in the future, the OnNext method will be called again 
with the new value. Completion and failure are also forwarded 
appropriately. This allows subscribers to track the latest value in a 
behavior subject and react to it.</p>
<p>Clear? Alright, let’s talk about syncing values.</p>
<h3>Syncing and Deadlock</h3>
<p>Suppose you’re trying to keep two values synchronized. For example, 
maybe you want to display a up-to-date value while also allowing the 
user to edit it (so you’re syncing a displayed value and a back-end 
value).</p>
<p>BehaviorSubject makes this almost easy, but there are subtleties to it. You might start with something like this:</p>
<pre><code class="prettyprint"><span class="kwd">var</span><span class="pln"> observableValue1 </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">BehaviorSubject</span><span class="str">&lt;int&gt;</span><span class="pun">(</span><span class="pln">value</span><span class="pun">:</span><span class="pln"> </span><span class="lit">0</span><span class="pun">);</span><span class="pln">
</span><span class="kwd">var</span><span class="pln"> observableValue2 </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">BehaviorSubject</span><span class="str">&lt;int&gt;</span><span class="pun">(</span><span class="pln">value</span><span class="pun">:</span><span class="pln"> </span><span class="lit">0</span><span class="pun">);</span><span class="pln">

</span><span class="com">// keep values synced (when one is changed, update the other)</span><span class="pln">
</span><span class="com">// HORRIBLY WRONG</span><span class="pln">
observableValue1</span><span class="pun">.</span><span class="typ">Subscribe</span><span class="pun">(</span><span class="pln">observableValue2</span><span class="pun">.</span><span class="typ">OnNext</span><span class="pun">);</span><span class="pln">
observableValue2</span><span class="pun">.</span><span class="typ">Subscribe</span><span class="pun">(</span><span class="pln">observableValue1</span><span class="pun">.</span><span class="typ">OnNext</span><span class="pun">);</span></code></pre>
<p>A reasonable first attempt, but as soon as you run the program you’ll
 find that any update triggers another update and that update triggers 
another and so on forever in a loop until the stack overflows and the 
program crashes. You need to prevent the updates from cycling back 
somehow.</p>
<p>In a real distributed system you’d solve this with timestamps or 
vector clocks or whatever, but we’re going to hack around the problem by
 only sending updates when the value changes. There’s already a method 
that does exactly that: <a href="http://msdn.microsoft.com/en-us/library/hh229494%28v=vs.103%29.aspx">DistinctUntilChanged</a> (I’d have called it WhenDifferent, but I digress). Let’s throw that in there:</p>
<pre><code class="prettyprint"><span class="kwd">var</span><span class="pln"> observableValue1 </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">BehaviorSubject</span><span class="str">&lt;int&gt;</span><span class="pun">(</span><span class="pln">value</span><span class="pun">:</span><span class="pln"> </span><span class="lit">0</span><span class="pun">);</span><span class="pln">
</span><span class="kwd">var</span><span class="pln"> observableValue2 </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">BehaviorSubject</span><span class="str">&lt;int&gt;</span><span class="pun">(</span><span class="pln">value</span><span class="pun">:</span><span class="pln"> </span><span class="lit">0</span><span class="pun">);</span><span class="pln">

</span><span class="com">// keep values synced (when one is changed, update the other)</span><span class="pln">
</span><span class="com">// ~~assumes single thread~~</span><span class="pln">
observableValue1</span><span class="pun">.</span><span class="typ">DistinctUntilChanged</span><span class="pun">().</span><span class="typ">Subscribe</span><span class="pun">(</span><span class="pln">observableValue2</span><span class="pun">.</span><span class="typ">OnNext</span><span class="pun">);</span><span class="pln">
observableValue2</span><span class="pun">.</span><span class="typ">DistinctUntilChanged</span><span class="pun">().</span><span class="typ">Subscribe</span><span class="pun">(</span><span class="pln">observableValue1</span><span class="pun">.</span><span class="typ">OnNext</span><span class="pun">);</span></code></pre>
<p>The above will work, but only for a single thread. Once multiple threads enter the picture all bets are off.</p>
<p>First, there’s the issue we’re not worried about. If the stars align 
and two threads’ updates bounce back and forth just right they can keep 
undoing the other thread’s work. The result is a live-lock, at least 
until the stack(s) explode(s).</p>
<p>Second, and more importantly, DistinctUntilChanged isn’t guaranteed to be thread safe. I used to think it was, but <a href="https://rx.codeplex.com/SourceControl/latest#Rx.NET/Source/System.Reactive.Linq/Reactive/Linq/Observable/DistinctUntilChanged.cs">the Rx source code</a> doesn’t lie (I’m not sure whether or not <a href="https://github.com/ReactiveCocoa/ReactiveCocoa/blob/4b700c200fe70977e0631ff233baac58f8acab88/ReactiveCocoaFramework/ReactiveCocoa/RACStream.m#L320">the ReactiveCocoa implementation</a>
 is thread safe). If we want our data syncing code to not do weird 
things when multiple threads are involved, we need to synchronize the 
notifications being given to DistinctUntlChanged.</p>
<p>Naturally there’s already a method to to synchronize notifications so they don’t overlap: <a href="http://msdn.microsoft.com/en-us/library/hh229583%28v=vs.103%29.aspx">Synchronize</a>. It just grabs a lock before sending any notifications and releases it afterwards. Let’s use it:</p>
<pre><code class="prettyprint"><span class="kwd">var</span><span class="pln"> observableValue1 </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">BehaviorSubject</span><span class="str">&lt;int&gt;</span><span class="pun">(</span><span class="pln">value</span><span class="pun">:</span><span class="pln"> </span><span class="lit">0</span><span class="pun">);</span><span class="pln">
</span><span class="kwd">var</span><span class="pln"> observableValue2 </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">BehaviorSubject</span><span class="str">&lt;int&gt;</span><span class="pun">(</span><span class="pln">value</span><span class="pun">:</span><span class="pln"> </span><span class="lit">0</span><span class="pun">);</span><span class="pln">

</span><span class="com">// keep values synced (when one is changed, update the other)</span><span class="pln">
</span><span class="com">// SUBTLY WRONG</span><span class="pln">
observableValue1</span><span class="pun">.</span><span class="typ">Synchronize</span><span class="pun">().</span><span class="typ">DistinctUntilChanged</span><span class="pun">().</span><span class="typ">Subscribe</span><span class="pun">(</span><span class="pln">observableValue2</span><span class="pun">.</span><span class="typ">OnNext</span><span class="pun">);</span><span class="pln">
observableValue2</span><span class="pun">.</span><span class="typ">Synchronize</span><span class="pun">().</span><span class="typ">DistinctUntilChanged</span><span class="pun">().</span><span class="typ">Subscribe</span><span class="pun">(</span><span class="pln">observableValue1</span><span class="pun">.</span><span class="typ">OnNext</span><span class="pun">);</span></code></pre>
<p>Just to be sure that’s alright, let’s test it out. We’ll need a way to spam out values:</p>
<pre><code class="prettyprint"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="typ">IObservable</span><span class="str">&lt;int&gt;</span><span class="pln"> </span><span class="typ">SpamCountForever</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> </span><span class="typ">Observable</span><span class="pun">.</span><span class="typ">Create</span><span class="str">&lt;int&gt;</span><span class="pun">(</span><span class="pln">observer </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        </span><span class="typ">NewThreadScheduler</span><span class="pun">.</span><span class="typ">Default</span><span class="pun">.</span><span class="typ">Schedule</span><span class="pun">(()</span><span class="pln"> </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
            </span><span class="kwd">var</span><span class="pln"> counter </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln">
            </span><span class="kwd">while</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">true</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
                observer</span><span class="pun">.</span><span class="typ">OnNext</span><span class="pun">(</span><span class="pln">counter</span><span class="pun">++);</span><span class="pln">
            </span><span class="pun">}</span><span class="pln">
        </span><span class="pun">});</span><span class="pln">

        </span><span class="kwd">return</span><span class="pln"> </span><span class="typ">Disposable</span><span class="pun">.</span><span class="typ">Create</span><span class="pun">(()</span><span class="pln"> </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
            </span><span class="com">// Huh?</span><span class="pln">
            </span><span class="com">// You want it to stop?</span><span class="pln">
            </span><span class="com">// What about 'forever' did you not GET?</span><span class="pln">
        </span><span class="pun">});</span><span class="pln">
    </span><span class="pun">});</span><span class="pln">
</span><span class="pun">}</span></code></pre>
<p>and then we spam into both observable values:</p>
<pre><code class="prettyprint"><span class="typ">SpamCountForever</span><span class="pun">().</span><span class="typ">Subscribe</span><span class="pun">(</span><span class="pln">observableValue1</span><span class="pun">.</span><span class="typ">OnNext</span><span class="pun">);</span><span class="pln">
</span><span class="typ">SpamCountForever</span><span class="pun">().</span><span class="typ">Subscribe</span><span class="pun">(</span><span class="pln">observableValue2</span><span class="pun">.</span><span class="typ">OnNext</span><span class="pun">);</span></code></pre>
<p>I’m not sure if this even counts as syncing data anymore, since the 
two threads spamming values are basically fighting over what the value 
should be. Regardless, if you try to run this code you’ll find it has a 
serious bug: it deadlocks.</p>
<p>The two observables are being driven by separate threads. Thread 1 is
 pushing new values into observableValue1, which triggers a notification
 that gets forwarded through Synchronize and DistinctUntilChanged to 
update observableValue2. Simultaneously, Thread 2 is pushing values into
 observableValue2, which triggers notifications that get forwarded 
through a different invocation of Synchronize and DistinctUntilChanged 
to update observableValue1. Now, due to passing through Synchronize, 
Thread 1 is currently holding a lock. The same is true of Thread 2, with
 a separate lock. And they’re about to update each others’ values and 
trigger notifications that cause them to try to grab each others’ locks…</p>
<p>Ugh. They’re acquiring locks in different orders, and the prize for 
that is doing nothing ever again forever until time stops. At which 
point you’re still doing nothing, but in a philosophically different 
sense at least.</p>
<p>The root problem here is that the Synchronize method holds a lock while sending out a notification, but notifications can do <em>anything</em> and that includes causing another thread to wait for the lock being held.</p>
<h3>Caution</h3>
<p>Realizing that raising events / invoking callbacks / sending 
notifications while holding a lock can create deadlocks is kind of 
depressing. Holding a lock while sending off a notification <em>is really convenient</em>. It solves so many ordering and overlap issues.</p>
<p>But every time you hold a lock while sending out a notification, you are introducing an invisible constraint on your <em>entire program</em>.
 If the graph of who-notifies-who-while-holding-a-lock contains a cycle,
 that’s a deadlock. Maybe that constraint won’t ever get violated, but 
if someone ever does hook the blue box up to the red box (and why 
wouldn’t they? What indication would they have that it’s a bad idea?) 
then woe is you because deadlock bugs are <em>not</em> fun to track down.</p>
<p>So this is the part of the post where I warn you: watch out for this 
problem. If you ever see an event being raised, a callback being run, or
 any sort of notification-that-can-trigger-arbitrary-behavior happening 
inside a lock then <em>PAY ATTENTION</em> because you’re staring at half of a deadlock bug.</p>
<pre><code class="prettyprint"><span class="kwd">lock</span><span class="pln"> </span><span class="pun">(</span><span class="pln">syncRoot</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="pun">...</span><span class="pln">
    invokeSuscribers</span><span class="pun">();</span><span class="pln"> </span><span class="com">// todo: HUGE RED BLINKING WARNING LIGHTS</span><span class="pln">
    </span><span class="pun">...</span><span class="pln">
</span><span class="pun">}</span></code></pre>
<p>Is there a way to get the notification outside of the lock? <em>Do it</em>. (See also: <a href="http://en.wikipedia.org/wiki/Reentrancy_%28computing%29">re-entrancy</a>)</p>
<p>Note that properly extracting a notification from within a lock can 
be quite difficult. Presumably there’s a reason the notification was 
placed inside the lock in the first place. For example, in the case of 
BehaviorSubject, doing nothing besides moving the notification outside 
of the lock will break <a href="http://en.wikipedia.org/wiki/Eventual_consistency">eventual consistency</a>.
 Subscribers assume the latest value is the last value they received, 
and we want any subscribers that currently think an old value is the 
latest value to eventually find out about the newer value. But if we 
release the lock before sending the “here’s the latest value” 
notification, then the evil imp that arbitrarily delays threads can ruin
 our day by re-ordering “the latest value is ‘intermediate’” to come 
after “the latest value is ‘done’” and so subscribers end up discarding 
the latest value for a stale one.</p>
<p>There are techniques that avoid deadlocks while maintaining eventual 
consistency, but first let’s look at how this issue shows up in Rx and 
ReactiveCocoa.</p>
<h3>Rx vs ReactiveCocoa</h3>
<p>The distinction between Rx and ReactiveCocoa’s respective 
implementations of BehaviorSubject is exemplified by how they handle 
updating a subject’s current value.</p>
<p>Here’s the implementation of <a href="https://github.com/ReactiveCocoa/ReactiveCocoa/blob/fd533d07b64d40cf79d069584d8cd95158998095/ReactiveCocoaFramework/ReactiveCocoa/RACBehaviorSubject.m#L50">ReactiveCocoa’s BehaviorSubject’s sendNext message</a>:</p>
<pre><code class="prettyprint"><span class="pun">-</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">void</span><span class="pun">)</span><span class="pln">sendNext</span><span class="pun">:(</span><span class="pln">id</span><span class="pun">)</span><span class="pln">value </span><span class="pun">{</span><span class="pln">
    </span><span class="lit">@synchronized</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">self</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">self</span><span class="pun">.</span><span class="pln">currentValue </span><span class="pun">=</span><span class="pln"> value</span><span class="pun">;</span><span class="pln">
        </span><span class="pun">[</span><span class="kwd">super</span><span class="pln"> sendNext</span><span class="pun">:</span><span class="pln">value</span><span class="pun">];</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code></pre>
<p>Notice the notification being sent inside a lock? The lock is there 
to ensure the last value given to subscribers is in fact the latest 
value (i.e. eventual consistency), but it introduces a potential 
deadlock. If you wire BehaviorSubjects together in cyclic ways, and 
there’s multiple threads, your program is liable to just stop making 
progress.</p>
<p>Here’s the implementation of <a href="https://rx.codeplex.com/SourceControl/latest#Rx.NET/Source/System.Reactive.Linq/Reactive/Subjects/BehaviorSubject.cs">Rx’s BehaviorSubject’s</a> OnNext method:</p>
<pre><code class="prettyprint"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> </span><span class="typ">OnNext</span><span class="pun">(</span><span class="pln">T value</span><span class="pun">)</span><span class="pln">
</span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">var</span><span class="pln"> os </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">default</span><span class="pun">(</span><span class="typ">IObserver</span><span class="pun">&lt;</span><span class="pln">T</span><span class="pun">&gt;[]);</span><span class="pln">
    </span><span class="kwd">lock</span><span class="pln"> </span><span class="pun">(</span><span class="pln">_gate</span><span class="pun">)</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        </span><span class="typ">CheckDisposed</span><span class="pun">();</span><span class="pln">

        </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(!</span><span class="pln">_isStopped</span><span class="pun">)</span><span class="pln">
        </span><span class="pun">{</span><span class="pln">
            _value </span><span class="pun">=</span><span class="pln"> value</span><span class="pun">;</span><span class="pln">
            os </span><span class="pun">=</span><span class="pln"> _observers</span><span class="pun">.</span><span class="typ">Data</span><span class="pun">;</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">

    </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">os </span><span class="pun">!=</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">)</span><span class="pln">
    </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">foreach</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">var</span><span class="pln"> o </span><span class="kwd">in</span><span class="pln"> os</span><span class="pun">)</span><span class="pln">
            o</span><span class="pun">.</span><span class="typ">OnNext</span><span class="pun">(</span><span class="pln">value</span><span class="pun">);</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code></pre>
<p>See how Rx is taking a snapshot of the value (and the observers, because they’re in a <a href="http://msdn.microsoft.com/en-us/library/dn385366%28v=vs.110%29.aspx">persistent collection</a>),
 then releasing the lock, then forwarding notifications only after 
exiting the lock? The authors probably did that because they’re aware of
 the dangers of notifying while holding a lock. The problem here is that
 they’ve sacrificed eventual consistency. The notifications may be 
re-ordered with respect to the values being stored, so subscribers may 
end up with the wrong “latest” value. Instead of “the latest value is X”
 messages, this code gives us less useful “at one point the value was X”
 messages.</p>
<p>So each version has its own distinct bug-or-maybe-design-decision. It’s possible to fix both.</p>
<h3>Solutions</h3>
<p>I know two deadlock-avoidance techniques that will work in the case 
of BehaviorSubject, while maintaining eventual consistency. They are: 1)
 queue/drain, and 2) check-after-notify.</p>
<p>The “queue/drain” approach involves enqueueing notifications-to-send 
while holding the lock, then trying to acquire responsibility for 
draining the queue while not holding the lock. The synchronization 
around who’s responsible for draining the queue prevents notifications 
from being re-ordered, ensuring subscribers see the latest value last.</p>
<p>I’ve used this technique in a past post. The ActorSynchronizationContext described in <a href="http://twistedoakstudios.com/blog/Post2061_emulating-actors-in-c-with-asyncawait">Emulating Actors in C# with async/await</a> is based on queue/drain. Adapting the code slightly makes it usable for our current case:</p>
<pre><code class="prettyprint"><span class="kwd">private</span><span class="pln"> </span><span class="kwd">readonly</span><span class="pln"> </span><span class="typ">ConcurrentQueue</span><span class="pun">&lt;</span><span class="typ">Action</span><span class="pun">&gt;</span><span class="pln"> _pending </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">ConcurrentQueue</span><span class="pun">&lt;</span><span class="typ">Action</span><span class="pun">&gt;();</span><span class="pln">
</span><span class="kwd">private</span><span class="pln"> </span><span class="kwd">int</span><span class="pln"> _pendingCount</span><span class="pun">;</span><span class="pln">

</span><span class="com">// call this while holding the lock</span><span class="pln">
</span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> </span><span class="typ">Enqueue</span><span class="pun">(</span><span class="typ">Action</span><span class="pln"> thingToDoInOrderButOutsideLock</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    _pending</span><span class="pun">.</span><span class="typ">Enqueue</span><span class="pun">(</span><span class="pln">thingToDoInOrderButOutsideLock</span><span class="pun">);</span><span class="pln">
</span><span class="pun">}</span><span class="pln">

</span><span class="com">// and this after releasing the lock</span><span class="pln">
</span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> </span><span class="typ">TryDrainQueue</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="com">// try to acquire responsibility for draining the queue</span><span class="pln">
    </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="typ">Interlocked</span><span class="pun">.</span><span class="typ">Increment</span><span class="pun">(</span><span class="kwd">ref</span><span class="pln"> _pendingCount</span><span class="pun">)</span><span class="pln"> </span><span class="pun">&gt;</span><span class="pln"> </span><span class="lit">1</span><span class="pun">)</span><span class="pln"> </span><span class="kwd">return</span><span class="pun">;</span><span class="pln">
    
    </span><span class="com">// keep draining the queue until you release responsibility for it</span><span class="pln">
    </span><span class="kwd">do</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        </span><span class="com">// perform a queued action</span><span class="pln">
        </span><span class="typ">Action</span><span class="pln"> a</span><span class="pun">;</span><span class="pln">
        _pending</span><span class="pun">.</span><span class="typ">TryDequeue</span><span class="pun">(</span><span class="kwd">out</span><span class="pln"> a</span><span class="pun">);</span><span class="pln"> </span><span class="com">// always succeeds, due to usage of _pendingCount</span><span class="pln">
        a</span><span class="pun">.</span><span class="typ">Invoke</span><span class="pun">();</span><span class="pln">
        
        </span><span class="com">// try to release responsibility for draining the queue</span><span class="pln">
    </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">while</span><span class="pln"> </span><span class="pun">(</span><span class="typ">Interlocked</span><span class="pun">.</span><span class="typ">Decrement</span><span class="pun">(</span><span class="kwd">ref</span><span class="pln"> _pendingCount</span><span class="pun">)</span><span class="pln"> </span><span class="pun">&gt;</span><span class="pln"> </span><span class="lit">0</span><span class="pun">);</span><span class="pln">
</span><span class="pun">}</span></code></pre>
<p>The downside of queue/drain-ing is that notifications can migrate 
across threads. This means you can’t rely on subscribers having been 
notified by the time the OnNext/sendNext call has returned (they’ll <em>eventually</em>
 be notified). Both Rx and ReactiveCocoa currently guarantee that your 
notification has been received by the time OnNext/sendNext returns 
(assuming no schedulers along the way), and violating that property 
could conceivably break existing code.</p>
<p>The other approach, “check-after-notify”, changes what a notification
 from a behavior subject tells subscribers. Instead of telling them the 
latest value, notifications would instead instruct them to re-check the 
latest value (subscribers would either know about the subject, or be 
given functions that go and get the current value).</p>
<p>The downside of check-after-notify is that single values may be 
observed repeatedly, and intermediate values may be missed entirely. 
That means check-after-notify only works when you truly only care about 
the latest value, as opposed to the sequence of values leading up to it.
 Another downside is that behavior subjects would no longer work like 
other observables.</p>
<p>My personal preference is queue/drain. I think its downsides are 
preferable when compared to introducing subtle deadlocks or losing 
eventual consistency. I particularly like how queue/drain resembles the 
actor model. That being said, there may be issues that I haven’t thought
 of. My impression of the authors of Rx is that they’re great at what 
they do, so I wouldn’t be surprised if they’ve already thought this 
through more extensively and have a good reason for their choice.</p>
<h3>Summary</h3>
<p>Holding a lock while sending notifications is half of a deadlock bug. It’s also really convenient.</p>
<p>Not holding a lock while sending notifications can sacrifice various consistency guarantees.</p>
<p>ReactiveCocoa’s observable value (BehaviorSubject) holds a lock while
 sending notifications. Rx’s does not, but sacrifices eventual 
consistency. Both outcomes are questionable, given other available 
possibilities.</p>
<p>Beyond BehaviorSubject, I’m pretty sure holding locks while notifying is the root cause of both <a href="https://github.com/ReactiveCocoa/ReactiveCocoa/issues/1002">this ReactiveCocoa deadlock bug</a> and <a href="https://rx.codeplex.com/workitem/56">this Rx deadlock bug</a>.</p>
<p>—</p>
<h3><a href="http://www.reddit.com/r/programming/comments/1th2md/deadlocks_in_practice_dont_hold_locks_while/">Discuss on Reddit</a></h3>
<p>—</p>
<h3>My Twitter: <a href="https://twitter.com/CraigGidney">@CraigGidney</a></h3>
<p>—</p>

<blockquote><p>


</p><div id="disqus_thread"><iframe verticalscrolling="no" horizontalscrolling="no" src="Deadlocks%20in%20Practice%20%20Don%E2%80%99t%20Hold%20Locks%20While%20Notifying%20_%20Twisted%20Oak%20Studios%20Blog_files/a.htm" style="width: 100% ! important; border: medium none ! important; overflow: hidden ! important; height: 346px ! important;" role="complementary" allowtransparency="true" data-disqus-uid="2" id="dsq-2" scrolling="no" width="100%" frameborder="0"></iframe><iframe style="width: 1060px ! important; border: medium none ! important; overflow: hidden ! important; top: 0px ! important; min-width: 1060px ! important; max-width: 1060px ! important; position: fixed ! important; height: 29px ! important; min-height: 29px ! important; max-height: 29px ! important; display: none ! important;" role="alert" allowtransparency="true" data-disqus-uid="indicator-north" id="dsq-indicator-north" scrolling="no" frameborder="0"></iframe><iframe style="width: 1060px ! important; border: medium none ! important; overflow: hidden ! important; bottom: 0px ! important; min-width: 1060px ! important; max-width: 1060px ! important; position: fixed ! important; height: 29px ! important; min-height: 29px ! important; max-height: 29px ! important; display: none ! important;" role="alert" allowtransparency="true" data-disqus-uid="indicator-south" id="dsq-indicator-south" scrolling="no" frameborder="0"></iframe></div>

<script type="text/javascript">
/* <![CDATA[ */
    var disqus_url = 'http://twistedoakstudios.com/blog/Post8424_deadlocks-in-practice-dont-hold-locks-while-notifying';
    var disqus_identifier = '8424 http://twistedoakstudios.com/blog/?p=8424';
    var disqus_container_id = 'disqus_thread';
    var disqus_domain = 'disqus.com';
    var disqus_shortname = 'twistedoakstudios';
    var disqus_title = "Deadlocks in Practice: Don&#8217;t Hold Locks While Notifying";
        var disqus_config = function () {
        var config = this; // Access to the config object
        config.language = '';

        /*
           All currently supported events:
            * preData — fires just before we request for initial data
            * preInit - fires after we get initial data but before we load any dependencies
            * onInit  - fires when all dependencies are resolved but before dtpl template is rendered
            * afterRender - fires when template is rendered but before we show it
            * onReady - everything is done
         */

        config.callbacks.preData.push(function() {
            // clear out the container (its filled for SEO/legacy purposes)
            document.getElementById(disqus_container_id).innerHTML = '';
        });
                config.callbacks.onReady.push(function() {
            // sync comments in the background so we don't block the page
            var script = document.createElement('script');
            script.async = true;
            script.src = '?cf_action=sync_comments&post_id=8424';

            var firstScript = document.getElementsByTagName( "script" )[0];
            firstScript.parentNode.insertBefore(script, firstScript);
        });
                    };
/* ]]> */
</script>

<script type="text/javascript">
/* <![CDATA[ */
    var DsqLocal = {
        'trackbacks': [
        ],
        'trackback_url': "http:\/\/twistedoakstudios.com\/blog\/Post8424_deadlocks-in-practice-dont-hold-locks-while-notifying\/trackback"    };
/* ]]> */
</script>

<script type="text/javascript">
/* <![CDATA[ */
(function() {
    var dsq = document.createElement('script'); dsq.type = 'text/javascript';
    dsq.async = true;
    dsq.src = '//' + disqus_shortname + '.' + 'disqus.com' + '/embed.js?pname=wordpress&pver=2.74';
    (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
})();
/* ]]> */
</script>

<h3>
<spacer>
</spacer></h3>

<span style="color:#4A9EC2"><em><br>
Twisted Oak Studios offers consulting and development on high-tech interactive projects. Check out our <a href="http://twistedoakstudios.com/portfolio/">portfolio</a>, or <a href="mailto:contact@twistedoakstudios.com">Give us a shout</a> if you have anything you think some really rad engineers should help you with.<br>
</em></span>
<p></p></blockquote>

<h2 class="endofpage">Archive</h2>
<p></p><ul>
     <li><a href="http://twistedoakstudios.com/blog/Post8424_deadlocks-in-practice-dont-hold-locks-while-notifying" rel="bookmark" title="Permanent Link to Deadlocks in Practice: Don’t Hold Locks While Notifying">Deadlocks in Practice: Don’t Hold Locks While Notifying</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post8355_brute-force-parallelization" rel="bookmark" title="Permanent Link to Brute Force Parallelization">Brute Force Parallelization</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post8237_a-years-worth-of-opinions-about-objective-c" rel="bookmark" title="Permanent Link to A Year’s Worth of Opinions about Objective-C">A Year’s Worth of Opinions about Objective-C</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post8147_referencing-substrings-faster-without-leaking-memory" rel="bookmark" title="Permanent Link to Referencing Substrings Faster, without Leaking Memory">Referencing Substrings Faster, without Leaking Memory</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post8000_not-crying-over-old-code" rel="bookmark" title="Permanent Link to Not Crying Over Old Code">Not Crying Over Old Code</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post7878_exploring-universal-ternary-gates" rel="bookmark" title="Permanent Link to Exploring Universal Ternary Gates">Exploring Universal Ternary Gates</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post7748_impractical-experiments-2-securing-peer-to-peer-fog-of-war-against-map-hacks" rel="bookmark" title="Permanent Link to Impractical Experiments #2: Securing Peer to Peer Fog of War against Map Hacks">Impractical Experiments #2: Securing Peer to Peer Fog of War against Map Hacks</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post7694_achieving-exponential-slowdown-by-enumerating-twice" rel="bookmark" title="Permanent Link to Achieving Exponential Slowdown by Enumerating Twice">Achieving Exponential Slowdown by Enumerating Twice</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post7525_using-immortality-to-kill-accidental-callback-cycles" rel="bookmark" title="Permanent Link to Using Immortality to Kill Accidental Callback Cycles">Using Immortality to Kill Accidental Callback Cycles</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post7391_cancellation-tokens-and-collapsing-futures-for-objective-c" rel="bookmark" title="Permanent Link to Cancellation Tokens (and Collapsing Futures) for Objective-C">Cancellation Tokens (and Collapsing Futures) for Objective-C</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post7254_visualizing-the-eigenvectors-of-a-rotation" rel="bookmark" title="Permanent Link to Visualizing the Eigenvectors of a Rotation">Visualizing the Eigenvectors of a Rotation</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post7149_collapsing-futures-in-objective-c" rel="bookmark" title="Permanent Link to Collapsing Futures in Objective-C">Collapsing Futures in Objective-C</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post7052_bug-hunting-1-garbled-audio-from-end-to-end" rel="bookmark" title="Permanent Link to Bug Hunting #1: Garbled Audio from End to End">Bug Hunting #1: Garbled Audio from End to End</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post6871_impractical-experiments-1-representing-numbers-as-polynomials" rel="bookmark" title="Permanent Link to Impractical Experiments #1: Representing Numbers as Polynomials">Impractical Experiments #1: Representing Numbers as Polynomials</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post6536_implementing-quantum-pseudo-telepathy" rel="bookmark" title="Permanent Link to Implementing Quantum Pseudo-Telepathy">Implementing Quantum Pseudo-Telepathy</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post6422_turn-on-your-damn-warnings" rel="bookmark" title="Permanent Link to Turn On Your Damn Warnings">Turn On Your Damn Warnings</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post5953_big-o-made-trivial" rel="bookmark" title="Permanent Link to Big-O Made Trivial">Big-O Made Trivial</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post5268_unfathomable-bugs-7-the-broken-oven" rel="bookmark" title="Permanent Link to Unfathomable Bugs #7: The Broken Oven">Unfathomable Bugs #7: The Broken Oven</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post5623_solomonoffs-mad-scientist" rel="bookmark" title="Permanent Link to Solomonoff’s Mad Scientist">Solomonoff’s Mad Scientist</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post5753_yearly-blogging-roundup-1" rel="bookmark" title="Permanent Link to Yearly Blogging Roundup #1">Yearly Blogging Roundup #1</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post5485_what-isnt-a-monad" rel="bookmark" title="Permanent Link to What isn’t a Monad">What isn’t a Monad</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post5365_searching-a-sorted-matrix-faster" rel="bookmark" title="Permanent Link to Searching a Sorted Matrix Faster">Searching a Sorted Matrix Faster</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post5273_how-to-read-nested-ternary-operators" rel="bookmark" title="Permanent Link to How to Read Nested Ternary Operators">How to Read Nested Ternary Operators</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post5204_making-sublime-text-2-jump-to-the-correct-line-with-unity-on-os-x" rel="bookmark" title="Permanent Link to Making Sublime Text 2 Jump to the Correct Line with Unity on OS X">Making Sublime Text 2 Jump to the Correct Line with Unity on OS X</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post5096_my-bug-my-bad-4-reading-concurrently" rel="bookmark" title="Permanent Link to My Bug, My Bad #4: Reading Concurrently">My Bug, My Bad #4: Reading Concurrently</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post5018_whole-api-testing-with-reflection" rel="bookmark" title="Permanent Link to Whole API Testing with Reflection">Whole API Testing with Reflection</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post4708_optimizing-a-parser-combinator-into-a-memcpy" rel="bookmark" title="Permanent Link to Optimizing a Parser Combinator into a memcpy">Optimizing a Parser Combinator into a memcpy</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post4872_dont-treat-paths-like-strings" rel="bookmark" title="Permanent Link to Don’t Treat Paths Like Strings">Don’t Treat Paths Like Strings</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post4706_breaking-a-toy-hash-function" rel="bookmark" title="Permanent Link to Breaking a Toy Hash Function">Breaking a Toy Hash Function</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post4425_counting-iterators-lazily" rel="bookmark" title="Permanent Link to Counting Iterators Lazily">Counting Iterators Lazily</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post4428_unfathomable-bugs-6-pretend-precision" rel="bookmark" title="Permanent Link to Unfathomable Bugs #6: Pretend Precision">Unfathomable Bugs #6: Pretend Precision</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post4281_my-bug-my-bad-3-accidentally-attacking-warcraft-3" rel="bookmark" title="Permanent Link to My Bug, My Bad #3: Accidentally Attacking WarCraft 3">My Bug, My Bad #3: Accidentally Attacking WarCraft 3</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post4130_collapsing-types-vs-monads-followup" rel="bookmark" title="Permanent Link to Collapsing Types vs Monads (followup)">Collapsing Types vs Monads (followup)</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post4008_collapsing-futures-easy-to-use-hard-to-represent" rel="bookmark" title="Permanent Link to Collapsing Futures: Easy to Use, Hard to Represent">Collapsing Futures: Easy to Use, Hard to Represent</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post3858_eventual-exceptions-vs-programming-in-a-minimal-functional-style" rel="bookmark" title="Permanent Link to Eventual Exceptions vs Programming in a Minimal Functional Style">Eventual Exceptions vs Programming in a Minimal Functional Style</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post3769_the-mystery-of-flunf" rel="bookmark" title="Permanent Link to The Mystery of Flunf">The Mystery of Flunf</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post3724_explain-it-like-im-five-the-socialist-millionaire-problem-and-secure-multi-party-computation" rel="bookmark" title="Permanent Link to Explain it like I’m Five: The Socialist Millionaire Problem and Secure Multi-Party Computation">Explain it like I’m Five: The Socialist Millionaire Problem and Secure Multi-Party Computation</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post3631_computer-science-blows-my-mind" rel="bookmark" title="Permanent Link to Computer Science Blows My Mind">Computer Science Blows My Mind</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post3484_a-visit-to-execution-labs-in-montreal" rel="bookmark" title="Permanent Link to A visit to Execution Labs in Montréal">A visit to Execution Labs in Montréal</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post3573_transmuting-dice-conserving-entropy" rel="bookmark" title="Permanent Link to Transmuting Dice, Conserving Entropy">Transmuting Dice, Conserving Entropy</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post3516_rule-of-thumb-ask-for-the-clock" rel="bookmark" title="Permanent Link to Rule of Thumb: Ask for the Clock">Rule of Thumb: Ask for the Clock</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post3477_rule-of-thumb-use-purposefully-weakened-methods" rel="bookmark" title="Permanent Link to Rule of Thumb: Use Purposefully Weakened Methods">Rule of Thumb: Use Purposefully Weakened Methods</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post3376_rule-of-thumb-preconditions-should-be-checked-explicitly" rel="bookmark" title="Permanent Link to Rule of thumb: Preconditions Should be Checked Explicitly">Rule of thumb: Preconditions Should be Checked Explicitly</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post3280_intersecting-linked-lists-faster" rel="bookmark" title="Permanent Link to Intersecting Linked Lists Faster">Intersecting Linked Lists Faster</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post3138_mouse-path-smoothing-for-jack-lumber" rel="bookmark" title="Permanent Link to Mouse Path Smoothing for Jack Lumber">Mouse Path Smoothing for Jack Lumber</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post3044_my-bug-my-bad-2-sunk-by-float" rel="bookmark" title="Permanent Link to My Bug, My Bad #2: Sunk by Float">My Bug, My Bad #2: Sunk by Float</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post2852_repeat-yourself-differently" rel="bookmark" title="Permanent Link to Repeat Yourself Differently">Repeat Yourself Differently</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post2644_grovers-quantum-search-algorithm" rel="bookmark" title="Permanent Link to Grover’s Quantum Search Algorithm">Grover’s Quantum Search Algorithm</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post2766_followup-to-non-nullable-types-vs-c" rel="bookmark" title="Permanent Link to Followup to Non-Nullable Types vs C#">Followup to Non-Nullable Types vs C#</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post2540_optimizing-just-in-time-with-expression-trees" rel="bookmark" title="Permanent Link to Optimizing Just in Time with Expression Trees">Optimizing Just in Time with Expression Trees</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post2353_when-one-way-latency-doesnt-matter" rel="bookmark" title="Permanent Link to When One-Way Latency Doesn’t Matter">When One-Way Latency Doesn’t Matter</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post2194_determining-exactly-ifwhenwhere-a-moving-line-intersected-a-moving-point" rel="bookmark" title="Permanent Link to Determining exactly if/when/where a moving line intersected a moving point">Determining exactly if/when/where a moving line intersected a moving point</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post2061_emulating-actors-in-c-with-asyncawait" rel="bookmark" title="Permanent Link to Emulating Actors in C# with Async/Await">Emulating Actors in C# with Async/Await</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post2096_making-an-immutable-queue-with-guaranteed-constant-time-operations" rel="bookmark" title="Permanent Link to Making an immutable queue with guaranteed constant time operations">Making an immutable queue with guaranteed constant time operations</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post399_improving-checked-exceptions" rel="bookmark" title="Permanent Link to Improving Checked Exceptions">Improving Checked Exceptions</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post1941_perishable-collections-the-benefits-of-removal-by-lifetime" rel="bookmark" title="Permanent Link to Perishable Collections: The Benefits of Removal-by-Lifetime">Perishable Collections: The Benefits of Removal-by-Lifetime</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post1823_decoupling-shared-control" rel="bookmark" title="Permanent Link to Decoupling shared control">Decoupling shared control</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post1694_decoupling-inlined-ui-code" rel="bookmark" title="Permanent Link to Decoupling inlined UI code">Decoupling inlined UI code</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post1585_linq-to-collections-beyond-ienumerablet" rel="bookmark" title="Permanent Link to Linq to Collections: Beyond IEnumerable&lt;T&gt;">Linq to Collections: Beyond IEnumerable&lt;T&gt;</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post1295_publish-your-net-library-as-a-nuget-package" rel="bookmark" title="Permanent Link to Publish your .Net library as a NuGet package">Publish your .Net library as a NuGet package</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post1130_when-null-is-not-enough-an-option-type-for-c" rel="bookmark" title="Permanent Link to When null is not enough: an option type for C#">When null is not enough: an option type for C#</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post1473_unfathomable-bugs-5-readonly-or-not" rel="bookmark" title="Permanent Link to Unfathomable Bugs #5: Readonly or not">Unfathomable Bugs #5: Readonly or not</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post667_minkowski-sums-examples" rel="bookmark" title="Permanent Link to Minkowski sums: examples">Minkowski sums: examples</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post1080_my-bug-my-bad-1-fractal-spheres" rel="bookmark" title="Permanent Link to My Bug, My Bad #1: Fractal Spheres">My Bug, My Bad #1: Fractal Spheres</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post1007_working-around-the-brittle-ui-virtualization-in-windows-8" rel="bookmark" title="Permanent Link to Working around the brittle UI Virtualization in Windows 8">Working around the brittle UI Virtualization in Windows 8</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post938_encapsulating-angles" rel="bookmark" title="Permanent Link to Encapsulating Angles">Encapsulating Angles</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post925_unfathomable-bugs-4-keys-that-arent" rel="bookmark" title="Permanent Link to Unfathomable Bugs #4: Keys that aren’t">Unfathomable Bugs #4: Keys that aren’t</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post867_how-would-i-even-use-a-monad-in-c" rel="bookmark" title="Permanent Link to How would I even use a monad (in C#)?">How would I even use a monad (in C#)?</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post822_useful-methods-1-observable-wheneach" rel="bookmark" title="Permanent Link to Useful/Interesting Methods #1: Observable.WhenEach">Useful/Interesting Methods #1: Observable.WhenEach</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post818_unfathomable-bugs-3-stringing-you-along" rel="bookmark" title="Permanent Link to Unfathomable Bugs #3: Stringing you along">Unfathomable Bugs #3: Stringing you along</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post774_anonymous-implementation-classes-a-design-pattern-for-c" rel="bookmark" title="Permanent Link to Anonymous Implementation Classes – A Design Pattern for C#">Anonymous Implementation Classes – A Design Pattern for C#</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post532_tasks-for-action-script-3" rel="bookmark" title="Permanent Link to Tasks for ActionScript 3 – Improving on Event-Driven Programming">Tasks for ActionScript 3 – Improving on Event-Driven Programming</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post554_minkowski-sums-and-differences" rel="bookmark" title="Permanent Link to Minkowski sums and differences">Minkowski sums and differences</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post330_non-nullable-types-vs-c-fixing-the-billion-dollar-mistake" rel="bookmark" title="Permanent Link to Non-Nullable Types vs C#: Fixing the Billion Dollar Mistake">Non-Nullable Types vs C#: Fixing the Billion Dollar Mistake</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post384_unfathomable-bugs-2-slashing-out" rel="bookmark" title="Permanent Link to Unfathomable Bugs #2: Slashing Out">Unfathomable Bugs #2: Slashing Out</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post404_script-templates-and-base-classes" rel="bookmark" title="Permanent Link to Script templates and base classes">Script templates and base classes</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post373_unity-font-extraction" rel="bookmark" title="Permanent Link to Unity font extraction">Unity font extraction</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post341_abusing-phantom-types-to-encode-list-lengths-into-their-type" rel="bookmark" title="Permanent Link to Abusing “Phantom Types” to Encode List Lengths Into Their Type">Abusing “Phantom Types” to Encode List Lengths Into Their Type</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post261_constructive-criticism-of-the-reactive-extensions-api" rel="bookmark" title="Permanent Link to Constructive Criticism of the Reactive Extensions API">Constructive Criticism of the Reactive Extensions API</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post241_quaternions-part-3-2" rel="bookmark" title="Permanent Link to Quaternions part 3">Quaternions part 3</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post204_quaternions-part-2" rel="bookmark" title="Permanent Link to Quaternions part 2">Quaternions part 2</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post144_quaternions-part-1" rel="bookmark" title="Permanent Link to Quaternions part 1">Quaternions part 1</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post157_unfathomable-bugs-1-you-can-have-things-you-can-have-things-in-things-you-can-have" rel="bookmark" title="Permanent Link to Unfathomable Bugs #1: You can have things! You can have things IN things! You can have …">Unfathomable Bugs #1: You can have things! You can have things IN things! You can have …</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post83_coroutines-more-than-you-want-to-know" rel="bookmark" title="Permanent Link to Coroutines – More than you want to know">Coroutines – More than you want to know</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post74_asset-bundle-helper" rel="bookmark" title="Permanent Link to Asset Bundle Helper">Asset Bundle Helper</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post60_the-visual-studio-goes-away" rel="bookmark" title="Permanent Link to The Visual Studio goes away">The Visual Studio goes away</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post57_nets-time-traveling-stopwatch" rel="bookmark" title="Permanent Link to .Net’s time traveling StopWatch">.Net’s time traveling StopWatch</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post29_introducing-catalyst" rel="bookmark" title="Permanent Link to Introducing Catalyst">Introducing Catalyst</a></li>
  </ul>
<p></p>


			</div><!-- #content -->
			</section>

			</div>
		</div><!-- #container -->


</span></div><!-- .container -->

 <div id="upprev_box" style="right: -400px;">
	<h6>
		More interesting posts <span class="num"> (1 of 26 articles)</span>
	</h6>
	<div class="upprev_excerpt">
		<p>
			<a href="http://twistedoakstudios.com/blog/Post8355_brute-force-parallelization" rel="prev">Brute Force Parallelization</a>
		</p>
	</div>
	
		<p>
Or check out our <a href="http://twistedoakstudios.com/portfolio">Portfolio</a>.		</p><button id="upprev_close" type="button">Close</button>
</div><!-- #upprev_box -->
<link rel="stylesheet" id="al2fb_style-css" href="Deadlocks%20in%20Practice%20%20Don%E2%80%99t%20Hold%20Locks%20While%20Notifying%20_%20Twisted%20Oak%20Studios%20Blog_files/add-link-to-facebook.css" type="text/css" media="all">
<link rel="stylesheet" id="admin-bar-css" href="Deadlocks%20in%20Practice%20%20Don%E2%80%99t%20Hold%20Locks%20While%20Notifying%20_%20Twisted%20Oak%20Studios%20Blog_files/admin-bar.css" type="text/css" media="all">
<link rel="stylesheet" id="upprev-css-css" href="Deadlocks%20in%20Practice%20%20Don%E2%80%99t%20Hold%20Locks%20While%20Notifying%20_%20Twisted%20Oak%20Studios%20Blog_files/upprev.css" type="text/css" media="all">
<link rel="stylesheet" id="wp-quicklatex-format-css" href="Deadlocks%20in%20Practice%20%20Don%E2%80%99t%20Hold%20Locks%20While%20Notifying%20_%20Twisted%20Oak%20Studios%20Blog_files/quicklatex-format.css" type="text/css" media="all">
<script type="text/javascript" src="Deadlocks%20in%20Practice%20%20Don%E2%80%99t%20Hold%20Locks%20While%20Notifying%20_%20Twisted%20Oak%20Studios%20Blog_files/admin-bar.js"></script>
<script type="text/javascript" src="Deadlocks%20in%20Practice%20%20Don%E2%80%99t%20Hold%20Locks%20While%20Notifying%20_%20Twisted%20Oak%20Studios%20Blog_files/jquery_002.js"></script>
<script type="text/javascript" src="Deadlocks%20in%20Practice%20%20Don%E2%80%99t%20Hold%20Locks%20While%20Notifying%20_%20Twisted%20Oak%20Studios%20Blog_files/upprev_js.php"></script>
<script type="text/javascript" src="Deadlocks%20in%20Practice%20%20Don%E2%80%99t%20Hold%20Locks%20While%20Notifying%20_%20Twisted%20Oak%20Studios%20Blog_files/comment-reply.js"></script>
	<script type="text/javascript">
		(function() {
			var request, b = document.body, c = 'className', cs = 'customize-support', rcs = new RegExp('(^|\\s+)(no-)?'+cs+'(\\s+|$)');

			request = true;

			b[c] = b[c].replace( rcs, ' ' );
			b[c] += ( window.postMessage && request ? ' ' : ' no-' ) + cs;
		}());
	</script>
			

		 
<!-- BEGIN footer-type stuff -->
<div class="container footer-container">
	<div class="row">
		
		<div class="fourcol last"><!-- .last b/c it's floated right -->
      <!-- home portfolio used to be here -->
		</div>

		<div class="eightcol" id="contact">
			<p>Twisted Oak Studios<br>
				138-1657 Barrington St.<br>
				Halifax, NS, Canada B3J 2A1</p>
			
			<p>001-902-237-7326<br>
			<a href="mailto:contact@twistedoakstudios.com">contact@twistedoakstudios.com</a></p>
		</div>

		<div class="twelvecol">
			<footer>
				<small>©2012
					<script>
						var d=new Date(); 
						yr=d.getFullYear();
						if (yr!=2012)
						document.write("- "+yr);
					</script>- 2013 Twisted Oak Studios Ltd. -- All Rights Reserved -- All images and logos are property of their respective owners.
				</small>
			</footer>
		</div>
		
		
	</div><!-- .row -->
</div><!-- .container -->
<!-- END footer stuff-->

<!-- jQuery and scrolly script for contact link -->
<script src="Deadlocks%20in%20Practice%20%20Don%E2%80%99t%20Hold%20Locks%20While%20Notifying%20_%20Twisted%20Oak%20Studios%20Blog_files/jquery.js"></script>
  <script>window.jQuery || document.write('<script src="../js/libs/jquery-1.6.2.min.js"><\/script>')</script>

<script src="Deadlocks%20in%20Practice%20%20Don%E2%80%99t%20Hold%20Locks%20While%20Notifying%20_%20Twisted%20Oak%20Studios%20Blog_files/scrolly.js"></script>


  <!-- Don't forget Analytics! -->



  <!-- Prompt IE 6 users to install Chrome Frame. Remove this if you want to support IE 6.
       chromium.org/developers/how-tos/chrome-frame-getting-started -->
  <!--[if lt IE 7 ]>
    <script src="//ajax.googleapis.com/ajax/libs/chrome-frame/1.0.3/CFInstall.min.js"></script>
    <script>window.attachEvent('onload',function(){CFInstall.check({mode:'overlay'})})</script>
  <![endif]-->
  


<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-31441525-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>
<div id="wpadminbar" class="nojq " role="navigation">
			<a class="screen-reader-shortcut" href="#wp-toolbar" tabindex="1">Skip to toolbar</a>
			<div class="quicklinks" id="wp-toolbar" role="navigation" aria-label="Top navigation toolbar." tabindex="0">
				<ul id="wp-admin-bar-root-default" class="ab-top-menu">
		<li id="wp-admin-bar-wp-logo" class="menupop"><a class="ab-item" aria-haspopup="true" href="http://twistedoakstudios.com/blog/wp-admin/about.php" title="About WordPress"><span class="ab-icon"></span></a><div class="ab-sub-wrapper"><ul id="wp-admin-bar-wp-logo-default" class="ab-submenu">
		<li id="wp-admin-bar-about"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/about.php">About WordPress</a>		</li></ul><ul id="wp-admin-bar-wp-logo-external" class="ab-sub-secondary ab-submenu">
		<li id="wp-admin-bar-wporg"><a class="ab-item" href="http://wordpress.org/">WordPress.org</a>		</li>
		<li id="wp-admin-bar-documentation"><a class="ab-item" href="http://codex.wordpress.org/">Documentation</a>		</li>
		<li id="wp-admin-bar-support-forums"><a class="ab-item" href="http://wordpress.org/support/">Support Forums</a>		</li>
		<li id="wp-admin-bar-feedback"><a class="ab-item" href="http://wordpress.org/support/forum/requests-and-feedback">Feedback</a>		</li></ul></div>		</li>
		<li id="wp-admin-bar-site-name" class="menupop"><a class="ab-item" aria-haspopup="true" href="http://twistedoakstudios.com/blog/wp-admin/">Twisted Oak Studios Blog</a><div class="ab-sub-wrapper"><ul id="wp-admin-bar-site-name-default" class="ab-submenu">
		<li id="wp-admin-bar-dashboard"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/">Dashboard</a>		</li></ul><ul id="wp-admin-bar-appearance" class="ab-submenu">
		<li id="wp-admin-bar-themes"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/themes.php">Themes</a>		</li>
		<li id="wp-admin-bar-customize" class="hide-if-no-customize"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/customize.php?url=http%3A%2F%2Ftwistedoakstudios.com%2Fblog%2FPost8424_deadlocks-in-practice-dont-hold-locks-while-notifying">Customize</a>		</li></ul></div>		</li>
		<li id="wp-admin-bar-updates"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/update-core.php" title="3 Plugin Updates, 3 Theme Updates"><span class="ab-icon"></span><span class="ab-label">6</span><span class="screen-reader-text">3 Plugin Updates, 3 Theme Updates</span></a>		</li>
		<li id="wp-admin-bar-comments"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/edit-comments.php" title="0 comments awaiting moderation"><span class="ab-icon"></span><span id="ab-awaiting-mod" class="ab-label awaiting-mod pending-count count-0">0</span></a>		</li>
		<li id="wp-admin-bar-new-content" class="menupop"><a class="ab-item" aria-haspopup="true" href="http://twistedoakstudios.com/blog/wp-admin/post-new.php" title="Add New"><span class="ab-icon"></span><span class="ab-label">New</span></a><div class="ab-sub-wrapper"><ul id="wp-admin-bar-new-content-default" class="ab-submenu">
		<li id="wp-admin-bar-new-post"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/post-new.php">Post</a>		</li>
		<li id="wp-admin-bar-new-media"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/media-new.php">Media</a>		</li>
		<li id="wp-admin-bar-new-link"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/link-add.php">Link</a>		</li>
		<li id="wp-admin-bar-new-page"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/post-new.php?post_type=page">Page</a>		</li>
		<li id="wp-admin-bar-new-user"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/user-new.php">User</a>		</li></ul></div>		</li>
		<li id="wp-admin-bar-edit"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/post.php?post=8424&amp;action=edit">Edit Post</a>		</li></ul><ul id="wp-admin-bar-top-secondary" class="ab-top-secondary ab-top-menu">
		<li id="wp-admin-bar-search" class="admin-bar-search"><div class="ab-item ab-empty-item" tabindex="-1"><form action="http://twistedoakstudios.com/blog/" method="get" id="adminbarsearch"><input class="adminbar-input" name="s" id="adminbar-search" maxlength="150" type="text"><input class="adminbar-button" value="Search" type="submit"></form></div>		</li>
		<li id="wp-admin-bar-my-account" class="menupop with-avatar"><a class="ab-item" aria-haspopup="true" href="http://twistedoakstudios.com/blog/wp-admin/profile.php" title="My Account">Howdy, Craig Gidney<img alt="" src="Deadlocks%20in%20Practice%20%20Don%E2%80%99t%20Hold%20Locks%20While%20Notifying%20_%20Twisted%20Oak%20Studios%20Blog_files/31a6ce579f8f9f9d528715d1e941726e.png" class="avatar avatar-16 photo" width="16" height="16"></a><div class="ab-sub-wrapper"><ul id="wp-admin-bar-user-actions" class="ab-submenu">
		<li id="wp-admin-bar-user-info"><a class="ab-item" tabindex="-1" href="http://twistedoakstudios.com/blog/wp-admin/profile.php"><img alt="" src="Deadlocks%20in%20Practice%20%20Don%E2%80%99t%20Hold%20Locks%20While%20Notifying%20_%20Twisted%20Oak%20Studios%20Blog_files/31a6ce579f8f9f9d528715d1e941726e_002.png" class="avatar avatar-64 photo" width="64" height="64"><span class="display-name">Craig Gidney</span><span class="username">craig</span></a>		</li>
		<li id="wp-admin-bar-edit-profile"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/profile.php">Edit My Profile</a>		</li>
		<li id="wp-admin-bar-logout"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-login.php?action=logout&amp;_wpnonce=a1faa76d1a">Log Out</a>		</li></ul></div>		</li></ul>			</div>
			<a class="screen-reader-shortcut" href="http://twistedoakstudios.com/blog/wp-login.php?action=logout&amp;_wpnonce=a1faa76d1a">Log Out</a>
		</div></body></html>