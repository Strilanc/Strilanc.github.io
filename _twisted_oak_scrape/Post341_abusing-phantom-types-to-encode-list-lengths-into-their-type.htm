<!DOCTYPE html>
<!-- paulirish.com/2008/conditional-stylesheets-vs-css-hacks-answer-neither/ -->
<!--[if lt IE 7]> <html class="no-js ie6 oldie" lang="en"> <![endif]-->
<!--[if IE 7]>    <html class="no-js ie7 oldie" lang="en"> <![endif]-->
<!--[if IE 8]>    <html class="no-js ie8 oldie" lang="en"> <![endif]-->
<!-- Consider adding an manifest.appcache: h5bp.com/d/Offline -->
<!--[if gt IE 8]><!-->
<html class=" js flexbox canvas canvastext webgl no-touch geolocation postmessage no-websqldatabase indexeddb hashchange history draganddrop websockets rgba hsla multiplebgs backgroundsize borderimage borderradius boxshadow textshadow opacity cssanimations csscolumns cssgradients no-cssreflections csstransforms csstransforms3d csstransitions fontface generatedcontent video audio localstorage sessionstorage webworkers applicationcache svg inlinesvg smil svgclippaths" xmlns="http://www.w3.org/1999/xhtml" xmlns:og="http://ogp.me/ns#" xmlns:fb="https://www.facebook.com/2008/fbml" lang="en"><script id="bug.surrogate">var urchinTracker=function(){},_gaq={push:function(){try {if(arguments[0][0]=='_link')window.location.href=arguments[0][1]}catch(er){}}},_gat={_createTracker:function(){}, _getTracker:function(){return{__noSuchMethod__:function(){},_link:function(o){if(o)location.href=o;},_linkByPost:function(){return true;},_getLinkerUrl:function(o){return o;},_trackEvent:function(){}}}}; if (document.location.host == 'www.salon.com') {var _ga_ = document.querySelectorAll('script[src$=ga\\.js]')[0], ga_e = document.createEvent('Event'); ga_e.initEvent('load', true, true);_ga_.dispatchEvent(ga_e);}</script><!--<![endif]--><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
  <meta charset="utf-8">
   <!-- blog feed link -->
  <link href="http://twistedoakstudios.com/blog/?feed=rss" rel="alternate" type="application/rss+xml" title="Twisted Oak Studios Blog">

  <!-- Use the .htaccess and remove these lines to avoid edge case issues.
       More info: h5bp.com/b/378 -->
  <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">

  <title>Twisted Oak Studios | Game Developers | Unity 3D Development</title>
  <meta name="description" content="As a lean co-operative team of seasoned developers, Twisted Oak is able to offer efficient, flexible remote and on-the-floor development and consulting without any middle-man or excessive administrivia.">
  <meta name="author" content="/humans.txt">

  <meta name="viewport" content="width=device-width,initial-scale=1">

  <link rel="shortcut icon" href="http://twistedoakstudios.com/blog/favicon.ico">
  <link rel="apple-touch-icon-precomposed" href="http://twistedoakstudios.com/blog/apple-touch-icon-precomposed.png">

  	<!-- The 1140px Grid - http://cssgrid.net/ -->
	<link rel="stylesheet" href="Post341_abusing-phantom-types-to-encode-list-lengths-into-their-type_files/1140.css">
    <link rel="stylesheet" href="Post341_abusing-phantom-types-to-encode-list-lengths-into-their-type_files/style.css">
    <link rel="stylesheet" href="Post341_abusing-phantom-types-to-encode-list-lengths-into-their-type_files/blogstyle.css">
<link rel="stylesheet" href="Post341_abusing-phantom-types-to-encode-list-lengths-into-their-type_files/prettify.css" media="all">
<link rel="stylesheet" href="Post341_abusing-phantom-types-to-encode-list-lengths-into-their-type_files/sunburst.css" media="all">
<script type="text/javascript" src="Post341_abusing-phantom-types-to-encode-list-lengths-into-their-type_files/prettify.js"></script>

	<!-- Webfonts! -->
	<link href="Post341_abusing-phantom-types-to-encode-list-lengths-into-their-type_files/css.css" rel="stylesheet" type="text/css">

	<!-- Open Graph -->
	<meta property="og:title" content="Twisted Oak Studios">
	<meta property="og:type" content="company">
	<meta property="og:url" content="http://www.twistedoakstudios.com/">
	<meta property="og:image" content="http://www.twistedoakstudios.com/images/logo.png">
	<meta property="og:description" content="As a lean co-operative team of seasoned developers, Twisted Oak is able to offer efficient, flexible remote and on-the-floor development and consulting without any middle-man or excessive administrivia.">
  
  <script src="Post341_abusing-phantom-types-to-encode-list-lengths-into-their-type_files/modernizr-2.js"></script>
</head>
<body onload="prettyPrint()">
<!-- begin header -->
<div class="container header-container">
	<div class="row">
		<header>
			<div class="threecol">
				<a href="#"><img class="logo" src="Post341_abusing-phantom-types-to-encode-list-lengths-into-their-type_files/logo.png"></a>
			</div><!-- .threecol -->
		
			<div class="fourcol navcol">
				<nav>
					<ul class="primary-nav clearfix">
						<li><a href="http://twistedoakstudios.com/">Home</a></li>
						<li><a href="http://twistedoakstudios.com/portfolio/">Portfolio</a></li>
						<li><a class="scroll" href="#contact">Contact</a></li>
						<li><a href="http://twistedoakstudios.com/blog/">Blog</a></li>
					</ul>
				</nav>
			</div>    

    	</header>
	</div><!-- .row -->
</div><!-- .container -->


	<div id="main">
<span class="blog">
<div class="container home-container" id="home">
	<div class="row">
		<section>
			
			<div class="ninecol">


<h2><a href="http://twistedoakstudios.com/blog/Post341_abusing-phantom-types-to-encode-list-lengths-into-their-type" rel="bookmark" title="Permanent Link to Abusing “Phantom Types” to Encode List Lengths Into Their Type">Abusing “Phantom Types” to Encode List Lengths Into Their Type</a></h2>
<div class="meta">posted by Craig Gidney on September 10, 2012</div>

<p>Yesterday there was a <a href="http://www.reddit.com/r/programming/comments/zm7f9/phantom_types_in_java/">post on Reddit about “phantom types”</a>
 in Java. Phantom types are a technique to expose runtime state to the 
compiler (without lots of code duplication). The idea is to take a 
class, add a generic parameter, and use empty interfaces as sigils that 
indicate particular states. The example from the post splits a Plane 
class into Plane&lt;Landed&gt;, Plane&lt;Landing&gt; and 
Plane&lt;Flying&gt;. This is useful because, for example, the compiler 
will prevent you from mistakenly passing a flying plane into a “taxi to 
runway” method.</p>
<p>I don’t know exactly how I feel about phantom types as a practical 
coding technique, but I do know it’s possible to abuse them a lot more 
than you might initially expect. In particular, your sigil types can 
themselves be generic and this allows you to do things like counting. I 
will demonstrate this fact with a rudimentary example: a list with known
 compile-time size in C#.</p>
<p>The basic technique mirrors the <a href="http://en.wikipedia.org/wiki/Peano_axioms">Peano Axioms</a>
 that define the natural numbers. You have a ‘zero’ interface and a 
‘next number’ interface that you nest around zero many times. Numbers 
are encoded into the nesting depth:</p>
<pre><code class="prettyprint"><span class="kwd">interface</span><span class="pln"> </span><span class="typ">ILength</span><span class="pln"> </span><span class="pun">{}</span><span class="pln">
</span><span class="kwd">interface</span><span class="pln"> </span><span class="typ">IZero</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="typ">ILength</span><span class="pln"> </span><span class="pun">{}</span><span class="pln">
</span><span class="kwd">interface</span><span class="pln"> </span><span class="typ">IOnePlus</span><span class="pun">&lt;</span><span class="typ">TLen</span><span class="pun">&gt;</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="typ">ILength</span><span class="pln"> </span><span class="kwd">where</span><span class="pln"> </span><span class="typ">TLen</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="typ">ILength</span><span class="pln"> </span><span class="pun">{}</span><span class="pln">
</span><span class="com">//0 == IZero, 1 == IOnePlus&lt;IZero&gt;, 2 == IOnePlus&lt;IOnePlus&lt;IZero&gt;&gt;, ...</span></code></pre>
<p>Now all we need is a list type that includes a generic parameter for its length:</p>
<pre><code class="prettyprint"><span class="kwd">class</span><span class="pln"> </span><span class="typ">SizedList</span><span class="pun">&lt;</span><span class="typ">TItem</span><span class="pun">,</span><span class="pln"> </span><span class="typ">TLen</span><span class="pun">&gt;</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="typ">IEnumerable</span><span class="pun">&lt;</span><span class="typ">TItem</span><span class="pun">&gt;</span><span class="pln"> </span><span class="kwd">where</span><span class="pln"> </span><span class="typ">TLen</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="typ">ILength</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">readonly</span><span class="pln"> </span><span class="typ">Link</span><span class="pun">&lt;</span><span class="typ">TItem</span><span class="pun">&gt;</span><span class="pln"> </span><span class="typ">Head</span><span class="pun">;</span><span class="pln">
    </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">SizedList</span><span class="pun">(</span><span class="typ">Link</span><span class="pun">&lt;</span><span class="typ">TItem</span><span class="pun">&gt;</span><span class="pln"> head</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">this</span><span class="pun">.</span><span class="typ">Head</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> head</span><span class="pun">;</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
    </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">IEnumerator</span><span class="pun">&lt;</span><span class="typ">TItem</span><span class="pun">&gt;</span><span class="pln"> </span><span class="typ">GetEnumerator</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">var</span><span class="pln"> e </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="typ">Head</span><span class="pun">;</span><span class="pln"> e </span><span class="pun">!=</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">;</span><span class="pln"> e </span><span class="pun">=</span><span class="pln"> e</span><span class="pun">.</span><span class="typ">Next</span><span class="pun">)</span><span class="pln">
            </span><span class="kwd">yield</span><span class="pln"> </span><span class="kwd">return</span><span class="pln"> e</span><span class="pun">.</span><span class="typ">Item</span><span class="pun">;</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
    </span><span class="typ">IEnumerator</span><span class="pln"> </span><span class="typ">IEnumerable</span><span class="pun">.</span><span class="typ">GetEnumerator</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">return</span><span class="pln"> </span><span class="typ">GetEnumerator</span><span class="pun">();</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span><span class="pln">
</span><span class="kwd">class</span><span class="pln"> </span><span class="typ">Link</span><span class="pun">&lt;</span><span class="pln">T</span><span class="pun">&gt;</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">readonly</span><span class="pln"> T </span><span class="typ">Item</span><span class="pun">;</span><span class="pln">
    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">readonly</span><span class="pln"> </span><span class="typ">Link</span><span class="pun">&lt;</span><span class="pln">T</span><span class="pun">&gt;</span><span class="pln"> </span><span class="typ">Next</span><span class="pun">;</span><span class="pln">
    </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">Link</span><span class="pun">(</span><span class="pln">T item</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Link</span><span class="pun">&lt;</span><span class="pln">T</span><span class="pun">&gt;</span><span class="pln"> </span><span class="kwd">next</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">this</span><span class="pun">.</span><span class="typ">Item</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> item</span><span class="pun">;</span><span class="pln">
        </span><span class="kwd">this</span><span class="pun">.</span><span class="typ">Next</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">next</span><span class="pun">;</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code></pre>
<p>and some methods that maintain the invariant that the nesting depth matches the list length:</p>
<pre><code class="prettyprint"><span class="kwd">static</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">SizedList</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="typ">SizedList</span><span class="pun">&lt;</span><span class="pln">T</span><span class="pun">,</span><span class="pln"> </span><span class="typ">IZero</span><span class="pun">&gt;</span><span class="pln"> </span><span class="typ">Empty</span><span class="pun">&lt;</span><span class="pln">T</span><span class="pun">&gt;()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">SizedList</span><span class="pun">&lt;</span><span class="pln">T</span><span class="pun">,</span><span class="pln"> </span><span class="typ">IZero</span><span class="pun">&gt;(</span><span class="kwd">null</span><span class="pun">);</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
    </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">SizedList</span><span class="pun">&lt;</span><span class="typ">TItem</span><span class="pun">,</span><span class="pln"> </span><span class="typ">IOnePlus</span><span class="pun">&lt;</span><span class="typ">TLen</span><span class="pun">&gt;&gt;</span><span class="pln"> </span><span class="typ">WithAppend</span><span class="pun">&lt;</span><span class="typ">TItem</span><span class="pun">,</span><span class="pln"> </span><span class="typ">TLen</span><span class="pun">&gt;(</span><span class="pln">
            </span><span class="kwd">this</span><span class="pln"> </span><span class="typ">SizedList</span><span class="pun">&lt;</span><span class="typ">TItem</span><span class="pun">,</span><span class="pln"> </span><span class="typ">TLen</span><span class="pun">&gt;</span><span class="pln"> list</span><span class="pun">,</span><span class="pln">
            </span><span class="typ">TItem</span><span class="pln"> item</span><span class="pun">)</span><span class="pln"> </span><span class="kwd">where</span><span class="pln"> </span><span class="typ">TLen</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="typ">ILength</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">SizedList</span><span class="pun">&lt;</span><span class="typ">TItem</span><span class="pun">,</span><span class="pln"> </span><span class="typ">IOnePlus</span><span class="pun">&lt;</span><span class="typ">TLen</span><span class="pun">&gt;&gt;(</span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Link</span><span class="pun">&lt;</span><span class="typ">TItem</span><span class="pun">&gt;(</span><span class="pln">item</span><span class="pun">,</span><span class="pln"> list</span><span class="pun">.</span><span class="typ">Head</span><span class="pun">));</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="typ">SizedList</span><span class="pun">&lt;</span><span class="typ">TItem</span><span class="pun">,</span><span class="pln"> </span><span class="typ">TLen</span><span class="pun">&gt;</span><span class="pln"> </span><span class="typ">WithPop</span><span class="pun">&lt;</span><span class="typ">TItem</span><span class="pun">,</span><span class="pln"> </span><span class="typ">TLen</span><span class="pun">&gt;(</span><span class="pln">
            </span><span class="kwd">this</span><span class="pln"> </span><span class="typ">SizedList</span><span class="pun">&lt;</span><span class="typ">TItem</span><span class="pun">,</span><span class="pln"> </span><span class="typ">IOnePlus</span><span class="pun">&lt;</span><span class="typ">TLen</span><span class="pun">&gt;&gt;</span><span class="pln"> items</span><span class="pun">)</span><span class="pln"> </span><span class="kwd">where</span><span class="pln"> </span><span class="typ">TLen</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="typ">ILength</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">SizedList</span><span class="pun">&lt;</span><span class="typ">TItem</span><span class="pun">,</span><span class="pln"> </span><span class="typ">TLen</span><span class="pun">&gt;(</span><span class="pln">items</span><span class="pun">.</span><span class="typ">Head</span><span class="pun">.</span><span class="typ">Next</span><span class="pun">);</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code></pre>
<p>The benefits of this abuse? Compile-time errors when the size of the list is wrong:</p>
<pre><code class="prettyprint"><span class="kwd">static</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">Program</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">static</span><span class="pln"> </span><span class="typ">Tuple</span><span class="pun">&lt;</span><span class="kwd">int</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">int</span><span class="pun">&gt;</span><span class="pln"> </span><span class="typ">SafeToPair</span><span class="pun">(</span><span class="kwd">this</span><span class="pln"> </span><span class="typ">SizedList</span><span class="pun">&lt;</span><span class="kwd">int</span><span class="pun">,</span><span class="pln"> </span><span class="typ">IOnePlus</span><span class="pun">&lt;</span><span class="typ">IOnePlus</span><span class="pun">&lt;</span><span class="typ">IZero</span><span class="pun">&gt;&gt;&gt;</span><span class="pln"> list</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">return</span><span class="pln"> </span><span class="typ">Tuple</span><span class="pun">.</span><span class="typ">Create</span><span class="pun">(</span><span class="pln">list</span><span class="pun">.</span><span class="typ">Head</span><span class="pun">.</span><span class="typ">Item</span><span class="pun">,</span><span class="pln"> list</span><span class="pun">.</span><span class="typ">Head</span><span class="pun">.</span><span class="typ">Next</span><span class="pun">.</span><span class="typ">Item</span><span class="pun">);</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
    </span><span class="kwd">static</span><span class="pln"> </span><span class="typ">TItem</span><span class="pln"> </span><span class="typ">SafeMax</span><span class="pun">&lt;</span><span class="typ">TItem</span><span class="pun">,</span><span class="pln"> </span><span class="typ">TLen</span><span class="pun">&gt;(</span><span class="kwd">this</span><span class="pln"> </span><span class="typ">SizedList</span><span class="pun">&lt;</span><span class="typ">TItem</span><span class="pun">,</span><span class="pln"> </span><span class="typ">IOnePlus</span><span class="pun">&lt;</span><span class="typ">TLen</span><span class="pun">&gt;&gt;</span><span class="pln"> list</span><span class="pun">)</span><span class="pln"> </span><span class="kwd">where</span><span class="pln"> </span><span class="typ">TLen</span><span class="pun">:</span><span class="typ">ILength</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">return</span><span class="pln"> list</span><span class="pun">.</span><span class="typ">Max</span><span class="pun">();</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">

    </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> </span><span class="typ">Main</span><span class="pun">(</span><span class="kwd">string</span><span class="pun">[]</span><span class="pln"> args</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">var</span><span class="pln"> list0 </span><span class="pun">=</span><span class="pln"> </span><span class="typ">SizedList</span><span class="pun">.</span><span class="typ">Empty</span><span class="str">&lt;int&gt;</span><span class="pun">();</span><span class="pln">
        </span><span class="kwd">var</span><span class="pln"> list1 </span><span class="pun">=</span><span class="pln"> list0</span><span class="pun">.</span><span class="typ">WithAppend</span><span class="pun">(</span><span class="lit">5</span><span class="pun">);</span><span class="pln">
        </span><span class="kwd">var</span><span class="pln"> list2 </span><span class="pun">=</span><span class="pln"> list1</span><span class="pun">.</span><span class="typ">WithAppend</span><span class="pun">(</span><span class="lit">6</span><span class="pun">);</span><span class="pln">
        </span><span class="kwd">var</span><span class="pln"> list3 </span><span class="pun">=</span><span class="pln"> list2</span><span class="pun">.</span><span class="typ">WithAppend</span><span class="pun">(</span><span class="lit">7</span><span class="pun">);</span><span class="pln">
        </span><span class="kwd">var</span><span class="pln"> list2B </span><span class="pun">=</span><span class="pln"> list3</span><span class="pun">.</span><span class="typ">WithPop</span><span class="pun">();</span><span class="pln">

        </span><span class="com">// SafeMax only works on non-empty lists (compiler errors on others)</span><span class="pln">
        </span><span class="kwd">var</span><span class="pln"> compileError1 </span><span class="pun">=</span><span class="pln"> list0</span><span class="pun">.</span><span class="typ">SafeMax</span><span class="pun">();</span><span class="pln"> </span><span class="com">//&lt;-- not allowed</span><span class="pln">
        </span><span class="kwd">var</span><span class="pln"> max1 </span><span class="pun">=</span><span class="pln"> list1</span><span class="pun">.</span><span class="typ">SafeMax</span><span class="pun">();</span><span class="pln">
        </span><span class="kwd">var</span><span class="pln"> max2 </span><span class="pun">=</span><span class="pln"> list2</span><span class="pun">.</span><span class="typ">SafeMax</span><span class="pun">();</span><span class="pln">
        </span><span class="kwd">var</span><span class="pln"> max2B </span><span class="pun">=</span><span class="pln"> list2B</span><span class="pun">.</span><span class="typ">SafeMax</span><span class="pun">();</span><span class="pln">
        </span><span class="kwd">var</span><span class="pln"> max3 </span><span class="pun">=</span><span class="pln"> list3</span><span class="pun">.</span><span class="typ">SafeMax</span><span class="pun">();</span><span class="pln">

        </span><span class="com">// SafeToPair only works on size 2 lists (compiler errors on others)</span><span class="pln">
        </span><span class="kwd">var</span><span class="pln"> compileError2 </span><span class="pun">=</span><span class="pln"> list0</span><span class="pun">.</span><span class="typ">SafeToPair</span><span class="pun">();</span><span class="pln"> </span><span class="com">//&lt;-- not allowed</span><span class="pln">
        </span><span class="kwd">var</span><span class="pln"> compileError3 </span><span class="pun">=</span><span class="pln"> list1</span><span class="pun">.</span><span class="typ">SafeToPair</span><span class="pun">();</span><span class="pln"> </span><span class="com">//&lt;-- not allowed</span><span class="pln">
        </span><span class="kwd">var</span><span class="pln"> pair1 </span><span class="pun">=</span><span class="pln"> list2</span><span class="pun">.</span><span class="typ">SafeToPair</span><span class="pun">();</span><span class="pln">
        </span><span class="kwd">var</span><span class="pln"> pair2 </span><span class="pun">=</span><span class="pln"> list2B</span><span class="pun">.</span><span class="typ">SafeToPair</span><span class="pun">();</span><span class="pln">
        </span><span class="kwd">var</span><span class="pln"> compileError4 </span><span class="pun">=</span><span class="pln"> list3</span><span class="pun">.</span><span class="typ">SafeToPair</span><span class="pun">();</span><span class="pln"> </span><span class="com">//&lt;-- not allowed</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code></pre>
<p>This counting-with-types technique is clearly useful, but I don't 
recommend jumping through the necessary hoops in practice. Things can 
get really ugly when you try to, for example, implement SelectMany over 
sized lists. I'm not even sure if compile times won't <a href="http://blogs.msdn.com/b/ericlippert/archive/2007/03/26/lambda-expressions-vs-anonymous-methods-part-four.aspx">go exponential</a> under this sort of abuse.</p>

<blockquote><p>
<span style="color:#4A9EC2"><em><br>
Twisted Oak Studios offers efficient, flexible remote and on-the-floor 
development and consulting without any middle-man or excessive 
administrivia. <a href="mailto:contact@twistedoakstudios.com">Give us a shout</a> if you have anything you think some really rad engineers should help you with.<br>
</em></span>
</p></blockquote>
<h2>Older Posts</h2>
<p></p><ul>
     <li><a href="http://twistedoakstudios.com/blog/Post1295_publish-your-net-library-as-a-nuget-package" rel="bookmark" title="Permanent Link to Publish your .Net library as a NuGet package">Publish your .Net library as a NuGet package</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post1130_when-null-is-not-enough-an-option-type-for-c" rel="bookmark" title="Permanent Link to When null is not enough: an option type for C#">When null is not enough: an option type for C#</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post1473_unfathomable-bugs-5-readonly-or-not" rel="bookmark" title="Permanent Link to Unfathomable Bugs #5: Readonly or not">Unfathomable Bugs #5: Readonly or not</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post667_minkowski-sums-examples" rel="bookmark" title="Permanent Link to Minkowski sums: examples">Minkowski sums: examples</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post1080_my-bug-my-bad-1-fractal-spheres" rel="bookmark" title="Permanent Link to My Bug, My Bad #1: Fractal Spheres">My Bug, My Bad #1: Fractal Spheres</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post1007_working-around-the-brittle-ui-virtualization-in-windows-8" rel="bookmark" title="Permanent Link to Working around the brittle UI Virtualization in Windows 8">Working around the brittle UI Virtualization in Windows 8</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post938_encapsulating-angles" rel="bookmark" title="Permanent Link to Encapsulating Angles">Encapsulating Angles</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post925_unfathomable-bugs-4-keys-that-arent" rel="bookmark" title="Permanent Link to Unfathomable Bugs #4: Keys that aren’t">Unfathomable Bugs #4: Keys that aren’t</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post867_how-would-i-even-use-a-monad-in-c" rel="bookmark" title="Permanent Link to How would I even use a monad (in C#)?">How would I even use a monad (in C#)?</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post822_useful-methods-1-observable-wheneach" rel="bookmark" title="Permanent Link to Useful/Interesting Methods #1: Observable.WhenEach">Useful/Interesting Methods #1: Observable.WhenEach</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post818_unfathomable-bugs-3-stringing-you-along" rel="bookmark" title="Permanent Link to Unfathomable Bugs #3: Stringing you along">Unfathomable Bugs #3: Stringing you along</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post774_anonymous-implementation-classes-a-design-pattern-for-c" rel="bookmark" title="Permanent Link to Anonymous Implementation Classes – A Design Pattern for C#">Anonymous Implementation Classes – A Design Pattern for C#</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post532_tasks-for-action-script-3" rel="bookmark" title="Permanent Link to Tasks for ActionScript 3 – Improving on Event-Driven Programming">Tasks for ActionScript 3 – Improving on Event-Driven Programming</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post554_minkowski-sums-and-differences" rel="bookmark" title="Permanent Link to Minkowski sums and differences">Minkowski sums and differences</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post330_non-nullable-types-vs-c-fixing-the-billion-dollar-mistake" rel="bookmark" title="Permanent Link to Non-Nullable Types vs C#: Fixing the Billion Dollar Mistake">Non-Nullable Types vs C#: Fixing the Billion Dollar Mistake</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post384_unfathomable-bugs-2-slashing-out" rel="bookmark" title="Permanent Link to Unfathomable Bugs #2: Slashing Out">Unfathomable Bugs #2: Slashing Out</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post404_script-templates-and-base-classes" rel="bookmark" title="Permanent Link to Script templates and base classes">Script templates and base classes</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post373_unity-font-extraction" rel="bookmark" title="Permanent Link to Unity font extraction">Unity font extraction</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post261_constructive-criticism-of-the-reactive-extensions-api" rel="bookmark" title="Permanent Link to Constructive Criticism of the Reactive Extensions API">Constructive Criticism of the Reactive Extensions API</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post241_quaternions-part-3-2" rel="bookmark" title="Permanent Link to Quaternions part 3">Quaternions part 3</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post204_quaternions-part-2" rel="bookmark" title="Permanent Link to Quaternions part 2">Quaternions part 2</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post144_quaternions-part-1" rel="bookmark" title="Permanent Link to Quaternions part 1">Quaternions part 1</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post157_unfathomable-bugs-1-you-can-have-things-you-can-have-things-in-things-you-can-have" rel="bookmark" title="Permanent Link to Unfathomable Bugs #1: You can have things! You can have things IN things! You can have …">Unfathomable Bugs #1: You can have things! You can have things IN things! You can have …</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post83_coroutines-more-than-you-want-to-know" rel="bookmark" title="Permanent Link to Coroutines – More than you want to know">Coroutines – More than you want to know</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post74_asset-bundle-helper" rel="bookmark" title="Permanent Link to Asset Bundle Helper">Asset Bundle Helper</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post60_the-visual-studio-goes-away" rel="bookmark" title="Permanent Link to The Visual Studio goes away">The Visual Studio goes away</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post57_nets-time-traveling-stopwatch" rel="bookmark" title="Permanent Link to .Net’s time traveling StopWatch">.Net’s time traveling StopWatch</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post29_introducing-catalyst" rel="bookmark" title="Permanent Link to Introducing Catalyst">Introducing Catalyst</a></li>
  </ul>
<p></p>


			</div><!-- #content -->
			</section>

			</div>
		</div><!-- #container -->


</span></div><!-- .container -->


<!-- BEGIN footer-type stuff -->
<div class="container footer-container">
	<div class="row">
		
		<div class="fourcol last"><!-- .last b/c it's floated right -->
			<nav>
				<ul class="primary-nav clearfix">
					<li><a href="http://www.twistedoakstudios.com/">Home</a></li>
					<li><a href="http://twistedoakstudios.com/portfolio">Portfolio</a></li>
				</ul>
			</nav>
		</div>
		
		<div class="eightcol" id="contact">
			<p>Twisted Oak Studios<br>
				6082 Shirley Street<br>
				Halifax, NS, Canada B3H 2M8</p>
			
			<p>001-902-237-7326<br>
			<a href="mailto:contact@twistedoakstudios.com">contact@twistedoakstudios.com</a></p>
		</div>
		
		<div class="twelvecol">
			<footer>
				<small>©2012
					<script>
						var d=new Date(); 
						yr=d.getFullYear();
						if (yr!=2012)
						document.write("- "+yr);
					</script> Twisted Oak Studios Ltd. -- All Rights Reserved -- All images and logos are property of their respective owners.
				</small>
			</footer>
		</div>
		
		
	</div><!-- .row -->
</div><!-- .container -->
<!-- END footer stuff-->

<!-- jQuery and scrolly script for contact link -->
<script src="Post341_abusing-phantom-types-to-encode-list-lengths-into-their-type_files/jquery.js"></script>
  <script>window.jQuery || document.write('<script src="../js/libs/jquery-1.6.2.min.js"><\/script>')</script>

<script src="Post341_abusing-phantom-types-to-encode-list-lengths-into-their-type_files/scrolly.js"></script>


  <!-- Don't forget Analytics! -->



  <!-- Prompt IE 6 users to install Chrome Frame. Remove this if you want to support IE 6.
       chromium.org/developers/how-tos/chrome-frame-getting-started -->
  <!--[if lt IE 7 ]>
    <script src="//ajax.googleapis.com/ajax/libs/chrome-frame/1.0.3/CFInstall.min.js"></script>
    <script>window.attachEvent('onload',function(){CFInstall.check({mode:'overlay'})})</script>
  <![endif]-->
  

<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-31441525-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script></body></html>