<!DOCTYPE html>
<!-- paulirish.com/2008/conditional-stylesheets-vs-css-hacks-answer-neither/ -->
<!--[if lt IE 7]> <html class="no-js ie6 oldie" lang="en"> <![endif]-->
<!--[if IE 7]>    <html class="no-js ie7 oldie" lang="en"> <![endif]-->
<!--[if IE 8]>    <html class="no-js ie8 oldie" lang="en"> <![endif]-->
<!-- Consider adding an manifest.appcache: h5bp.com/d/Offline -->
<!--[if gt IE 8]><!-->
<html class=" js flexbox canvas canvastext webgl no-touch geolocation postmessage no-websqldatabase indexeddb hashchange history draganddrop websockets rgba hsla multiplebgs backgroundsize borderimage borderradius boxshadow textshadow opacity cssanimations csscolumns cssgradients no-cssreflections csstransforms csstransforms3d csstransitions fontface generatedcontent video audio localstorage sessionstorage webworkers applicationcache svg inlinesvg smil svgclippaths" xmlns="http://www.w3.org/1999/xhtml" xmlns:og="http://ogp.me/ns#" xmlns:fb="https://www.facebook.com/2008/fbml" lang="en"><script>var urchinTracker=function(){},_gaq={push:function(){try {if(arguments[0][0]=='_link')window.location.href=arguments[0][1]}catch(er){}}},_gat={_createTracker:function(){}, _getTracker:function(){return{__noSuchMethod__:function(){},_link:function(o){if(o)location.href=o;},_linkByPost:function(){return true;},_getLinkerUrl:function(o){return o;},_trackEvent:function(){}}}};</script><!--<![endif]--><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
  <meta charset="utf-8">
   <!-- blog feed link -->
  <link href="http://twistedoakstudios.com/blog/?feed=rss" rel="alternate" type="application/rss+xml" title="Twisted Oak Studios Blog">

  <!-- Use the .htaccess and remove these lines to avoid edge case issues.
       More info: h5bp.com/b/378 -->
  <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">

  <title>Twisted Oak Studios | Unity3D Consulting | Technical Magic</title>
  <meta name="description" content="As a lean co-operative team of seasoned developers, Twisted Oak is able to offer efficient, flexible remote and on-the-floor development and consulting without any middle-man or excessive administrivia.">
  <meta name="author" content="/humans.txt">

  <meta name="viewport" content="width=device-width,initial-scale=1">

  <link rel="shortcut icon" href="http://twistedoakstudios.com/blog/favicon.ico">
  <link rel="apple-touch-icon-precomposed" href="http://twistedoakstudios.com/blog/apple-touch-icon-precomposed.png">

  	<!-- The 1140px Grid - http://cssgrid.net/ -->
	<link rel="stylesheet" href="Searching%20a%20Sorted%20Matrix%20Faster_files/1140.css">
    <link rel="stylesheet" href="Searching%20a%20Sorted%20Matrix%20Faster_files/style.css">
    <link rel="stylesheet" href="Searching%20a%20Sorted%20Matrix%20Faster_files/blogstyle.css">
<link rel="stylesheet" href="Searching%20a%20Sorted%20Matrix%20Faster_files/prettify.css" media="all">
<link rel="stylesheet" href="Searching%20a%20Sorted%20Matrix%20Faster_files/sunburst.css" media="all">
<script type="text/javascript" src="Searching%20a%20Sorted%20Matrix%20Faster_files/prettify.js"></script>

	<!-- Webfonts! -->
	<link href="Searching%20a%20Sorted%20Matrix%20Faster_files/css.css" rel="stylesheet" type="text/css">

	<!-- Open Graph -->
	<meta property="og:title" content="Twisted Oak Studios">
	<meta property="og:type" content="company">
	<meta property="og:url" content="http://www.twistedoakstudios.com/">
	<meta property="og:image" content="http://www.twistedoakstudios.com/images/logo.png">
	<meta property="og:description" content="As a lean co-operative team of seasoned developers, Twisted Oak is able to offer efficient, flexible remote and on-the-floor development and consulting without any middle-man or excessive administrivia.">
  
  <script src="Searching%20a%20Sorted%20Matrix%20Faster_files/modernizr-2.js"></script>
</head>
<body class=" customize-support" onload="prettyPrint()">
<!-- begin header -->
<div class="container header-container">
	<div class="row">
		<header>
			<div class="threecol">
				<a href="#"><img class="logo" src="Searching%20a%20Sorted%20Matrix%20Faster_files/logo.png"></a>
			</div><!-- .threecol -->
		
			<div class="fourcol navcol">
				<nav>
					<ul class="primary-nav clearfix">
						<li><a href="http://twistedoakstudios.com/">Home</a></li>
						<li><a href="http://twistedoakstudios.com/portfolio/">Portfolio</a></li>
						<li><a href="http://twistedoakstudios.com/labs/">Labs</a></li>
						<li><a class="scroll" href="#contact">Contact</a></li>
						<li><a href="http://twistedoakstudios.com/blog/">Blog</a></li>
					</ul>
				</nav>
			</div>    

    	</header>
	</div><!-- .row -->
</div><!-- .container -->


	<div id="main">
<span class="blog">
<div class="container home-container" id="home">
	<div class="row">
    <p class="big-callout">We're hiring! Experience with Game Dev, Unity3D, Graphics, Signal Processing, or Networking? Eligible to work in Canada? 
      <a href="http://www.twistedoakstudios.com/jobs.php">Check it out</a>!

    </p>
		<section>
			
			<div class="ninecol">


<h2><a href="http://twistedoakstudios.com/blog/Post5365_searching-a-sorted-matrix-faster" rel="bookmark" title="Permanent Link to Searching a Sorted Matrix Faster">Searching a Sorted Matrix Faster</a></h2>
<div class="meta">posted by Craig Gidney on August 13, 2013</div>

<p>In this post: Craig solves a problem that’s already been solved, 
except most people get the solution wrong or claim non-optimal solutions
 are optimal. Hopefully he makes up for any retreading by providing 
visualizations and working code and explaining real good.</p>
<h3>The Problem</h3>
<p>Three years ago, I came across an <a href="http://stackoverflow.com/q/2457792/52239">interview puzzle question on stack overflow</a>:
 create an efficient algorithm that finds the position of a target item 
within a matrix where each row and column happens to be sorted.</p>
<p>For example:</p>
<p><img src="Searching%20a%20Sorted%20Matrix%20Faster_files/quicklatex_045.png" class="ql-img-inline-formula " alt="M = \left( \begin{array}{ccccc} 1 &amp; 2 &amp; 3 &amp; 4 &amp; 5 \\ 1 &amp; 2 &amp; 3 &amp; 5 &amp; 7 \\ 1 &amp; 4 &amp; 9 &amp; 16 &amp; 25 \end{array} \right)" title="Rendered by QuickLaTeX.com" style="vertical-align: -28px;" height="65" width="212"></p>
<p><img src="Searching%20a%20Sorted%20Matrix%20Faster_files/quicklatex_035.png" class="ql-img-inline-formula " alt="find(M, 0) = None" title="Rendered by QuickLaTeX.com" style="vertical-align: -4px;" height="18" width="153"><br>
<img src="Searching%20a%20Sorted%20Matrix%20Faster_files/quicklatex_026.png" class="ql-img-inline-formula " alt="find(M, 1) = (0, 0)" title="Rendered by QuickLaTeX.com" style="vertical-align: -4px;" height="18" width="148"> or alternatively <img src="Searching%20a%20Sorted%20Matrix%20Faster_files/quicklatex_042.png" class="ql-img-inline-formula " alt="(0, 1)" title="Rendered by QuickLaTeX.com" style="vertical-align: -4px;" height="18" width="38"> or <img src="Searching%20a%20Sorted%20Matrix%20Faster_files/quicklatex_046.png" class="ql-img-inline-formula " alt="(0,2)" title="Rendered by QuickLaTeX.com" style="vertical-align: -4px;" height="18" width="38"><br>
<img src="Searching%20a%20Sorted%20Matrix%20Faster_files/quicklatex_018.png" class="ql-img-inline-formula " alt="find(M, 9) = (2, 2)" title="Rendered by QuickLaTeX.com" style="vertical-align: -4px;" height="18" width="148"></p>
<p>At that time, and at the time of this writing, there were three 
notable answers to the question. Each is representative of a class of 
commonly claimed solution, which you’ll find in many places if you 
search around.</p>
<p>I remember wondering at the time if the proposed solutions were optimal. Recently, I revisited and realized: nope.</p>
<h3>Non-Optimal Solution #1: Line at a Time</h3>
<p>The <a href="http://stackoverflow.com/a/2458113/52239">first notable solution</a>
 is elegantly simple: always query in the bottom left of the 
not-eliminated area, eliminating one row or column at a time. It takes <img src="Searching%20a%20Sorted%20Matrix%20Faster_files/quicklatex_002.png" class="ql-img-inline-formula " alt="O(w+h)" title="Rendered by QuickLaTeX.com" style="vertical-align: -4px;" height="18" width="72"> time, where <img src="Searching%20a%20Sorted%20Matrix%20Faster_files/quicklatex_030.png" class="ql-img-inline-formula " alt="h" title="Rendered by QuickLaTeX.com" style="vertical-align: 0px;" height="13" width="10"> is the height of the matrix and <img src="Searching%20a%20Sorted%20Matrix%20Faster_files/quicklatex_013.png" class="ql-img-inline-formula " alt="w" title="Rendered by QuickLaTeX.com" style="vertical-align: 0px;" height="8" width="13">
 is the width of the matrix. This is fine when the matrix is 
approximately square, but not optimal when the matrix is much wider than
 it is tall, or vice versa.</p>
<p>For example, consider what happens when <img src="Searching%20a%20Sorted%20Matrix%20Faster_files/quicklatex_015.png" class="ql-img-inline-formula " alt="h = 1" title="Rendered by QuickLaTeX.com" style="vertical-align: -1px;" height="14" width="42">: we just have a normal sorted list, and can apply binary search to solve the problem in <img src="Searching%20a%20Sorted%20Matrix%20Faster_files/quicklatex_029.png" class="ql-img-inline-formula " alt="O(lg(w))" title="Rendered by QuickLaTeX.com" style="vertical-align: -4px;" height="18" width="69"> time, but line-at-a-time will take <img src="Searching%20a%20Sorted%20Matrix%20Faster_files/quicklatex_017.png" class="ql-img-inline-formula " alt="O(w)" title="Rendered by QuickLaTeX.com" style="vertical-align: -4px;" height="18" width="40"> time. Line-at-a-time is not optimal when the matrix is very tall or very wide.</p>
<h3>Non-Optimal Solution #2: Divide and Conquer</h3>
<p>The <a href="http://stackoverflow.com/a/2458015/52239">second notable solution</a>
 is a divide-and-conquer approach. It queries the center of a 
rectangular area to be searched, eliminating either the upper left or 
bottom right quadrant, then divides the remaining valid area into two 
rectangles, and recurses on those rectangles.</p>
<p>This answer has an interesting recurrence relation for its running 
time, assuming the asymmetry of the search areas doesn’t affect the 
running time: <img src="Searching%20a%20Sorted%20Matrix%20Faster_files/quicklatex_043.png" class="ql-img-inline-formula " alt="T(a) = 1 + T(a/2) + T(a/4)" title="Rendered by QuickLaTeX.com" style="vertical-align: -5px;" height="19" width="218">. To me this looks like a nice efficient relation, but when you actually solve it (no, you can’t apply the <a href="http://en.wikipedia.org/wiki/Master_theorem">master theorem</a>) you see that it’s not.</p>
<p>The recurrence relation solves to <img src="Searching%20a%20Sorted%20Matrix%20Faster_files/quicklatex_014.png" class="ql-img-inline-formula " alt="T(a) = O \left( Fibonacci(lg_2(a)) \right) = O \left( \phi^{lg_2(a)} \right) = O ( a^{\frac{lg(\phi)}{lg(2)}} ) \approx a^{0.7}" title="Rendered by QuickLaTeX.com" style="vertical-align: -7px;" height="30" width="473">. So the divide and conquer algorithm takes <img src="Searching%20a%20Sorted%20Matrix%20Faster_files/quicklatex_032.png" class="ql-img-inline-formula " alt="O \left( (w \cdot h)^{0.7} \right)" title="Rendered by QuickLaTeX.com" style="vertical-align: -7px;" height="22" width="99"> time, which is <img src="Searching%20a%20Sorted%20Matrix%20Faster_files/quicklatex_021.png" class="ql-img-inline-formula " alt="O \left( (w+h)^{1.4}\right)" title="Rendered by QuickLaTeX.com" style="vertical-align: -7px;" height="22" width="108"> when <img src="Searching%20a%20Sorted%20Matrix%20Faster_files/quicklatex_010.png" class="ql-img-inline-formula " alt="w \approx h" title="Rendered by QuickLaTeX.com" style="vertical-align: 0px;" height="13" width="47">, which is more than line-at-a-time’s <img src="Searching%20a%20Sorted%20Matrix%20Faster_files/quicklatex_002.png" class="ql-img-inline-formula " alt="O(w+h)" title="Rendered by QuickLaTeX.com" style="vertical-align: -4px;" height="18" width="72">.</p>
<p>Note: A variant of this algorithm divides the remaining area into 
three rectangles. It also requires more-than-linear time, although its 
recurrence relation is easier to solve.</p>
<h3>Non-Optimal Solution #3: Multi Binary Search</h3>
<p>The <a href="http://stackoverflow.com/a/2457873/52239">final notable solution</a> is to do a binary search of each row or each column, depending on which is longer.</p>
<p>This approach takes time <img src="Searching%20a%20Sorted%20Matrix%20Faster_files/quicklatex_025.png" class="ql-img-inline-formula " alt="O(b \cdot lg(b \cdot t))" title="Rendered by QuickLaTeX.com" style="vertical-align: -4px;" height="18" width="102">, where <img src="Searching%20a%20Sorted%20Matrix%20Faster_files/quicklatex_016.png" class="ql-img-inline-formula " alt="b=min(w,h)" title="Rendered by QuickLaTeX.com" style="vertical-align: -4px;" height="18" width="108"> and <img src="Searching%20a%20Sorted%20Matrix%20Faster_files/quicklatex_034.png" class="ql-img-inline-formula " alt="t=\frac{max(w,h)}{b}" title="Rendered by QuickLaTeX.com" style="vertical-align: -6px;" height="26" width="92">. This is not optimal when <img src="Searching%20a%20Sorted%20Matrix%20Faster_files/quicklatex_027.png" class="ql-img-inline-formula " alt="h \approx w" title="Rendered by QuickLaTeX.com" style="vertical-align: 0px;" height="13" width="47">, (that is to say, <img src="Searching%20a%20Sorted%20Matrix%20Faster_files/quicklatex_005.png" class="ql-img-inline-formula " alt="t \approx 1" title="Rendered by QuickLaTeX.com" style="vertical-align: -1px;" height="13" width="38">). In that case the running time reduces to <img src="Searching%20a%20Sorted%20Matrix%20Faster_files/quicklatex_020.png" class="ql-img-inline-formula " alt="O((w+h) \cdot lg(w+h))" title="Rendered by QuickLaTeX.com" style="vertical-align: -4px;" height="18" width="172">, which is less efficient than line-at-a-time.</p>
<p>(Actually, it turns out that this algorithm is not optimal even when <img src="Searching%20a%20Sorted%20Matrix%20Faster_files/quicklatex_022.png" class="ql-img-inline-formula " alt="w &gt;&gt; h" title="Rendered by QuickLaTeX.com" style="vertical-align: 0px;" height="13" width="61"> or <img src="Searching%20a%20Sorted%20Matrix%20Faster_files/quicklatex_028.png" class="ql-img-inline-formula " alt="h &gt;&gt; w" title="Rendered by QuickLaTeX.com" style="vertical-align: 0px;" height="13" width="61">.
 That’s too bad, since otherwise an optimal solution would be to just 
switch between multi-binary-search and line-at-a-time based on how 
tall/wide the matrix was.)</p>
<h3>None are Optimal</h3>
<p>The takeaway so far is: everyone keeps giving non-optimal answers to 
this question. The answers I linked to don’t do claim or imply their 
answers are optimal, but if you search around you can find plenty of 
equivalent ones that do.</p>
<p>Clearly this problem is a bit more complicated than it appears.</p>
<p>To settle the issue, I’m going to solve the problem and I’m going to 
prove my solution is asymptotically optimal. I’ll do this in the usual 
way: prove some lower bound on the amount of required time, then find an
 algorithm that achieves that time bound.</p>
<h3>Lower Bounding: Adverse Diagonal</h3>
<p>Imagine you are an adversary who controls the entries of the matrix 
as it is being searched. You can delay choosing the value of a cell 
until the algorithm actually queries it. You’re not allowed to violate 
the sorted-ness of rows or columns, but you can make sure the correct 
result is in the last place the algorithm looks. How many queries can 
you force an arbitrary algorithm to do?</p>
<p>When imagining this scenario, it’s useful to forget about the fact 
that the matrix contains numbers. Instead, imagine the algorithm picking
 not-yet-eliminated positions, and the adversary deciding if the upper 
left or lower right quadrant defined by that position gets eliminated. 
How long can the adversary keep the game going? How quickly can the 
algorithm eliminate the entire grid?</p>
<p>One trick the adversary can use, to keep the game going for awhile, 
is to totally ignore everything except the main diagonal. Here’s a 
diagram of an adversary forcing an algorithm to search on the diagonal:</p>
<p><img src="Searching%20a%20Sorted%20Matrix%20Faster_files/USX7Qrl.gif" alt="Lower bound: use the diagonal"></p>
<p><em>Legend: white cells are smaller items, gray cells are larger 
items, yellow cells are smaller-or-equal items and orange cells are 
larger-or-equal items. The adversary forces the solution to be whichever
 yellow or orange cell the algorithm queries last.</em></p>
<p>The above diagram shows a main diagonal made up of <img src="Searching%20a%20Sorted%20Matrix%20Faster_files/quicklatex_031.png" class="ql-img-inline-formula " alt="b" title="Rendered by QuickLaTeX.com" style="vertical-align: 0px;" height="13" width="8"> contiguous sections of length <img src="Searching%20a%20Sorted%20Matrix%20Faster_files/quicklatex_007.png" class="ql-img-inline-formula " alt="t" title="Rendered by QuickLaTeX.com" style="vertical-align: 0px;" height="12" width="6">. Remember that <img src="Searching%20a%20Sorted%20Matrix%20Faster_files/quicklatex_016.png" class="ql-img-inline-formula " alt="b=min(w,h)" title="Rendered by QuickLaTeX.com" style="vertical-align: -4px;" height="18" width="108"> and <img src="Searching%20a%20Sorted%20Matrix%20Faster_files/quicklatex_034.png" class="ql-img-inline-formula " alt="t=\frac{max(w,h)}{b}" title="Rendered by QuickLaTeX.com" style="vertical-align: -6px;" height="26" width="92">.
 When the algorithm queries off of the diagonal it makes no progress, 
because either the upper-left or lower-right quadrant won’t include the 
diagonal and the adversary will pick that quadrant as the one to 
eliminate. Also, when the algorithm queries inside one section, it makes
 no progress on the other sections. Thus the algorithm is forced to make
 <img src="Searching%20a%20Sorted%20Matrix%20Faster_files/quicklatex_044.png" class="ql-img-inline-formula " alt="\Omega(lg(t))" title="Rendered by QuickLaTeX.com" style="vertical-align: -4px;" height="18" width="60"> queries to eliminate each of the <img src="Searching%20a%20Sorted%20Matrix%20Faster_files/quicklatex_031.png" class="ql-img-inline-formula " alt="b" title="Rendered by QuickLaTeX.com" style="vertical-align: 0px;" height="13" width="8"> sections (with a binary search).</p>
<p>This gives us a lower bound on the worst case running time: <img src="Searching%20a%20Sorted%20Matrix%20Faster_files/quicklatex_004.png" class="ql-img-inline-formula " alt="\Omega(b \cdot lg(t))" title="Rendered by QuickLaTeX.com" style="vertical-align: -4px;" height="18" width="81">. In terms of the width and height, that’s <img src="Searching%20a%20Sorted%20Matrix%20Faster_files/quicklatex_033.png" class="ql-img-inline-formula " alt="\Omega \left( min(w,h) \cdot lg \left( \frac{max(w,h)}{min(w,h)}\right) \right)" title="Rendered by QuickLaTeX.com" style="vertical-align: -12px;" height="33" width="227">. An adversary can force any algorithm to perform that many queries, using only the main diagonal.</p>
<p>Notice that when <img src="Searching%20a%20Sorted%20Matrix%20Faster_files/quicklatex_003.png" class="ql-img-inline-formula " alt="w=h" title="Rendered by QuickLaTeX.com" style="vertical-align: 0px;" height="13" width="47">, this lower bound reduces to <img src="Searching%20a%20Sorted%20Matrix%20Faster_files/quicklatex_037.png" class="ql-img-inline-formula " alt="\Omega(w \cdot lg(1)) = \Omega(w) = \Omega(w+h)" title="Rendered by QuickLaTeX.com" style="vertical-align: -4px;" height="18" width="248">
 (note: we’re using the magical computer science logarithm that’s 
clamped to a minimum result of one), which is tight against the running 
time of the line-at-a-time algorithm. That’s a good sign.</p>
<p>Also notice that, when <img src="Searching%20a%20Sorted%20Matrix%20Faster_files/quicklatex_022.png" class="ql-img-inline-formula " alt="w &gt;&gt; h" title="Rendered by QuickLaTeX.com" style="vertical-align: 0px;" height="13" width="61"> or <img src="Searching%20a%20Sorted%20Matrix%20Faster_files/quicklatex_028.png" class="ql-img-inline-formula " alt="h &gt;&gt; w" title="Rendered by QuickLaTeX.com" style="vertical-align: 0px;" height="13" width="61">, this lower bound is below the complexity achieved by multi-binary-search. Multi-binary-search takes <img src="Searching%20a%20Sorted%20Matrix%20Faster_files/quicklatex_025.png" class="ql-img-inline-formula " alt="O(b \cdot lg(b \cdot t))" title="Rendered by QuickLaTeX.com" style="vertical-align: -4px;" height="18" width="102"> time, which is not tight against <img src="Searching%20a%20Sorted%20Matrix%20Faster_files/quicklatex_004.png" class="ql-img-inline-formula " alt="\Omega(b \cdot lg(t))" title="Rendered by QuickLaTeX.com" style="vertical-align: -4px;" height="18" width="81"> time.</p>
<p>Now the question is: can we find an algorithm that meets this lower bound?</p>
<h3>Upper Bounding: Algorithm</h3>
<p>After far too much thought, I discovered the trick to making an 
algorithm that meets the lower bound: you have to use parts of both 
line-at-a-time and multi-binary-search.</p>
<p>The optimal algorithm works almost like line-at-a-time, except it advances in steps of size <img src="Searching%20a%20Sorted%20Matrix%20Faster_files/quicklatex_007.png" class="ql-img-inline-formula " alt="t" title="Rendered by QuickLaTeX.com" style="vertical-align: 0px;" height="12" width="6"> instead of size <img src="Searching%20a%20Sorted%20Matrix%20Faster_files/quicklatex_024.png" class="ql-img-inline-formula " alt="1" title="Rendered by QuickLaTeX.com" style="vertical-align: -1px;" height="13" width="7"> when moving along the long axis. This allows the algorithm to either immediately eliminate <img src="Searching%20a%20Sorted%20Matrix%20Faster_files/quicklatex_007.png" class="ql-img-inline-formula " alt="t" title="Rendered by QuickLaTeX.com" style="vertical-align: 0px;" height="12" width="6"> short lines, or to spend <img src="Searching%20a%20Sorted%20Matrix%20Faster_files/quicklatex_041.png" class="ql-img-inline-formula " alt="O(lg(t))" title="Rendered by QuickLaTeX.com" style="vertical-align: -4px;" height="18" width="62"> more operations eliminating the rest of a long line with a binary search. Since there’s only <img src="Searching%20a%20Sorted%20Matrix%20Faster_files/quicklatex_031.png" class="ql-img-inline-formula " alt="b" title="Rendered by QuickLaTeX.com" style="vertical-align: 0px;" height="13" width="8"> long lines and <img src="Searching%20a%20Sorted%20Matrix%20Faster_files/quicklatex_009.png" class="ql-img-inline-formula " alt="b \cdot t" title="Rendered by QuickLaTeX.com" style="vertical-align: 0px;" height="13" width="26"> short lines, the algorithm has running time <img src="Searching%20a%20Sorted%20Matrix%20Faster_files/quicklatex_036.png" class="ql-img-inline-formula " alt="O(b\cdot lg(t) + \frac{b \cdot t}{t}) = O(b \cdot lg(t))" title="Rendered by QuickLaTeX.com" style="vertical-align: -6px;" height="22" width="229">. Hey, that’s tight against our lower bound!</p>
<p>Here’s an animation of the algorithm finding an item:</p>
<p><img src="Searching%20a%20Sorted%20Matrix%20Faster_files/XMXLRsD.gif" alt="Upper bound: jump long and step short with binary cleanup"></p>
<p><em>Legend: white cells are smaller items, gray cells are larger items, and the green cell is an equal item.</em></p>
<p>In the above diagram, where <img src="Searching%20a%20Sorted%20Matrix%20Faster_files/quicklatex_008.png" class="ql-img-inline-formula " alt="w=40" title="Rendered by QuickLaTeX.com" style="vertical-align: -1px;" height="13" width="55"> and <img src="Searching%20a%20Sorted%20Matrix%20Faster_files/quicklatex_038.png" class="ql-img-inline-formula " alt="h=8" title="Rendered by QuickLaTeX.com" style="vertical-align: 0px;" height="13" width="43"> meaning <img src="Searching%20a%20Sorted%20Matrix%20Faster_files/quicklatex_040.png" class="ql-img-inline-formula " alt="b=8" title="Rendered by QuickLaTeX.com" style="vertical-align: 0px;" height="13" width="40"> and <img src="Searching%20a%20Sorted%20Matrix%20Faster_files/quicklatex_023.png" class="ql-img-inline-formula " alt="t=5" title="Rendered by QuickLaTeX.com" style="vertical-align: 0px;" height="13" width="38">, you can see how the algorithm tracks the boundary of the search space. It keeps querying <img src="Searching%20a%20Sorted%20Matrix%20Faster_files/quicklatex_039.png" class="ql-img-inline-formula " alt="5" title="Rendered by QuickLaTeX.com" style="vertical-align: 0px;" height="13" width="8">
 cells to the left of the top right of the current valid area. When the 
top right is well inside the gray area, past the boundary between 
smaller and larger items, this eliminates <img src="Searching%20a%20Sorted%20Matrix%20Faster_files/quicklatex.png" class="ql-img-inline-formula " alt="5+1" title="Rendered by QuickLaTeX.com" style="vertical-align: -1px;" height="14" width="39">
 columns at a time. When the top right is well inside the white area, 
most of a row is eliminated instead. Three or four more queries are 
needed to completely finish off the row, via a binary search. When 
straddling the boundary, a combination of these two things happens.</p>
<p>Here’s another animation, where the algorithm determines no matching item is present:</p>
<p><img src="Searching%20a%20Sorted%20Matrix%20Faster_files/WWG0Odh.gif" alt="Determining an item is not present"></p>
<p>Since this algorithm takes <img src="Searching%20a%20Sorted%20Matrix%20Faster_files/quicklatex_011.png" class="ql-img-inline-formula " alt="O(b \cdot lg(t))" title="Rendered by QuickLaTeX.com" style="vertical-align: -4px;" height="18" width="82"> time, and we have a lower bound of <img src="Searching%20a%20Sorted%20Matrix%20Faster_files/quicklatex_004.png" class="ql-img-inline-formula " alt="\Omega(b \cdot lg(t))" title="Rendered by QuickLaTeX.com" style="vertical-align: -4px;" height="18" width="81">, searching a sorted matrix is in <img src="Searching%20a%20Sorted%20Matrix%20Faster_files/quicklatex_006.png" class="ql-img-inline-formula " alt="\Theta(b \cdot lg(t))" title="Rendered by QuickLaTeX.com" style="vertical-align: -4px;" height="18" width="82">. Expanded to be in terms of the width and height, that’s <img src="Searching%20a%20Sorted%20Matrix%20Faster_files/quicklatex_012.png" class="ql-img-inline-formula " alt="\Theta \left(min(w,h) \cdot lg \left(\frac{max(w,h)}{min(w,h)}\right) \right)" title="Rendered by QuickLaTeX.com" style="vertical-align: -12px;" height="33" width="228">.</p>
<h3>Code</h3>
<p>I <a href="https://github.com/Strilanc/Methods/blob/cef6c95ffa9cfc127f5867d5f8daac76f3d35e63/Methods/Methods/SearchBisortedGrid/SearchBisortedGrid.cs">implemented the algorithm in C#</a>, and tested it. Here is the relevant code:</p>
<pre><code class="prettyprint"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="typ">Tuple</span><span class="pun">&lt;</span><span class="kwd">int</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">int</span><span class="pun">&gt;</span><span class="pln"> </span><span class="typ">TryFindItemInSortedMatrix</span><span class="pun">&lt;</span><span class="pln">T</span><span class="pun">&gt;(</span><span class="kwd">this</span><span class="pln"> </span><span class="typ">IReadOnlyList</span><span class="pun">&lt;</span><span class="typ">IReadOnlyList</span><span class="pun">&lt;</span><span class="pln">T</span><span class="pun">&gt;&gt;</span><span class="pln"> grid</span><span class="pun">,</span><span class="pln"> T item</span><span class="pun">,</span><span class="pln"> </span><span class="typ">IComparer</span><span class="pun">&lt;</span><span class="pln">T</span><span class="pun">&gt;</span><span class="pln"> comparer </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">grid </span><span class="pun">==</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">)</span><span class="pln"> </span><span class="kwd">throw</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">ArgumentNullException</span><span class="pun">(</span><span class="str">"grid"</span><span class="pun">);</span><span class="pln">
    comparer </span><span class="pun">=</span><span class="pln"> comparer </span><span class="pun">??</span><span class="pln"> </span><span class="typ">Comparer</span><span class="pun">&lt;</span><span class="pln">T</span><span class="pun">&gt;.</span><span class="typ">Default</span><span class="pun">;</span><span class="pln">

    </span><span class="com">// check size</span><span class="pln">
    </span><span class="kwd">var</span><span class="pln"> width </span><span class="pun">=</span><span class="pln"> grid</span><span class="pun">.</span><span class="typ">Count</span><span class="pun">;</span><span class="pln">
    </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">width </span><span class="pun">==</span><span class="pln"> </span><span class="lit">0</span><span class="pun">)</span><span class="pln"> </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">;</span><span class="pln">
    </span><span class="kwd">var</span><span class="pln"> height </span><span class="pun">=</span><span class="pln"> grid</span><span class="pun">[</span><span class="lit">0</span><span class="pun">].</span><span class="typ">Count</span><span class="pun">;</span><span class="pln">
    </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">height </span><span class="pun">&lt;</span><span class="pln"> width</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        </span><span class="com">// note: LazyTranspose uses </span><a href="http://twistedoakstudios.com/blog/Post1585_linq-to-collections-beyond-ienumerablet"><span class="com">LinqToCollections</span></a><span class="pln">
        </span><span class="kwd">var</span><span class="pln"> result </span><span class="pun">=</span><span class="pln"> grid</span><span class="pun">.</span><a href="https://github.com/Strilanc/Methods/blob/cef6c95ffa9cfc127f5867d5f8daac76f3d35e63/Methods/Methods/SearchBisortedGrid/SearchBisortedGrid.cs#L7"><span class="typ">LazyTranspose</span></a><span class="pun">().</span><span class="typ">TryFindItemInSortedMatrix</span><span class="pun">(</span><span class="pln">item</span><span class="pun">,</span><span class="pln"> comparer</span><span class="pun">);</span><span class="pln">
        </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">result </span><span class="pun">==</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">)</span><span class="pln"> </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">;</span><span class="pln">
        </span><span class="kwd">return</span><span class="pln"> </span><span class="typ">Tuple</span><span class="pun">.</span><span class="typ">Create</span><span class="pun">(</span><span class="pln">result</span><span class="pun">.</span><span class="typ">Item2</span><span class="pun">,</span><span class="pln"> result</span><span class="pun">.</span><span class="typ">Item1</span><span class="pun">);</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">

    </span><span class="com">// search</span><span class="pln">
    </span><span class="kwd">var</span><span class="pln"> minCol </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln">
    </span><span class="kwd">var</span><span class="pln"> maxRow </span><span class="pun">=</span><span class="pln"> height </span><span class="pun">-</span><span class="pln"> </span><span class="lit">1</span><span class="pun">;</span><span class="pln">
    </span><span class="kwd">var</span><span class="pln"> t </span><span class="pun">=</span><span class="pln"> height </span><span class="pun">/</span><span class="pln"> width</span><span class="pun">;</span><span class="pln">
    </span><span class="kwd">while</span><span class="pln"> </span><span class="pun">(</span><span class="pln">minCol </span><span class="pun">&lt;</span><span class="pln"> width </span><span class="pun">&amp;&amp;</span><span class="pln"> maxRow </span><span class="pun">&gt;=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        </span><span class="com">// query the item in the minimum column, t above the maximum row</span><span class="pln">
        </span><span class="kwd">var</span><span class="pln"> luckyRow </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Math</span><span class="pun">.</span><span class="typ">Max</span><span class="pun">(</span><span class="pln">maxRow </span><span class="pun">-</span><span class="pln"> t</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0</span><span class="pun">);</span><span class="pln">
        </span><span class="kwd">var</span><span class="pln"> cmpItemVsLucky </span><span class="pun">=</span><span class="pln"> comparer</span><span class="pun">.</span><span class="typ">Compare</span><span class="pun">(</span><span class="pln">item</span><span class="pun">,</span><span class="pln"> grid</span><span class="pun">[</span><span class="pln">minCol</span><span class="pun">][</span><span class="pln">luckyRow</span><span class="pun">]);</span><span class="pln">
        </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">cmpItemVsLucky </span><span class="pun">==</span><span class="pln"> </span><span class="lit">0</span><span class="pun">)</span><span class="pln"> </span><span class="kwd">return</span><span class="pln"> </span><span class="typ">Tuple</span><span class="pun">.</span><span class="typ">Create</span><span class="pun">(</span><span class="pln">minCol</span><span class="pun">,</span><span class="pln"> luckyRow</span><span class="pun">);</span><span class="pln">

        </span><span class="com">// did we eliminate t rows from the bottom?</span><span class="pln">
        </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">cmpItemVsLucky </span><span class="pun">&lt;</span><span class="pln"> </span><span class="lit">0</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
            maxRow </span><span class="pun">=</span><span class="pln"> luckyRow </span><span class="pun">-</span><span class="pln"> </span><span class="lit">1</span><span class="pun">;</span><span class="pln">
            </span><span class="kwd">continue</span><span class="pun">;</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">

        </span><span class="com">// we eliminated most of the current minimum column</span><span class="pln">
        </span><span class="com">// spend lg(t) time eliminating rest of column</span><span class="pln">
        </span><span class="kwd">var</span><span class="pln"> minRowInCol </span><span class="pun">=</span><span class="pln"> luckyRow </span><span class="pun">+</span><span class="pln"> </span><span class="lit">1</span><span class="pun">;</span><span class="pln">
        </span><span class="kwd">var</span><span class="pln"> maxRowInCol </span><span class="pun">=</span><span class="pln"> maxRow</span><span class="pun">;</span><span class="pln">
        </span><span class="kwd">while</span><span class="pln"> </span><span class="pun">(</span><span class="pln">minRowInCol </span><span class="pun">&lt;=</span><span class="pln"> maxRowInCol</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
            </span><span class="kwd">var</span><span class="pln"> mid </span><span class="pun">=</span><span class="pln"> minRowInCol </span><span class="pun">+</span><span class="pln"> </span><span class="pun">(</span><span class="pln">maxRowInCol </span><span class="pun">-</span><span class="pln"> minRowInCol </span><span class="pun">+</span><span class="pln"> </span><span class="lit">1</span><span class="pun">)</span><span class="pln"> </span><span class="pun">/</span><span class="pln"> </span><span class="lit">2</span><span class="pun">;</span><span class="pln">
            </span><span class="kwd">var</span><span class="pln"> cmpItemVsMid </span><span class="pun">=</span><span class="pln"> comparer</span><span class="pun">.</span><span class="typ">Compare</span><span class="pun">(</span><span class="pln">item</span><span class="pun">,</span><span class="pln"> grid</span><span class="pun">[</span><span class="pln">minCol</span><span class="pun">][</span><span class="pln">mid</span><span class="pun">]);</span><span class="pln">
            </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">cmpItemVsMid </span><span class="pun">==</span><span class="pln"> </span><span class="lit">0</span><span class="pun">)</span><span class="pln"> </span><span class="kwd">return</span><span class="pln"> </span><span class="typ">Tuple</span><span class="pun">.</span><span class="typ">Create</span><span class="pun">(</span><span class="pln">minCol</span><span class="pun">,</span><span class="pln"> mid</span><span class="pun">);</span><span class="pln">
            </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">cmpItemVsMid </span><span class="pun">&gt;</span><span class="pln"> </span><span class="lit">0</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
                minRowInCol </span><span class="pun">=</span><span class="pln"> mid </span><span class="pun">+</span><span class="pln"> </span><span class="lit">1</span><span class="pun">;</span><span class="pln">
            </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">else</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
                maxRowInCol </span><span class="pun">=</span><span class="pln"> mid </span><span class="pun">-</span><span class="pln"> </span><span class="lit">1</span><span class="pun">;</span><span class="pln">
                maxRow </span><span class="pun">=</span><span class="pln"> mid </span><span class="pun">-</span><span class="pln"> </span><span class="lit">1</span><span class="pun">;</span><span class="pln">
            </span><span class="pun">}</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">

        minCol </span><span class="pun">+=</span><span class="pln"> </span><span class="lit">1</span><span class="pun">;</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">

    </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">;</span><span class="pln">
</span><span class="pun">}</span></code></pre>
<p>Feel free to use the above code anytime you have to solve the 
searching a sorted matrix problem in production (uhh… yeah… about 
that…).</p>
<h3>Summary</h3>
<p>Searching a sorted matrix takes <img src="Searching%20a%20Sorted%20Matrix%20Faster_files/quicklatex_006.png" class="ql-img-inline-formula " alt="\Theta(b \cdot lg(t))" title="Rendered by QuickLaTeX.com" style="vertical-align: -4px;" height="18" width="82"> time, where <img src="Searching%20a%20Sorted%20Matrix%20Faster_files/quicklatex_016.png" class="ql-img-inline-formula " alt="b=min(w,h)" title="Rendered by QuickLaTeX.com" style="vertical-align: -4px;" height="18" width="108"> and <img src="Searching%20a%20Sorted%20Matrix%20Faster_files/quicklatex_034.png" class="ql-img-inline-formula " alt="t=\frac{max(w,h)}{b}" title="Rendered by QuickLaTeX.com" style="vertical-align: -6px;" height="26" width="92">, in the worst case.</p>
<p>Be wary that the solutions you’ll find online are mostly not optimal, taking either <img src="Searching%20a%20Sorted%20Matrix%20Faster_files/quicklatex_019.png" class="ql-img-inline-formula " alt="O(b \cdot t) = O(w + h)" title="Rendered by QuickLaTeX.com" style="vertical-align: -4px;" height="18" width="150"> or <img src="Searching%20a%20Sorted%20Matrix%20Faster_files/quicklatex_025.png" class="ql-img-inline-formula " alt="O(b \cdot lg(b \cdot t))" title="Rendered by QuickLaTeX.com" style="vertical-align: -4px;" height="18" width="102"> time. After I solved the problem, I went looking but only found one person who found the right bound: <a href="http://stackoverflow.com/a/10597806/52239">+1 competence points for Evgeny Kluev</a>.</p>
<p>—</p>
<h3><a href="http://www.reddit.com/r/programming/comments/1k9qol/searching_a_sorted_matrix_faster/">Discuss on Reddit</a></h3>
<p>—</p>
<h3>My Twitter: <a href="https://twitter.com/craiggidney">@CraigGidney</a></h3>
<p>—</p>

<blockquote><p>
<span style="color:#4A9EC2"><em><br>
Twisted Oak Studios offers consulting and development on high-tech interactive projects. Check out our <a href="http://twistedoakstudios.com/portfolio/">portfolio</a>, or <a href="mailto:contact@twistedoakstudios.com">Give us a shout</a> if you have anything you think some really rad engineers should help you with.<br>
</em></span>
</p></blockquote>
<h2 class="endofpage">Older Posts</h2>
<p></p><ul>
     <li><a href="http://twistedoakstudios.com/blog/Post5273_how-to-read-nested-ternary-operators" rel="bookmark" title="Permanent Link to How to Read Nested Ternary Operators">How to Read Nested Ternary Operators</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post5204_making-sublime-text-2-jump-to-the-correct-line-with-unity-on-os-x" rel="bookmark" title="Permanent Link to Making Sublime Text 2 Jump to the Correct Line with Unity on OS X">Making Sublime Text 2 Jump to the Correct Line with Unity on OS X</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post5096_my-bug-my-bad-4-reading-concurrently" rel="bookmark" title="Permanent Link to My Bug, My Bad #4: Reading Concurrently">My Bug, My Bad #4: Reading Concurrently</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post5018_whole-api-testing-with-reflection" rel="bookmark" title="Permanent Link to Whole API Testing with Reflection">Whole API Testing with Reflection</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post4708_optimizing-a-parser-combinator-into-a-memcpy" rel="bookmark" title="Permanent Link to Optimizing a Parser Combinator into a memcpy">Optimizing a Parser Combinator into a memcpy</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post4872_dont-treat-paths-like-strings" rel="bookmark" title="Permanent Link to Don’t Treat Paths Like Strings">Don’t Treat Paths Like Strings</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post4706_breaking-a-toy-hash-function" rel="bookmark" title="Permanent Link to Breaking a Toy Hash Function">Breaking a Toy Hash Function</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post4425_counting-iterators-lazily" rel="bookmark" title="Permanent Link to Counting Iterators Lazily">Counting Iterators Lazily</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post4428_unfathomable-bugs-6-pretend-precision" rel="bookmark" title="Permanent Link to Unfathomable Bugs #6: Pretend Precision">Unfathomable Bugs #6: Pretend Precision</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post4281_my-bug-my-bad-3-accidentally-attacking-warcraft-3" rel="bookmark" title="Permanent Link to My Bug, My Bad #3: Accidentally Attacking WarCraft 3">My Bug, My Bad #3: Accidentally Attacking WarCraft 3</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post4130_collapsing-types-vs-monads-followup" rel="bookmark" title="Permanent Link to Collapsing Types vs Monads (followup)">Collapsing Types vs Monads (followup)</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post4008_collapsing-futures-easy-to-use-hard-to-represent" rel="bookmark" title="Permanent Link to Collapsing Futures: Easy to Use, Hard to Represent">Collapsing Futures: Easy to Use, Hard to Represent</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post3858_eventual-exceptions-vs-programming-in-a-minimal-functional-style" rel="bookmark" title="Permanent Link to Eventual Exceptions vs Programming in a Minimal Functional Style">Eventual Exceptions vs Programming in a Minimal Functional Style</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post3769_the-mystery-of-flunf" rel="bookmark" title="Permanent Link to The Mystery of Flunf">The Mystery of Flunf</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post3724_explain-it-like-im-five-the-socialist-millionaire-problem-and-secure-multi-party-computation" rel="bookmark" title="Permanent Link to Explain it like I’m Five: The Socialist Millionaire Problem and Secure Multi-Party Computation">Explain it like I’m Five: The Socialist Millionaire Problem and Secure Multi-Party Computation</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post3631_computer-science-blows-my-mind" rel="bookmark" title="Permanent Link to Computer Science Blows My Mind">Computer Science Blows My Mind</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post3484_a-visit-to-execution-labs-in-montreal" rel="bookmark" title="Permanent Link to A visit to Execution Labs in Montréal">A visit to Execution Labs in Montréal</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post3573_transmuting-dice-conserving-entropy" rel="bookmark" title="Permanent Link to Transmuting Dice, Conserving Entropy">Transmuting Dice, Conserving Entropy</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post3516_rule-of-thumb-ask-for-the-clock" rel="bookmark" title="Permanent Link to Rule of Thumb: Ask for the Clock">Rule of Thumb: Ask for the Clock</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post3477_rule-of-thumb-use-purposefully-weakened-methods" rel="bookmark" title="Permanent Link to Rule of Thumb: Use Purposefully Weakened Methods">Rule of Thumb: Use Purposefully Weakened Methods</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post3376_rule-of-thumb-preconditions-should-be-checked-explicitly" rel="bookmark" title="Permanent Link to Rule of thumb: Preconditions Should be Checked Explicitly">Rule of thumb: Preconditions Should be Checked Explicitly</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post3280_intersecting-linked-lists-faster" rel="bookmark" title="Permanent Link to Intersecting Linked Lists Faster">Intersecting Linked Lists Faster</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post3138_mouse-path-smoothing-for-jack-lumber" rel="bookmark" title="Permanent Link to Mouse Path Smoothing for Jack Lumber">Mouse Path Smoothing for Jack Lumber</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post3044_my-bug-my-bad-2-sunk-by-float" rel="bookmark" title="Permanent Link to My Bug, My Bad #2: Sunk by Float">My Bug, My Bad #2: Sunk by Float</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post2852_repeat-yourself-differently" rel="bookmark" title="Permanent Link to Repeat Yourself Differently">Repeat Yourself Differently</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post2644_grovers-quantum-search-algorithm" rel="bookmark" title="Permanent Link to Grover’s Quantum Search Algorithm">Grover’s Quantum Search Algorithm</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post2766_followup-to-non-nullable-types-vs-c" rel="bookmark" title="Permanent Link to Followup to Non-Nullable Types vs C#">Followup to Non-Nullable Types vs C#</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post2540_optimizing-just-in-time-with-expression-trees" rel="bookmark" title="Permanent Link to Optimizing Just in Time with Expression Trees">Optimizing Just in Time with Expression Trees</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post2353_when-one-way-latency-doesnt-matter" rel="bookmark" title="Permanent Link to When One-Way Latency Doesn’t Matter">When One-Way Latency Doesn’t Matter</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post2194_determining-exactly-ifwhenwhere-a-moving-line-intersected-a-moving-point" rel="bookmark" title="Permanent Link to Determining exactly if/when/where a moving line intersected a moving point">Determining exactly if/when/where a moving line intersected a moving point</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post2061_emulating-actors-in-c-with-asyncawait" rel="bookmark" title="Permanent Link to Emulating Actors in C# with Async/Await">Emulating Actors in C# with Async/Await</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post2096_making-an-immutable-queue-with-guaranteed-constant-time-operations" rel="bookmark" title="Permanent Link to Making an immutable queue with guaranteed constant time operations">Making an immutable queue with guaranteed constant time operations</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post399_improving-checked-exceptions" rel="bookmark" title="Permanent Link to Improving Checked Exceptions">Improving Checked Exceptions</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post1941_perishable-collections-the-benefits-of-removal-by-lifetime" rel="bookmark" title="Permanent Link to Perishable Collections: The Benefits of Removal-by-Lifetime">Perishable Collections: The Benefits of Removal-by-Lifetime</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post1823_decoupling-shared-control" rel="bookmark" title="Permanent Link to Decoupling shared control">Decoupling shared control</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post1694_decoupling-inlined-ui-code" rel="bookmark" title="Permanent Link to Decoupling inlined UI code">Decoupling inlined UI code</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post1585_linq-to-collections-beyond-ienumerablet" rel="bookmark" title="Permanent Link to Linq to Collections: Beyond IEnumerable&lt;T&gt;">Linq to Collections: Beyond IEnumerable&lt;T&gt;</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post1295_publish-your-net-library-as-a-nuget-package" rel="bookmark" title="Permanent Link to Publish your .Net library as a NuGet package">Publish your .Net library as a NuGet package</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post1130_when-null-is-not-enough-an-option-type-for-c" rel="bookmark" title="Permanent Link to When null is not enough: an option type for C#">When null is not enough: an option type for C#</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post1473_unfathomable-bugs-5-readonly-or-not" rel="bookmark" title="Permanent Link to Unfathomable Bugs #5: Readonly or not">Unfathomable Bugs #5: Readonly or not</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post667_minkowski-sums-examples" rel="bookmark" title="Permanent Link to Minkowski sums: examples">Minkowski sums: examples</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post1080_my-bug-my-bad-1-fractal-spheres" rel="bookmark" title="Permanent Link to My Bug, My Bad #1: Fractal Spheres">My Bug, My Bad #1: Fractal Spheres</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post1007_working-around-the-brittle-ui-virtualization-in-windows-8" rel="bookmark" title="Permanent Link to Working around the brittle UI Virtualization in Windows 8">Working around the brittle UI Virtualization in Windows 8</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post938_encapsulating-angles" rel="bookmark" title="Permanent Link to Encapsulating Angles">Encapsulating Angles</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post925_unfathomable-bugs-4-keys-that-arent" rel="bookmark" title="Permanent Link to Unfathomable Bugs #4: Keys that aren’t">Unfathomable Bugs #4: Keys that aren’t</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post867_how-would-i-even-use-a-monad-in-c" rel="bookmark" title="Permanent Link to How would I even use a monad (in C#)?">How would I even use a monad (in C#)?</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post822_useful-methods-1-observable-wheneach" rel="bookmark" title="Permanent Link to Useful/Interesting Methods #1: Observable.WhenEach">Useful/Interesting Methods #1: Observable.WhenEach</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post818_unfathomable-bugs-3-stringing-you-along" rel="bookmark" title="Permanent Link to Unfathomable Bugs #3: Stringing you along">Unfathomable Bugs #3: Stringing you along</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post774_anonymous-implementation-classes-a-design-pattern-for-c" rel="bookmark" title="Permanent Link to Anonymous Implementation Classes – A Design Pattern for C#">Anonymous Implementation Classes – A Design Pattern for C#</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post532_tasks-for-action-script-3" rel="bookmark" title="Permanent Link to Tasks for ActionScript 3 – Improving on Event-Driven Programming">Tasks for ActionScript 3 – Improving on Event-Driven Programming</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post554_minkowski-sums-and-differences" rel="bookmark" title="Permanent Link to Minkowski sums and differences">Minkowski sums and differences</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post330_non-nullable-types-vs-c-fixing-the-billion-dollar-mistake" rel="bookmark" title="Permanent Link to Non-Nullable Types vs C#: Fixing the Billion Dollar Mistake">Non-Nullable Types vs C#: Fixing the Billion Dollar Mistake</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post384_unfathomable-bugs-2-slashing-out" rel="bookmark" title="Permanent Link to Unfathomable Bugs #2: Slashing Out">Unfathomable Bugs #2: Slashing Out</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post404_script-templates-and-base-classes" rel="bookmark" title="Permanent Link to Script templates and base classes">Script templates and base classes</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post373_unity-font-extraction" rel="bookmark" title="Permanent Link to Unity font extraction">Unity font extraction</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post341_abusing-phantom-types-to-encode-list-lengths-into-their-type" rel="bookmark" title="Permanent Link to Abusing “Phantom Types” to Encode List Lengths Into Their Type">Abusing “Phantom Types” to Encode List Lengths Into Their Type</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post261_constructive-criticism-of-the-reactive-extensions-api" rel="bookmark" title="Permanent Link to Constructive Criticism of the Reactive Extensions API">Constructive Criticism of the Reactive Extensions API</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post241_quaternions-part-3-2" rel="bookmark" title="Permanent Link to Quaternions part 3">Quaternions part 3</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post204_quaternions-part-2" rel="bookmark" title="Permanent Link to Quaternions part 2">Quaternions part 2</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post144_quaternions-part-1" rel="bookmark" title="Permanent Link to Quaternions part 1">Quaternions part 1</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post157_unfathomable-bugs-1-you-can-have-things-you-can-have-things-in-things-you-can-have" rel="bookmark" title="Permanent Link to Unfathomable Bugs #1: You can have things! You can have things IN things! You can have …">Unfathomable Bugs #1: You can have things! You can have things IN things! You can have …</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post83_coroutines-more-than-you-want-to-know" rel="bookmark" title="Permanent Link to Coroutines – More than you want to know">Coroutines – More than you want to know</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post74_asset-bundle-helper" rel="bookmark" title="Permanent Link to Asset Bundle Helper">Asset Bundle Helper</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post60_the-visual-studio-goes-away" rel="bookmark" title="Permanent Link to The Visual Studio goes away">The Visual Studio goes away</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post57_nets-time-traveling-stopwatch" rel="bookmark" title="Permanent Link to .Net’s time traveling StopWatch">.Net’s time traveling StopWatch</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post29_introducing-catalyst" rel="bookmark" title="Permanent Link to Introducing Catalyst">Introducing Catalyst</a></li>
  </ul>
<p></p>


			</div><!-- #content -->
			</section>

			</div>
		</div><!-- #container -->


</span></div><!-- .container -->

 <div id="upprev_box" style="right: -400px;">
	<h6>
		More interesting posts <span class="num"> (1 of 22 articles)</span>
	</h6>
	<div class="upprev_excerpt">
		<p>
			<a href="http://twistedoakstudios.com/blog/Post5273_how-to-read-nested-ternary-operators" rel="prev">How to Read Nested Ternary Operators</a>
		</p>
	</div>
	
		<p>
Or check out our <a href="http://twistedoakstudios.com/portfolio">Portfolio</a>.		</p><button id="upprev_close" type="button">Close</button>
</div><!-- #upprev_box -->
<link rel="stylesheet" id="al2fb_style-css" href="Searching%20a%20Sorted%20Matrix%20Faster_files/add-link-to-facebook.css" type="text/css" media="all">
<link rel="stylesheet" id="admin-bar-css" href="Searching%20a%20Sorted%20Matrix%20Faster_files/admin-bar.css" type="text/css" media="all">
<link rel="stylesheet" id="upprev-css-css" href="Searching%20a%20Sorted%20Matrix%20Faster_files/upprev.css" type="text/css" media="all">
<link rel="stylesheet" id="wp-quicklatex-format-css" href="Searching%20a%20Sorted%20Matrix%20Faster_files/quicklatex-format.css" type="text/css" media="all">
<script type="text/javascript" src="Searching%20a%20Sorted%20Matrix%20Faster_files/admin-bar.js"></script>
<script type="text/javascript" src="Searching%20a%20Sorted%20Matrix%20Faster_files/jquery_002.js"></script>
<script type="text/javascript" src="Searching%20a%20Sorted%20Matrix%20Faster_files/upprev_js.php"></script>
<script type="text/javascript" src="Searching%20a%20Sorted%20Matrix%20Faster_files/comment-reply.js"></script>
	<script type="text/javascript">
		(function() {
			var request, b = document.body, c = 'className', cs = 'customize-support', rcs = new RegExp('(^|\\s+)(no-)?'+cs+'(\\s+|$)');

			request = true;

			b[c] = b[c].replace( rcs, ' ' );
			b[c] += ( window.postMessage && request ? ' ' : ' no-' ) + cs;
		}());
	</script>
			

		 
<!-- BEGIN footer-type stuff -->
<div class="container footer-container">
	<div class="row">
		
		<div class="fourcol last"><!-- .last b/c it's floated right -->
      <!-- home portfolio used to be here -->
		</div>

		<div class="eightcol" id="contact">
			<p>Twisted Oak Studios<br>
				138-1657 Barrington St.<br>
				Halifax, NS, Canada B3J 2A1</p>
			
			<p>001-902-237-7326<br>
			<a href="mailto:contact@twistedoakstudios.com">contact@twistedoakstudios.com</a></p>
		</div>

		<div class="twelvecol">
			<footer>
				<small>©2012
					<script>
						var d=new Date(); 
						yr=d.getFullYear();
						if (yr!=2012)
						document.write("- "+yr);
					</script>- 2013 Twisted Oak Studios Ltd. -- All Rights Reserved -- All images and logos are property of their respective owners.
				</small>
			</footer>
		</div>
		
		
	</div><!-- .row -->
</div><!-- .container -->
<!-- END footer stuff-->

<!-- jQuery and scrolly script for contact link -->
<script src="Searching%20a%20Sorted%20Matrix%20Faster_files/jquery.js"></script>
  <script>window.jQuery || document.write('<script src="../js/libs/jquery-1.6.2.min.js"><\/script>')</script>

<script src="Searching%20a%20Sorted%20Matrix%20Faster_files/scrolly.js"></script>


  <!-- Don't forget Analytics! -->



  <!-- Prompt IE 6 users to install Chrome Frame. Remove this if you want to support IE 6.
       chromium.org/developers/how-tos/chrome-frame-getting-started -->
  <!--[if lt IE 7 ]>
    <script src="//ajax.googleapis.com/ajax/libs/chrome-frame/1.0.3/CFInstall.min.js"></script>
    <script>window.attachEvent('onload',function(){CFInstall.check({mode:'overlay'})})</script>
  <![endif]-->
  


<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-31441525-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>
<div id="wpadminbar" class="nojq " role="navigation">
			<a class="screen-reader-shortcut" href="#wp-toolbar" tabindex="1">Skip to toolbar</a>
			<div class="quicklinks" id="wp-toolbar" role="navigation" aria-label="Top navigation toolbar." tabindex="0">
				<ul id="wp-admin-bar-root-default" class="ab-top-menu">
		<li id="wp-admin-bar-wp-logo" class="menupop   "><a class="ab-item" aria-haspopup="true" href="http://twistedoakstudios.com/blog/wp-admin/about.php" title="About WordPress"><span class="ab-icon"></span></a><div class="ab-sub-wrapper"><ul id="wp-admin-bar-wp-logo-default" class="ab-submenu">
		<li class="" id="wp-admin-bar-about"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/about.php">About WordPress</a>		</li></ul><ul id="wp-admin-bar-wp-logo-external" class="ab-sub-secondary ab-submenu">
		<li id="wp-admin-bar-wporg"><a class="ab-item" href="http://wordpress.org/">WordPress.org</a>		</li>
		<li id="wp-admin-bar-documentation"><a class="ab-item" href="http://codex.wordpress.org/">Documentation</a>		</li>
		<li id="wp-admin-bar-support-forums"><a class="ab-item" href="http://wordpress.org/support/">Support Forums</a>		</li>
		<li class="" id="wp-admin-bar-feedback"><a class="ab-item" href="http://wordpress.org/support/forum/requests-and-feedback">Feedback</a>		</li></ul></div>		</li>
		<li id="wp-admin-bar-site-name" class="menupop"><a class="ab-item" aria-haspopup="true" href="http://twistedoakstudios.com/blog/wp-admin/">twistedoakstudios.com</a><div class="ab-sub-wrapper"><ul id="wp-admin-bar-site-name-default" class="ab-submenu">
		<li id="wp-admin-bar-dashboard"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/">Dashboard</a>		</li></ul><ul id="wp-admin-bar-appearance" class="ab-submenu">
		<li id="wp-admin-bar-themes"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/themes.php">Themes</a>		</li>
		<li id="wp-admin-bar-customize" class="hide-if-no-customize"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/customize.php?url=http%3A%2F%2Ftwistedoakstudios.com%2Fblog%2FPost5365_searching-a-sorted-matrix-faster">Customize</a>		</li></ul></div>		</li>
		<li class="" id="wp-admin-bar-updates"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/update-core.php" title="3 Plugin Updates, 1 Theme Update"><span class="ab-icon"></span><span class="ab-label">4</span><span class="screen-reader-text">3 Plugin Updates, 1 Theme Update</span></a>		</li>
		<li class="" id="wp-admin-bar-comments"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/edit-comments.php" title="0 comments awaiting moderation"><span class="ab-icon"></span><span id="ab-awaiting-mod" class="ab-label awaiting-mod pending-count count-0">0</span></a>		</li>
		<li id="wp-admin-bar-new-content" class="menupop"><a class="ab-item" aria-haspopup="true" href="http://twistedoakstudios.com/blog/wp-admin/post-new.php" title="Add New"><span class="ab-icon"></span><span class="ab-label">New</span></a><div class="ab-sub-wrapper"><ul id="wp-admin-bar-new-content-default" class="ab-submenu">
		<li id="wp-admin-bar-new-post"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/post-new.php">Post</a>		</li>
		<li id="wp-admin-bar-new-media"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/media-new.php">Media</a>		</li>
		<li id="wp-admin-bar-new-link"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/link-add.php">Link</a>		</li>
		<li id="wp-admin-bar-new-page"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/post-new.php?post_type=page">Page</a>		</li>
		<li id="wp-admin-bar-new-user"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/user-new.php">User</a>		</li></ul></div>		</li>
		<li class="" id="wp-admin-bar-edit"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/post.php?post=5365&amp;action=edit">Edit Post</a>		</li></ul><ul id="wp-admin-bar-top-secondary" class="ab-top-secondary ab-top-menu">
		<li id="wp-admin-bar-search" class="admin-bar-search"><div class="ab-item ab-empty-item" tabindex="-1"><form action="http://twistedoakstudios.com/blog/" method="get" id="adminbarsearch"><input class="adminbar-input" name="s" id="adminbar-search" maxlength="150" type="text"><input class="adminbar-button" value="Search" type="submit"></form></div>		</li>
		<li id="wp-admin-bar-my-account" class="menupop with-avatar"><a class="ab-item" aria-haspopup="true" href="http://twistedoakstudios.com/blog/wp-admin/profile.php" title="My Account">Howdy, Craig Gidney<img alt="" src="Searching%20a%20Sorted%20Matrix%20Faster_files/31a6ce579f8f9f9d528715d1e941726e.png" class="avatar avatar-16 photo" height="16" width="16"></a><div class="ab-sub-wrapper"><ul id="wp-admin-bar-user-actions" class="ab-submenu">
		<li id="wp-admin-bar-user-info"><a class="ab-item" tabindex="-1" href="http://twistedoakstudios.com/blog/wp-admin/profile.php"><img alt="" src="Searching%20a%20Sorted%20Matrix%20Faster_files/31a6ce579f8f9f9d528715d1e941726e_002.png" class="avatar avatar-64 photo" height="64" width="64"><span class="display-name">Craig Gidney</span><span class="username">craig</span></a>		</li>
		<li id="wp-admin-bar-edit-profile"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/profile.php">Edit My Profile</a>		</li>
		<li id="wp-admin-bar-logout"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-login.php?action=logout&amp;_wpnonce=535624defb">Log Out</a>		</li></ul></div>		</li></ul>			</div>
			<a class="screen-reader-shortcut" href="http://twistedoakstudios.com/blog/wp-login.php?action=logout&amp;_wpnonce=535624defb">Log Out</a>
		</div></body></html>