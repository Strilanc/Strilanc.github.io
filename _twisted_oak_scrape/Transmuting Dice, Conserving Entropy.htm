<!DOCTYPE html>
<!-- paulirish.com/2008/conditional-stylesheets-vs-css-hacks-answer-neither/ -->
<!--[if lt IE 7]> <html class="no-js ie6 oldie" lang="en"> <![endif]-->
<!--[if IE 7]>    <html class="no-js ie7 oldie" lang="en"> <![endif]-->
<!--[if IE 8]>    <html class="no-js ie8 oldie" lang="en"> <![endif]-->
<!-- Consider adding an manifest.appcache: h5bp.com/d/Offline -->
<!--[if gt IE 8]><!-->
<html class=" js flexbox canvas canvastext webgl no-touch geolocation postmessage no-websqldatabase indexeddb hashchange history draganddrop websockets rgba hsla multiplebgs backgroundsize borderimage borderradius boxshadow textshadow opacity cssanimations csscolumns cssgradients no-cssreflections csstransforms csstransforms3d csstransitions fontface generatedcontent video audio localstorage sessionstorage webworkers applicationcache svg inlinesvg smil svgclippaths" xmlns="http://www.w3.org/1999/xhtml" xmlns:og="http://ogp.me/ns#" xmlns:fb="https://www.facebook.com/2008/fbml" lang="en"><script id="bug.surrogate">var urchinTracker=function(){},_gaq={push:function(){try {if(arguments[0][0]=='_link')window.location.href=arguments[0][1]}catch(er){}}},_gat={_createTracker:function(){}, _getTracker:function(){return{__noSuchMethod__:function(){},_link:function(o){if(o)location.href=o;},_linkByPost:function(){return true;},_getLinkerUrl:function(o){return o;},_trackEvent:function(){}}}}; if (document.location.host == 'www.salon.com') {var _ga_ = document.querySelectorAll('script[src$=ga\\.js]')[0], ga_e = document.createEvent('Event'); ga_e.initEvent('load', true, true);_ga_.dispatchEvent(ga_e);}</script><!--<![endif]--><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
  <meta charset="utf-8">
   <!-- blog feed link -->
  <link href="http://twistedoakstudios.com/blog/?feed=rss" rel="alternate" type="application/rss+xml" title="Twisted Oak Studios Blog">

  <!-- Use the .htaccess and remove these lines to avoid edge case issues.
       More info: h5bp.com/b/378 -->
  <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">

  <title>Twisted Oak Studios | Unity3D Consulting | Technical Magic</title>
  <meta name="description" content="As a lean co-operative team of seasoned developers, Twisted Oak is able to offer efficient, flexible remote and on-the-floor development and consulting without any middle-man or excessive administrivia.">
  <meta name="author" content="/humans.txt">

  <meta name="viewport" content="width=device-width,initial-scale=1">

  <link rel="shortcut icon" href="http://twistedoakstudios.com/blog/favicon.ico">
  <link rel="apple-touch-icon-precomposed" href="http://twistedoakstudios.com/blog/apple-touch-icon-precomposed.png">

  	<!-- The 1140px Grid - http://cssgrid.net/ -->
	<link rel="stylesheet" href="Transmuting%20Dice,%20Conserving%20Entropy_files/1140.css">
    <link rel="stylesheet" href="Transmuting%20Dice,%20Conserving%20Entropy_files/style.css">
    <link rel="stylesheet" href="Transmuting%20Dice,%20Conserving%20Entropy_files/blogstyle.css">
<link rel="stylesheet" href="Transmuting%20Dice,%20Conserving%20Entropy_files/prettify.css" media="all">
<link rel="stylesheet" href="Transmuting%20Dice,%20Conserving%20Entropy_files/sunburst.css" media="all">
<script type="text/javascript" src="Transmuting%20Dice,%20Conserving%20Entropy_files/prettify.js"></script>

	<!-- Webfonts! -->
	<link href="Transmuting%20Dice,%20Conserving%20Entropy_files/css.css" rel="stylesheet" type="text/css">

	<!-- Open Graph -->
	<meta property="og:title" content="Twisted Oak Studios">
	<meta property="og:type" content="company">
	<meta property="og:url" content="http://www.twistedoakstudios.com/">
	<meta property="og:image" content="http://www.twistedoakstudios.com/images/logo.png">
	<meta property="og:description" content="As a lean co-operative team of seasoned developers, Twisted Oak is able to offer efficient, flexible remote and on-the-floor development and consulting without any middle-man or excessive administrivia.">
  
  <script src="Transmuting%20Dice,%20Conserving%20Entropy_files/modernizr-2.js"></script>
</head>
<body class=" customize-support" onload="prettyPrint()">
<!-- begin header -->
<div class="container header-container">
	<div class="row">
		<header>
			<div class="threecol">
				<a href="#"><img class="logo" src="Transmuting%20Dice,%20Conserving%20Entropy_files/logo.png"></a>
			</div><!-- .threecol -->
		
			<div class="fourcol navcol">
				<nav>
					<ul class="primary-nav clearfix">
						<li><a href="http://twistedoakstudios.com/">Home</a></li>
						<li><a href="http://twistedoakstudios.com/portfolio/">Portfolio</a></li>
						<li><a href="http://twistedoakstudios.com/labs/">Labs</a></li>
						<li><a class="scroll" href="#contact">Contact</a></li>
						<li><a href="http://twistedoakstudios.com/blog/">Blog</a></li>
					</ul>
				</nav>
			</div>    

    	</header>
	</div><!-- .row -->
</div><!-- .container -->


	<div id="main">
<span class="blog">
<div class="container home-container" id="home">
	<div class="row">
		<section>
			
			<div class="ninecol">


<h2><a href="http://twistedoakstudios.com/blog/Post3573_transmuting-dice-conserving-entropy" rel="bookmark" title="Permanent Link to Transmuting Dice, Conserving Entropy">Transmuting Dice, Conserving Entropy</a></h2>
<div class="meta">posted by Craig Gidney on April 23, 2013</div>

<p>Suppose you want to play a game of backgammon. Unfortunately, horror of horrors, you have lots of pocket change but no dice!</p>
<p>You realize you can generate random values by flipping coins, but a 
coin flip has two possible outcomes instead of six. How do you simulate a
 <em>fair</em> six sided die using only fair coin flips? What about the more general problem, of simulating an <img src="Transmuting%20Dice,%20Conserving%20Entropy_files/quicklatex_011.png" class="ql-img-inline-formula " alt="m" title="Rendered by QuickLaTeX.com" style="vertical-align: 0px;" height="8" width="15">-sided die with an <img src="Transmuting%20Dice,%20Conserving%20Entropy_files/quicklatex_025.png" class="ql-img-inline-formula " alt="n" title="Rendered by QuickLaTeX.com" style="vertical-align: 0px;" height="8" width="11">-sided die?</p>
<p><em>If you haven’t seen this puzzle before today, and want to solve it yourself, stop now. I will be spoiling it.</em></p>
<h3>Partial Credit</h3>
<p>There’s a well known sub-optimal solution to this problem.</p>
<p>First, given a die with <img src="Transmuting%20Dice,%20Conserving%20Entropy_files/quicklatex_025.png" class="ql-img-inline-formula " alt="n" title="Rendered by QuickLaTeX.com" style="vertical-align: 0px;" height="8" width="11"> sides, it’s trivial to simulate a die with <img src="Transmuting%20Dice,%20Conserving%20Entropy_files/quicklatex_024.png" class="ql-img-inline-formula " alt="n^p" title="Rendered by QuickLaTeX.com" style="vertical-align: 0px;" height="12" width="18"> sides by grouping rolls. A <img src="Transmuting%20Dice,%20Conserving%20Entropy_files/quicklatex_004.png" class="ql-img-inline-formula " alt="2^3 = 8" title="Rendered by QuickLaTeX.com" style="vertical-align: 0px;" height="15" width="49"> sided die can be simulated by arranging coin flips into groups of <img src="Transmuting%20Dice,%20Conserving%20Entropy_files/quicklatex_018.png" class="ql-img-inline-formula " alt="3" title="Rendered by QuickLaTeX.com" style="vertical-align: 0px;" height="12" width="9">, because each group has <img src="Transmuting%20Dice,%20Conserving%20Entropy_files/quicklatex_005.png" class="ql-img-inline-formula " alt="8" title="Rendered by QuickLaTeX.com" style="vertical-align: 0px;" height="12" width="9"> equally likely possibilities. The reverse direction, from <img src="Transmuting%20Dice,%20Conserving%20Entropy_files/quicklatex_024.png" class="ql-img-inline-formula " alt="n^p" title="Rendered by QuickLaTeX.com" style="vertical-align: 0px;" height="12" width="18"> to <img src="Transmuting%20Dice,%20Conserving%20Entropy_files/quicklatex_025.png" class="ql-img-inline-formula " alt="n" title="Rendered by QuickLaTeX.com" style="vertical-align: 0px;" height="8" width="11">, is also easy because each roll can be split evenly into <img src="Transmuting%20Dice,%20Conserving%20Entropy_files/quicklatex_009.png" class="ql-img-inline-formula " alt="p" title="Rendered by QuickLaTeX.com" style="vertical-align: -4px;" height="12" width="10"> sub-rolls.</p>
<p>Second, given a die with more sides than necessary, you can just 
filter out rolls that have invalid results with respect to the smaller 
die. Given an <img src="Transmuting%20Dice,%20Conserving%20Entropy_files/quicklatex_005.png" class="ql-img-inline-formula " alt="8" title="Rendered by QuickLaTeX.com" style="vertical-align: 0px;" height="12" width="9">-sided die, we can simulate a <img src="Transmuting%20Dice,%20Conserving%20Entropy_files/quicklatex_012.png" class="ql-img-inline-formula " alt="6" title="Rendered by QuickLaTeX.com" style="vertical-align: 0px;" height="12" width="9"> sided die by rolling until we <a href="http://en.wikipedia.org/wiki/Almost_certain">almost surely</a> get a result that’s not <img src="Transmuting%20Dice,%20Conserving%20Entropy_files/quicklatex_015.png" class="ql-img-inline-formula " alt="7" title="Rendered by QuickLaTeX.com" style="vertical-align: 0px;" height="13" width="9"> or <img src="Transmuting%20Dice,%20Conserving%20Entropy_files/quicklatex_005.png" class="ql-img-inline-formula " alt="8" title="Rendered by QuickLaTeX.com" style="vertical-align: 0px;" height="12" width="9">.</p>
<p>Putting these two parts together allows us to simulate a <img src="Transmuting%20Dice,%20Conserving%20Entropy_files/quicklatex_012.png" class="ql-img-inline-formula " alt="6" title="Rendered by QuickLaTeX.com" style="vertical-align: 0px;" height="12" width="9">-sided die using only our <img src="Transmuting%20Dice,%20Conserving%20Entropy_files/quicklatex_036.png" class="ql-img-inline-formula " alt="2" title="Rendered by QuickLaTeX.com" style="vertical-align: 0px;" height="12" width="8">-sided coin. Just flip the coin three times, pairing each of the <img src="Transmuting%20Dice,%20Conserving%20Entropy_files/quicklatex_005.png" class="ql-img-inline-formula " alt="8" title="Rendered by QuickLaTeX.com" style="vertical-align: 0px;" height="12" width="9"> possible outcomes with the numbers <img src="Transmuting%20Dice,%20Conserving%20Entropy_files/quicklatex_022.png" class="ql-img-inline-formula " alt="1" title="Rendered by QuickLaTeX.com" style="vertical-align: -1px;" height="13" width="7"> to <img src="Transmuting%20Dice,%20Conserving%20Entropy_files/quicklatex_005.png" class="ql-img-inline-formula " alt="8" title="Rendered by QuickLaTeX.com" style="vertical-align: 0px;" height="12" width="9">, and try again whenever the result is <img src="Transmuting%20Dice,%20Conserving%20Entropy_files/quicklatex_015.png" class="ql-img-inline-formula " alt="7" title="Rendered by QuickLaTeX.com" style="vertical-align: 0px;" height="13" width="9"> or <img src="Transmuting%20Dice,%20Conserving%20Entropy_files/quicklatex_005.png" class="ql-img-inline-formula " alt="8" title="Rendered by QuickLaTeX.com" style="vertical-align: 0px;" height="12" width="9">.</p>
<p>There. Solved. Well… except it feels wasteful to throw away those sevens and eights.</p>
<h3>Wasted Entropy</h3>
<p>The above solution wastes <a href="http://en.wikipedia.org/wiki/Information_entropy">information entropy</a>.
 A coin flip generates 1 bit of entropy. Three coin flips generates 3 
bits of entropy. The result of the roll of a six sided die, on the other
 hand, gives you only <img src="Transmuting%20Dice,%20Conserving%20Entropy_files/quicklatex_013.png" class="ql-img-inline-formula " alt="log_2 6 \approx 2.6" title="Rendered by QuickLaTeX.com" style="vertical-align: -4px;" height="17" width="86"> bits of entropy.</p>
<p>Even if we get lucky, and don’t have to try again, we’re consuming <img src="Transmuting%20Dice,%20Conserving%20Entropy_files/quicklatex_018.png" class="ql-img-inline-formula " alt="3" title="Rendered by QuickLaTeX.com" style="vertical-align: 0px;" height="12" width="9"> bits of entropy while only producing <img src="Transmuting%20Dice,%20Conserving%20Entropy_files/quicklatex_028.png" class="ql-img-inline-formula " alt="2.6" title="Rendered by QuickLaTeX.com" style="vertical-align: 0px;" height="12" width="23"> bits when converting our coin flips into six sided die rolls. If we’re average, instead of lucky, then we’ll need an expected <img src="Transmuting%20Dice,%20Conserving%20Entropy_files/quicklatex_002.png" class="ql-img-inline-formula " alt="\frac{8}{6}" title="Rendered by QuickLaTeX.com" style="vertical-align: -6px;" height="22" width="7"> attempts for an expected cost of <img src="Transmuting%20Dice,%20Conserving%20Entropy_files/quicklatex_006.png" class="ql-img-inline-formula " alt="\frac{8}{6} \cdot 3 = 4" title="Rendered by QuickLaTeX.com" style="vertical-align: -6px;" height="22" width="63"> bits. We’re wasting <img src="Transmuting%20Dice,%20Conserving%20Entropy_files/quicklatex_034.png" class="ql-img-inline-formula " alt="1.4" title="Rendered by QuickLaTeX.com" style="vertical-align: -1px;" height="13" width="22"> bits of precious, delicious entropy per generated roll!</p>
<p>This raises the question: can we do better? Can we use that wasted entropy?</p>
<p><em>This is your second chance to stop and solve.</em></p>
<h3>Entropy Optimizations</h3>
<p>There are several optimizations that we can make, to improve our entropy efficiency.</p>
<p>For example, consider what happens if we map [heads,heads,heads] to <img src="Transmuting%20Dice,%20Conserving%20Entropy_files/quicklatex_015.png" class="ql-img-inline-formula " alt="7" title="Rendered by QuickLaTeX.com" style="vertical-align: 0px;" height="13" width="9"> and [heads,heads,tails] to <img src="Transmuting%20Dice,%20Conserving%20Entropy_files/quicklatex_005.png" class="ql-img-inline-formula " alt="8" title="Rendered by QuickLaTeX.com" style="vertical-align: 0px;" height="12" width="9">.
 Since they both start with [heads, heads], the third coin flip has no 
effect on whether or not we retry. This allows us to save one coin flip 
when retrying, reducing our expected cost from <img src="Transmuting%20Dice,%20Conserving%20Entropy_files/quicklatex_032.png" class="ql-img-inline-formula " alt="4" title="Rendered by QuickLaTeX.com" style="vertical-align: -1px;" height="13" width="9"> to <img src="Transmuting%20Dice,%20Conserving%20Entropy_files/quicklatex_017.png" class="ql-img-inline-formula " alt="3 + (\frac{8}{6}-1) \cdot 2 = 3.666..." title="Rendered by QuickLaTeX.com" style="vertical-align: -6px;" height="22" width="186"> bits.</p>
<p>Another useful optimization to notice is that <img src="Transmuting%20Dice,%20Conserving%20Entropy_files/quicklatex_012.png" class="ql-img-inline-formula " alt="6" title="Rendered by QuickLaTeX.com" style="vertical-align: 0px;" height="12" width="9"> factors into <img src="Transmuting%20Dice,%20Conserving%20Entropy_files/quicklatex_036.png" class="ql-img-inline-formula " alt="2" title="Rendered by QuickLaTeX.com" style="vertical-align: 0px;" height="12" width="8"> and <img src="Transmuting%20Dice,%20Conserving%20Entropy_files/quicklatex_018.png" class="ql-img-inline-formula " alt="3" title="Rendered by QuickLaTeX.com" style="vertical-align: 0px;" height="12" width="9">, and that the product of two uniformly random numbers is also uniformly random. A <img src="Transmuting%20Dice,%20Conserving%20Entropy_files/quicklatex_012.png" class="ql-img-inline-formula " alt="6" title="Rendered by QuickLaTeX.com" style="vertical-align: 0px;" height="12" width="9">-sided die roll is interchangeable with a <img src="Transmuting%20Dice,%20Conserving%20Entropy_files/quicklatex_036.png" class="ql-img-inline-formula " alt="2" title="Rendered by QuickLaTeX.com" style="vertical-align: 0px;" height="12" width="8">-sided die roll combined with a <img src="Transmuting%20Dice,%20Conserving%20Entropy_files/quicklatex_018.png" class="ql-img-inline-formula " alt="3" title="Rendered by QuickLaTeX.com" style="vertical-align: 0px;" height="12" width="9">-sided die roll. Since we have a coin with <img src="Transmuting%20Dice,%20Conserving%20Entropy_files/quicklatex_036.png" class="ql-img-inline-formula " alt="2" title="Rendered by QuickLaTeX.com" style="vertical-align: 0px;" height="12" width="8"> sides, <img src="Transmuting%20Dice,%20Conserving%20Entropy_files/quicklatex_036.png" class="ql-img-inline-formula " alt="2" title="Rendered by QuickLaTeX.com" style="vertical-align: 0px;" height="12" width="8">-sided die rolls are trivial to do with perfect efficiency. Then, for each <img src="Transmuting%20Dice,%20Conserving%20Entropy_files/quicklatex_036.png" class="ql-img-inline-formula " alt="2" title="Rendered by QuickLaTeX.com" style="vertical-align: 0px;" height="12" width="8">-sided roll we generate, we can generate an accompanying <img src="Transmuting%20Dice,%20Conserving%20Entropy_files/quicklatex_018.png" class="ql-img-inline-formula " alt="3" title="Rendered by QuickLaTeX.com" style="vertical-align: 0px;" height="12" width="9">-sided roll by using groups of <img src="Transmuting%20Dice,%20Conserving%20Entropy_files/quicklatex_036.png" class="ql-img-inline-formula " alt="2" title="Rendered by QuickLaTeX.com" style="vertical-align: 0px;" height="12" width="8"> coin flips (and retrying when we get a <img src="Transmuting%20Dice,%20Conserving%20Entropy_files/quicklatex_032.png" class="ql-img-inline-formula " alt="4" title="Rendered by QuickLaTeX.com" style="vertical-align: -1px;" height="13" width="9"> instead of <img src="Transmuting%20Dice,%20Conserving%20Entropy_files/quicklatex_022.png" class="ql-img-inline-formula " alt="1" title="Rendered by QuickLaTeX.com" style="vertical-align: -1px;" height="13" width="7">, <img src="Transmuting%20Dice,%20Conserving%20Entropy_files/quicklatex_036.png" class="ql-img-inline-formula " alt="2" title="Rendered by QuickLaTeX.com" style="vertical-align: 0px;" height="12" width="8">, or <img src="Transmuting%20Dice,%20Conserving%20Entropy_files/quicklatex_018.png" class="ql-img-inline-formula " alt="3" title="Rendered by QuickLaTeX.com" style="vertical-align: 0px;" height="12" width="9">). Combined with the previous optimization, this lowers our cost to <img src="Transmuting%20Dice,%20Conserving%20Entropy_files/quicklatex_029.png" class="ql-img-inline-formula " alt="1 + 2 + (\frac{4}{3}-1)\cdot 1 = 3.333..." title="Rendered by QuickLaTeX.com" style="vertical-align: -6px;" height="22" width="215"> bits.</p>
<p>A more flexible optimization is to find a power of <img src="Transmuting%20Dice,%20Conserving%20Entropy_files/quicklatex_036.png" class="ql-img-inline-formula " alt="2" title="Rendered by QuickLaTeX.com" style="vertical-align: 0px;" height="12" width="8"> that comes proportionally sooner after a power of <img src="Transmuting%20Dice,%20Conserving%20Entropy_files/quicklatex_018.png" class="ql-img-inline-formula " alt="3" title="Rendered by QuickLaTeX.com" style="vertical-align: 0px;" height="12" width="9">. For example, we can use our coin to simulate rolling a die with <img src="Transmuting%20Dice,%20Conserving%20Entropy_files/quicklatex_035.png" class="ql-img-inline-formula " alt="2^5=32" title="Rendered by QuickLaTeX.com" style="vertical-align: 0px;" height="15" width="57"> sides with perfect efficiency, discard when we exceed <img src="Transmuting%20Dice,%20Conserving%20Entropy_files/quicklatex_003.png" class="ql-img-inline-formula " alt="3^3=27" title="Rendered by QuickLaTeX.com" style="vertical-align: 0px;" height="15" width="58">, and generate three rolls of a <img src="Transmuting%20Dice,%20Conserving%20Entropy_files/quicklatex_018.png" class="ql-img-inline-formula " alt="3" title="Rendered by QuickLaTeX.com" style="vertical-align: 0px;" height="12" width="9">-sided
 die per success. It takes more coin flips to get our first result, but 
the probability of discarding decreases significantly. Combined with our
 previous two optimizations, we’ve lowered our expected cost to <img src="Transmuting%20Dice,%20Conserving%20Entropy_files/quicklatex_020.png" class="ql-img-inline-formula " alt="\frac{1}{3}(3 + 5 + (\frac{32}{27}-1) \cdot 3) = 2.851851..." title="Rendered by QuickLaTeX.com" style="vertical-align: -6px;" height="22" width="273"> bits.</p>
<p>We can find even better powers of <img src="Transmuting%20Dice,%20Conserving%20Entropy_files/quicklatex_036.png" class="ql-img-inline-formula " alt="2" title="Rendered by QuickLaTeX.com" style="vertical-align: 0px;" height="12" width="8"> and <img src="Transmuting%20Dice,%20Conserving%20Entropy_files/quicklatex_018.png" class="ql-img-inline-formula " alt="3" title="Rendered by QuickLaTeX.com" style="vertical-align: 0px;" height="12" width="9">. The next few good powers are <img src="Transmuting%20Dice,%20Conserving%20Entropy_files/quicklatex_007.png" class="ql-img-inline-formula " alt="(3^5,2^8)" title="Rendered by QuickLaTeX.com" style="vertical-align: -4px;" height="19" width="53">, <img src="Transmuting%20Dice,%20Conserving%20Entropy_files/quicklatex_026.png" class="ql-img-inline-formula " alt="(3^{17},2^{27})" title="Rendered by QuickLaTeX.com" style="vertical-align: -4px;" height="19" width="67"> and <img src="Transmuting%20Dice,%20Conserving%20Entropy_files/quicklatex_031.png" class="ql-img-inline-formula " alt="(3^{39},2^{46})" title="Rendered by QuickLaTeX.com" style="vertical-align: -4px;" height="19" width="67">.
 Each gets us tantalizingly closer to perfect efficiency, and it’s not 
even that hard to find good pairs. Just run the following program for 
sufficiently long:</p>
<pre><code class="prettyprint"><span class="typ">BigRational</span><span class="pln"> r </span><span class="pun">=</span><span class="pln"> </span><span class="lit">3</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">int</span><span class="pln"> n2 </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">int</span><span class="pln"> n3 </span><span class="pun">=</span><span class="pln"> </span><span class="lit">1</span><span class="pun">;</span><span class="pln">
</span><span class="typ">BigRational</span><span class="pln"> best </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">while</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">true</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">while</span><span class="pln"> </span><span class="pun">(</span><span class="pln">r </span><span class="pun">&gt;</span><span class="pln"> </span><span class="lit">1</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        r </span><span class="pun">/=</span><span class="pln"> </span><span class="lit">2</span><span class="pun">;</span><span class="pln">
        n2 </span><span class="pun">+=</span><span class="pln"> </span><span class="lit">1</span><span class="pun">;</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
    </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">r </span><span class="pun">&gt;</span><span class="pln"> best</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        best </span><span class="pun">=</span><span class="pln"> r</span><span class="pun">;</span><span class="pln">
        </span><span class="typ">Console</span><span class="pun">.</span><span class="typ">WriteLine</span><span class="pun">(</span><span class="str">"3^{0},2^{1}"</span><span class="pun">,</span><span class="pln"> n3</span><span class="pun">,</span><span class="pln"> n2</span><span class="pun">);</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
    </span><span class="kwd">while</span><span class="pln"> </span><span class="pun">(</span><span class="pln">r </span><span class="pun">&lt;</span><span class="pln"> </span><span class="lit">1</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        r </span><span class="pun">*=</span><span class="pln"> </span><span class="lit">3</span><span class="pun">;</span><span class="pln">
        n3 </span><span class="pun">+=</span><span class="pln"> </span><span class="lit">1</span><span class="pun">;</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code></pre>
<p>(Note that the BigRational type is not standard. I referenced it from the <a href="https://nuget.org/packages/BigRationalLibrary/">BigRationalLibrary NuGet package</a>.)</p>
<p>Now for some disappointing news: you'll never find the perfect pair of powers. We can achieve <img src="Transmuting%20Dice,%20Conserving%20Entropy_files/quicklatex_033.png" class="ql-img-inline-formula " alt="~99.998" title="Rendered by QuickLaTeX.com" style="vertical-align: 0px;" height="12" width="50">% efficiency with <img src="Transmuting%20Dice,%20Conserving%20Entropy_files/quicklatex_019.png" class="ql-img-inline-formula " alt="3^{15601}" title="Rendered by QuickLaTeX.com" style="vertical-align: 0px;" height="15" width="43"> and <img src="Transmuting%20Dice,%20Conserving%20Entropy_files/quicklatex_021.png" class="ql-img-inline-formula " alt="2^{24727}" title="Rendered by QuickLaTeX.com" style="vertical-align: 0px;" height="15" width="44">. We can achieve <img src="Transmuting%20Dice,%20Conserving%20Entropy_files/quicklatex_014.png" class="ql-img-inline-formula " alt="~99.999" title="Rendered by QuickLaTeX.com" style="vertical-align: 0px;" height="12" width="50">% efficiency with <img src="Transmuting%20Dice,%20Conserving%20Entropy_files/quicklatex.png" class="ql-img-inline-formula " alt="3^{47468}" title="Rendered by QuickLaTeX.com" style="vertical-align: 0px;" height="15" width="44"> and <img src="Transmuting%20Dice,%20Conserving%20Entropy_files/quicklatex_016.png" class="ql-img-inline-formula " alt="2^{75235}" title="Rendered by QuickLaTeX.com" style="vertical-align: 0px;" height="15" width="44">. We can get arbitrarily close, but we can't achieve <img src="Transmuting%20Dice,%20Conserving%20Entropy_files/quicklatex_023.png" class="ql-img-inline-formula " alt="100" title="Rendered by QuickLaTeX.com" style="vertical-align: -1px;" height="13" width="26">%
 efficiency. Doing so would require an impossibility: a power of three 
that's also a power of two. That's not going to happen. Powers of three 
aren't even ever even! No matter how big we make the constants, there 
will always be some unlikely cases where we have to discard and try 
again.</p>
<p>Give that achieving <img src="Transmuting%20Dice,%20Conserving%20Entropy_files/quicklatex_023.png" class="ql-img-inline-formula " alt="100" title="Rendered by QuickLaTeX.com" style="vertical-align: -1px;" height="13" width="26">% efficiency is impossible, and given that we can get arbitrarily close to <img src="Transmuting%20Dice,%20Conserving%20Entropy_files/quicklatex_023.png" class="ql-img-inline-formula " alt="100" title="Rendered by QuickLaTeX.com" style="vertical-align: -1px;" height="13" width="26">%
 by choosing the right constants, a person would be tempted to think 
we'd hit the limit. That we can't do any better. That person would be 
wrong.</p>
<p><em>Last chance to solve on your own.</em></p>
<h3>Conservation of Entropy</h3>
<p>Beating 'choose how close you want to be to 100% efficiency' is just a
 matter of not settling for a fixed amount of efficiency. One way to do 
this would be to compute better constants as we generated die rolls. As 
the algorithm ran longer and longer, it would waste less and less 
entropy.</p>
<p>However, it turns out we can do something slightly simpler: <a href="http://en.wikipedia.org/wiki/Arithmetic_coding">arithmetic coding</a>. The idea is to treat the coin flips as the binary digits after the decimal point (binary point?) of a number between <img src="Transmuting%20Dice,%20Conserving%20Entropy_files/quicklatex_030.png" class="ql-img-inline-formula " alt="0" title="Rendered by QuickLaTeX.com" style="vertical-align: 0px;" height="12" width="9"> and <img src="Transmuting%20Dice,%20Conserving%20Entropy_files/quicklatex_022.png" class="ql-img-inline-formula " alt="1" title="Rendered by QuickLaTeX.com" style="vertical-align: -1px;" height="13" width="7">.
 As we add more binary digits, the space where the 'complete' number can
 lie becomes smaller and smaller. Eventually, that space will almost 
certainly fall entirely within the domain covered by a single digit in 
base 6. We can then safely output that digit, and start waiting for the 
next base 6 digit to become fixed.</p>
<p>This idea easily generalizes to dies with arbitrary numbers of sides. The following code implements it:</p>
<pre><code class="prettyprint"><span class="com">///&lt;summary&gt;Generates rolls of a uniformly random die, based on rolls of a uniformly random die with a different number of sides.&lt;/summary&gt;</span><span class="pln">
</span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="typ">IEnumerable</span><span class="str">&lt;int&gt;</span><span class="pln"> </span><span class="typ">ChangeDiceSideCountFromTo</span><span class="pun">(</span><span class="kwd">this</span><span class="pln"> </span><span class="typ">IEnumerable</span><span class="str">&lt;int&gt;</span><span class="pln"> rollResults</span><span class="pun">,</span><span class="pln"> 
                                                         </span><span class="kwd">int</span><span class="pln"> oldSideCount</span><span class="pun">,</span><span class="pln"> 
                                                         </span><span class="kwd">int</span><span class="pln"> newSideCount</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">rollResults </span><span class="pun">==</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">)</span><span class="pln"> </span><span class="kwd">throw</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">ArgumentNullException</span><span class="pun">(</span><span class="str">"rollResults"</span><span class="pun">);</span><span class="pln">
    </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">oldSideCount </span><span class="pun">&lt;</span><span class="pln"> </span><span class="lit">2</span><span class="pun">)</span><span class="pln"> </span><span class="kwd">throw</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">ArgumentOutOfRangeException</span><span class="pun">(</span><span class="str">"oldSideCount"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"oldSideCount &lt; 2"</span><span class="pun">);</span><span class="pln">
    </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">newSideCount </span><span class="pun">&lt;</span><span class="pln"> </span><span class="lit">2</span><span class="pun">)</span><span class="pln"> </span><span class="kwd">throw</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">ArgumentOutOfRangeException</span><span class="pun">(</span><span class="str">"newSideCount"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"newSideCount &lt; 2"</span><span class="pun">);</span><span class="pln">

    </span><span class="typ">BigRational</span><span class="pln"> min </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln">
    </span><span class="typ">BigRational</span><span class="pln"> len </span><span class="pun">=</span><span class="pln"> </span><span class="lit">1</span><span class="pun">;</span><span class="pln">
    </span><span class="kwd">foreach</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">var</span><span class="pln"> roll </span><span class="kwd">in</span><span class="pln"> rollResults</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        </span><span class="com">// the roll represents the next digit in base-[number of old sides], reducing the valid range</span><span class="pln">
        len </span><span class="pun">/=</span><span class="pln"> oldSideCount</span><span class="pun">;</span><span class="pln">
        min </span><span class="pun">+=</span><span class="pln"> roll </span><span class="pun">*</span><span class="pln"> len</span><span class="pun">;</span><span class="pln">

        </span><span class="com">// check for digits in base-[number of new sides] becoming fixed</span><span class="pln">
        </span><span class="kwd">while</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">true</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
            </span><span class="kwd">var</span><span class="pln"> minDigit </span><span class="pun">=</span><span class="pln"> </span><span class="pun">(</span><span class="pln">min </span><span class="pun">*</span><span class="pln"> newSideCount</span><span class="pun">).</span><span class="typ">GetWholePart</span><span class="pun">();</span><span class="pln">
            </span><span class="kwd">var</span><span class="pln"> maxExclusive </span><span class="pun">=</span><span class="pln"> </span><span class="pun">(</span><span class="pln">min </span><span class="pun">+</span><span class="pln"> len</span><span class="pun">)</span><span class="pln"> </span><span class="pun">*</span><span class="pln"> newSideCount</span><span class="pun">;</span><span class="pln">
            </span><span class="kwd">var</span><span class="pln"> epsilon </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">BigRational</span><span class="pun">(-</span><span class="lit">1</span><span class="pun">,</span><span class="pln"> maxExclusive</span><span class="pun">.</span><span class="typ">Denominator</span><span class="pln"> </span><span class="pun">*</span><span class="pln"> newSideCount</span><span class="pun">);</span><span class="pln">
            </span><span class="kwd">var</span><span class="pln"> maxDigit </span><span class="pun">=</span><span class="pln"> </span><span class="pun">(</span><span class="pln">maxExclusive </span><span class="pun">-</span><span class="pln"> epsilon</span><span class="pun">).</span><span class="typ">GetWholePart</span><span class="pun">();</span><span class="pln">
            </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">minDigit </span><span class="pun">!=</span><span class="pln"> maxDigit</span><span class="pun">)</span><span class="pln"> </span><span class="kwd">break</span><span class="pun">;</span><span class="pln">

            </span><span class="com">// another digit has become fixed and can be output</span><span class="pln">
            </span><span class="kwd">yield</span><span class="pln"> </span><span class="kwd">return</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">int</span><span class="pun">)</span><span class="pln">minDigit</span><span class="pun">;</span><span class="pln">

            </span><span class="com">// normalize so the range of the next digit also ranges from 0 to 1</span><span class="pln">
            len </span><span class="pun">*=</span><span class="pln"> newSideCount</span><span class="pun">;</span><span class="pln">
            min </span><span class="pun">*=</span><span class="pln"> newSideCount</span><span class="pun">;</span><span class="pln">
            min </span><span class="pun">-=</span><span class="pln"> minDigit</span><span class="pun">;</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">        
</span><span class="pun">}</span></code></pre>
<p>The above code achieves 100% efficiency, with a small caveat: delay. If you convert from an <img src="Transmuting%20Dice,%20Conserving%20Entropy_files/quicklatex_025.png" class="ql-img-inline-formula " alt="n" title="Rendered by QuickLaTeX.com" style="vertical-align: 0px;" height="8" width="11"> sided die to an <img src="Transmuting%20Dice,%20Conserving%20Entropy_files/quicklatex_011.png" class="ql-img-inline-formula " alt="m" title="Rendered by QuickLaTeX.com" style="vertical-align: 0px;" height="8" width="15"> sided die and then <em>back</em> to an <img src="Transmuting%20Dice,%20Conserving%20Entropy_files/quicklatex_025.png" class="ql-img-inline-formula " alt="n" title="Rendered by QuickLaTeX.com" style="vertical-align: 0px;" height="8" width="11">
 sided die, you'll get the exact same rolls out that you put in. That 
proves no entropy is lost. However, the output rolls will lag the input 
rolls by an expected constant amount. This delay occurs because 
different bases have different borders between digits.</p>
<p>For example, binary numbers starting with 0.1010101010 may start with
 0.1 or 0.2 when represented in ternary. Until you almost certainly roll
 outside of the repeating 101010 pattern, the next ternary digit can't 
be determined. On the bright side, when you do finally roll outside of a
 repeating pattern that delays results, you get a large number of 
results all at once.</p>
<p>When converting from <img src="Transmuting%20Dice,%20Conserving%20Entropy_files/quicklatex_036.png" class="ql-img-inline-formula " alt="2" title="Rendered by QuickLaTeX.com" style="vertical-align: 0px;" height="12" width="8"> sides to <img src="Transmuting%20Dice,%20Conserving%20Entropy_files/quicklatex_012.png" class="ql-img-inline-formula " alt="6" title="Rendered by QuickLaTeX.com" style="vertical-align: 0px;" height="12" width="9"> sides and back, I measured average delays between <img src="Transmuting%20Dice,%20Conserving%20Entropy_files/quicklatex_027.png" class="ql-img-inline-formula " alt="4.5" title="Rendered by QuickLaTeX.com" style="vertical-align: -1px;" height="14" width="22"> and <img src="Transmuting%20Dice,%20Conserving%20Entropy_files/quicklatex_010.png" class="ql-img-inline-formula " alt="4.9" title="Rendered by QuickLaTeX.com" style="vertical-align: -1px;" height="13" width="23"> flips. The effect of the delay on our percentage of efficiency limits to <img src="Transmuting%20Dice,%20Conserving%20Entropy_files/quicklatex_030.png" class="ql-img-inline-formula " alt="0" title="Rendered by QuickLaTeX.com" style="vertical-align: 0px;" height="12" width="9"> as the number of rolls increases.</p>
<p>This is as far as we can go, I think. We never lose any rolls, so 
entropy is never permanently lost, but there's a small delay. Oh, and 
the performance is awful. The rational numbers used in the computation 
don't stay small (unless one of the dice has a number of sides that 
divides the other die's number of sides). They get bigger and bigger and
 BIGGER as you generate more rolls. It doesn't take long to convert a 
thousand rolls, but ten thousand is going to take a minute. Literally.</p>
<h3>Summary</h3>
<p>You can convert an <img src="Transmuting%20Dice,%20Conserving%20Entropy_files/quicklatex_025.png" class="ql-img-inline-formula " alt="n" title="Rendered by QuickLaTeX.com" style="vertical-align: 0px;" height="8" width="11">-sided die to an <img src="Transmuting%20Dice,%20Conserving%20Entropy_files/quicklatex_011.png" class="ql-img-inline-formula " alt="m" title="Rendered by QuickLaTeX.com" style="vertical-align: 0px;" height="8" width="15">-sided
 die without losing any entropy, with the caveat that you expect a 
constant small delay between having generated enough entropy and 
yielding the next roll.</p>
<p>This solution is interesting theoretically, but note that in practice
 you'd be far better off doing naive discarding (the constants <img src="Transmuting%20Dice,%20Conserving%20Entropy_files/quicklatex_008.png" class="ql-img-inline-formula " alt="3^{17},2^{27}" title="Rendered by QuickLaTeX.com" style="vertical-align: -4px;" height="19" width="54"> work well for coins-to-dice). Entropy is not particularly expensive. You can afford to waste 4% of it.</p>
<p>---</p>
<h3>Discuss on <a href="http://www.reddit.com/r/programming/comments/1cx8nl/transmuting_dice_conserving_entropy/">Reddit</a>, <a href="https://news.ycombinator.com/item?id=5593750">Hacker News</a></h3>
<p>---</p>

<blockquote><p>
<span style="color:#4A9EC2"><em><br>
Twisted Oak Studios offers consulting and development on high-tech interactive projects. Check out our <a href="http://twistedoakstudios.com/portfolio/">portfolio</a>, or <a href="mailto:contact@twistedoakstudios.com">Give us a shout</a> if you have anything you think some really rad engineers should help you with.<br>
</em></span>
</p></blockquote>
<h2 class="endofpage">Older Posts</h2>
<p></p><ul>
     <li><a href="http://twistedoakstudios.com/blog/Post4008_collapsing-futures-easy-to-use-hard-to-represent" rel="bookmark" title="Permanent Link to Collapsing Futures: Easy to Use, Hard to Represent">Collapsing Futures: Easy to Use, Hard to Represent</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post3858_eventual-exceptions-vs-programming-in-a-minimal-functional-style" rel="bookmark" title="Permanent Link to Eventual Exceptions vs Programming in a Minimal Functional Style">Eventual Exceptions vs Programming in a Minimal Functional Style</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post3769_the-mystery-of-flunf" rel="bookmark" title="Permanent Link to The Mystery of Flunf">The Mystery of Flunf</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post3724_explain-it-like-im-five-the-socialist-millionaire-problem-and-secure-multi-party-computation" rel="bookmark" title="Permanent Link to Explain it like I’m Five: The Socialist Millionaire Problem and Secure Multi-Party Computation">Explain it like I’m Five: The Socialist Millionaire Problem and Secure Multi-Party Computation</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post3631_computer-science-blows-my-mind" rel="bookmark" title="Permanent Link to Computer Science Blows My Mind">Computer Science Blows My Mind</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post3484_a-visit-to-execution-labs-in-montreal" rel="bookmark" title="Permanent Link to A visit to Execution Labs in Montréal">A visit to Execution Labs in Montréal</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post3516_rule-of-thumb-ask-for-the-clock" rel="bookmark" title="Permanent Link to Rule of Thumb: Ask for the Clock">Rule of Thumb: Ask for the Clock</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post3477_rule-of-thumb-use-purposefully-weakened-methods" rel="bookmark" title="Permanent Link to Rule of Thumb: Use Purposefully Weakened Methods">Rule of Thumb: Use Purposefully Weakened Methods</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post3376_rule-of-thumb-preconditions-should-be-checked-explicitly" rel="bookmark" title="Permanent Link to Rule of thumb: Preconditions Should be Checked Explicitly">Rule of thumb: Preconditions Should be Checked Explicitly</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post3280_intersecting-linked-lists-faster" rel="bookmark" title="Permanent Link to Intersecting Linked Lists Faster">Intersecting Linked Lists Faster</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post3138_mouse-path-smoothing-for-jack-lumber" rel="bookmark" title="Permanent Link to Mouse Path Smoothing for Jack Lumber">Mouse Path Smoothing for Jack Lumber</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post3044_my-bug-my-bad-2-sunk-by-float" rel="bookmark" title="Permanent Link to My Bug, My Bad #2: Sunk by Float">My Bug, My Bad #2: Sunk by Float</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post2852_repeat-yourself-differently" rel="bookmark" title="Permanent Link to Repeat Yourself Differently">Repeat Yourself Differently</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post2644_grovers-quantum-search-algorithm" rel="bookmark" title="Permanent Link to Grover’s Quantum Search Algorithm">Grover’s Quantum Search Algorithm</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post2766_followup-to-non-nullable-types-vs-c" rel="bookmark" title="Permanent Link to Followup to Non-Nullable Types vs C#">Followup to Non-Nullable Types vs C#</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post2540_optimizing-just-in-time-with-expression-trees" rel="bookmark" title="Permanent Link to Optimizing Just in Time with Expression Trees">Optimizing Just in Time with Expression Trees</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post2353_when-one-way-latency-doesnt-matter" rel="bookmark" title="Permanent Link to When One-Way Latency Doesn’t Matter">When One-Way Latency Doesn’t Matter</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post2194_determining-exactly-ifwhenwhere-a-moving-line-intersected-a-moving-point" rel="bookmark" title="Permanent Link to Determining exactly if/when/where a moving line intersected a moving point">Determining exactly if/when/where a moving line intersected a moving point</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post2061_emulating-actors-in-c-with-asyncawait" rel="bookmark" title="Permanent Link to Emulating Actors in C# with Async/Await">Emulating Actors in C# with Async/Await</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post2096_making-an-immutable-queue-with-guaranteed-constant-time-operations" rel="bookmark" title="Permanent Link to Making an immutable queue with guaranteed constant time operations">Making an immutable queue with guaranteed constant time operations</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post399_improving-checked-exceptions" rel="bookmark" title="Permanent Link to Improving Checked Exceptions">Improving Checked Exceptions</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post1941_perishable-collections-the-benefits-of-removal-by-lifetime" rel="bookmark" title="Permanent Link to Perishable Collections: The Benefits of Removal-by-Lifetime">Perishable Collections: The Benefits of Removal-by-Lifetime</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post1823_decoupling-shared-control" rel="bookmark" title="Permanent Link to Decoupling shared control">Decoupling shared control</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post1694_decoupling-inlined-ui-code" rel="bookmark" title="Permanent Link to Decoupling inlined UI code">Decoupling inlined UI code</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post1585_linq-to-collections-beyond-ienumerablet" rel="bookmark" title="Permanent Link to Linq to Collections: Beyond IEnumerable&lt;T&gt;">Linq to Collections: Beyond IEnumerable&lt;T&gt;</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post1295_publish-your-net-library-as-a-nuget-package" rel="bookmark" title="Permanent Link to Publish your .Net library as a NuGet package">Publish your .Net library as a NuGet package</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post1130_when-null-is-not-enough-an-option-type-for-c" rel="bookmark" title="Permanent Link to When null is not enough: an option type for C#">When null is not enough: an option type for C#</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post1473_unfathomable-bugs-5-readonly-or-not" rel="bookmark" title="Permanent Link to Unfathomable Bugs #5: Readonly or not">Unfathomable Bugs #5: Readonly or not</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post667_minkowski-sums-examples" rel="bookmark" title="Permanent Link to Minkowski sums: examples">Minkowski sums: examples</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post1080_my-bug-my-bad-1-fractal-spheres" rel="bookmark" title="Permanent Link to My Bug, My Bad #1: Fractal Spheres">My Bug, My Bad #1: Fractal Spheres</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post1007_working-around-the-brittle-ui-virtualization-in-windows-8" rel="bookmark" title="Permanent Link to Working around the brittle UI Virtualization in Windows 8">Working around the brittle UI Virtualization in Windows 8</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post938_encapsulating-angles" rel="bookmark" title="Permanent Link to Encapsulating Angles">Encapsulating Angles</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post925_unfathomable-bugs-4-keys-that-arent" rel="bookmark" title="Permanent Link to Unfathomable Bugs #4: Keys that aren’t">Unfathomable Bugs #4: Keys that aren’t</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post867_how-would-i-even-use-a-monad-in-c" rel="bookmark" title="Permanent Link to How would I even use a monad (in C#)?">How would I even use a monad (in C#)?</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post822_useful-methods-1-observable-wheneach" rel="bookmark" title="Permanent Link to Useful/Interesting Methods #1: Observable.WhenEach">Useful/Interesting Methods #1: Observable.WhenEach</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post818_unfathomable-bugs-3-stringing-you-along" rel="bookmark" title="Permanent Link to Unfathomable Bugs #3: Stringing you along">Unfathomable Bugs #3: Stringing you along</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post774_anonymous-implementation-classes-a-design-pattern-for-c" rel="bookmark" title="Permanent Link to Anonymous Implementation Classes – A Design Pattern for C#">Anonymous Implementation Classes – A Design Pattern for C#</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post532_tasks-for-action-script-3" rel="bookmark" title="Permanent Link to Tasks for ActionScript 3 – Improving on Event-Driven Programming">Tasks for ActionScript 3 – Improving on Event-Driven Programming</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post554_minkowski-sums-and-differences" rel="bookmark" title="Permanent Link to Minkowski sums and differences">Minkowski sums and differences</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post330_non-nullable-types-vs-c-fixing-the-billion-dollar-mistake" rel="bookmark" title="Permanent Link to Non-Nullable Types vs C#: Fixing the Billion Dollar Mistake">Non-Nullable Types vs C#: Fixing the Billion Dollar Mistake</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post384_unfathomable-bugs-2-slashing-out" rel="bookmark" title="Permanent Link to Unfathomable Bugs #2: Slashing Out">Unfathomable Bugs #2: Slashing Out</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post404_script-templates-and-base-classes" rel="bookmark" title="Permanent Link to Script templates and base classes">Script templates and base classes</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post373_unity-font-extraction" rel="bookmark" title="Permanent Link to Unity font extraction">Unity font extraction</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post341_abusing-phantom-types-to-encode-list-lengths-into-their-type" rel="bookmark" title="Permanent Link to Abusing “Phantom Types” to Encode List Lengths Into Their Type">Abusing “Phantom Types” to Encode List Lengths Into Their Type</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post261_constructive-criticism-of-the-reactive-extensions-api" rel="bookmark" title="Permanent Link to Constructive Criticism of the Reactive Extensions API">Constructive Criticism of the Reactive Extensions API</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post241_quaternions-part-3-2" rel="bookmark" title="Permanent Link to Quaternions part 3">Quaternions part 3</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post204_quaternions-part-2" rel="bookmark" title="Permanent Link to Quaternions part 2">Quaternions part 2</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post144_quaternions-part-1" rel="bookmark" title="Permanent Link to Quaternions part 1">Quaternions part 1</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post157_unfathomable-bugs-1-you-can-have-things-you-can-have-things-in-things-you-can-have" rel="bookmark" title="Permanent Link to Unfathomable Bugs #1: You can have things! You can have things IN things! You can have …">Unfathomable Bugs #1: You can have things! You can have things IN things! You can have …</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post83_coroutines-more-than-you-want-to-know" rel="bookmark" title="Permanent Link to Coroutines – More than you want to know">Coroutines – More than you want to know</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post74_asset-bundle-helper" rel="bookmark" title="Permanent Link to Asset Bundle Helper">Asset Bundle Helper</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post60_the-visual-studio-goes-away" rel="bookmark" title="Permanent Link to The Visual Studio goes away">The Visual Studio goes away</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post57_nets-time-traveling-stopwatch" rel="bookmark" title="Permanent Link to .Net’s time traveling StopWatch">.Net’s time traveling StopWatch</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post3718_polish" rel="bookmark" title="Permanent Link to Polish">Polish</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post29_introducing-catalyst" rel="bookmark" title="Permanent Link to Introducing Catalyst">Introducing Catalyst</a></li>
  </ul>
<p></p>


			</div><!-- #content -->
			</section>

			</div>
		</div><!-- #container -->


</span></div><!-- .container -->

 <div id="upprev_box" style="right: -400px;">
	<h6>
		More interesting posts <span class="num"> (3 of 6 articles)</span>
	</h6>
	<div class="upprev_excerpt">
		<p>
			<a href="http://twistedoakstudios.com/blog/Post3280_intersecting-linked-lists-faster" rel="prev">Intersecting Linked Lists Faster</a>
		</p>
	</div>
	
		<p>
Or check out our <a href="http://twistedoakstudios.com/portfolio">Portfolio</a>.		</p><button id="upprev_close" type="button">Close</button>
</div><!-- #upprev_box -->
<link rel="stylesheet" id="al2fb_style-css" href="Transmuting%20Dice,%20Conserving%20Entropy_files/add-link-to-facebook.css" type="text/css" media="all">
<link rel="stylesheet" id="admin-bar-css" href="Transmuting%20Dice,%20Conserving%20Entropy_files/admin-bar.css" type="text/css" media="all">
<link rel="stylesheet" id="upprev-css-css" href="Transmuting%20Dice,%20Conserving%20Entropy_files/upprev.css" type="text/css" media="all">
<link rel="stylesheet" id="wp-quicklatex-format-css" href="Transmuting%20Dice,%20Conserving%20Entropy_files/quicklatex-format.css" type="text/css" media="all">
<script type="text/javascript" src="Transmuting%20Dice,%20Conserving%20Entropy_files/admin-bar.js"></script>
<script type="text/javascript" src="Transmuting%20Dice,%20Conserving%20Entropy_files/jquery_002.js"></script>
<script type="text/javascript" src="Transmuting%20Dice,%20Conserving%20Entropy_files/upprev_js.php"></script>
<script type="text/javascript" src="Transmuting%20Dice,%20Conserving%20Entropy_files/comment-reply.js"></script>
	<script type="text/javascript">
		(function() {
			var request, b = document.body, c = 'className', cs = 'customize-support', rcs = new RegExp('(^|\\s+)(no-)?'+cs+'(\\s+|$)');

			request = true;

			b[c] = b[c].replace( rcs, ' ' );
			b[c] += ( window.postMessage && request ? ' ' : ' no-' ) + cs;
		}());
	</script>
			

		 
<!-- BEGIN footer-type stuff -->
<div class="container footer-container">
	<div class="row">
		
		<div class="fourcol last"><!-- .last b/c it's floated right -->
      <!-- home portfolio used to be here -->
		</div>

		<div class="eightcol" id="contact">
			<p>Twisted Oak Studios<br>
				138-1657 Barrington St.<br>
				Halifax, NS, Canada B3J 2A1</p>
			
			<p>001-902-237-7326<br>
			<a href="mailto:contact@twistedoakstudios.com">contact@twistedoakstudios.com</a></p>
		</div>

		<div class="twelvecol">
			<footer>
				<small>©2012
					<script>
						var d=new Date(); 
						yr=d.getFullYear();
						if (yr!=2012)
						document.write("- "+yr);
					</script>- 2013 Twisted Oak Studios Ltd. -- All Rights Reserved -- All images and logos are property of their respective owners.
				</small>
			</footer>
		</div>
		
		
	</div><!-- .row -->
</div><!-- .container -->
<!-- END footer stuff-->

<!-- jQuery and scrolly script for contact link -->
<script src="Transmuting%20Dice,%20Conserving%20Entropy_files/jquery.js"></script>
  <script>window.jQuery || document.write('<script src="../js/libs/jquery-1.6.2.min.js"><\/script>')</script>

<script src="Transmuting%20Dice,%20Conserving%20Entropy_files/scrolly.js"></script>


  <!-- Don't forget Analytics! -->



  <!-- Prompt IE 6 users to install Chrome Frame. Remove this if you want to support IE 6.
       chromium.org/developers/how-tos/chrome-frame-getting-started -->
  <!--[if lt IE 7 ]>
    <script src="//ajax.googleapis.com/ajax/libs/chrome-frame/1.0.3/CFInstall.min.js"></script>
    <script>window.attachEvent('onload',function(){CFInstall.check({mode:'overlay'})})</script>
  <![endif]-->
  


<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-31441525-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>
<div id="wpadminbar" class="nojq " role="navigation">
			<a class="screen-reader-shortcut" href="#wp-toolbar" tabindex="1">Skip to toolbar</a>
			<div class="quicklinks" id="wp-toolbar" role="navigation" aria-label="Top navigation toolbar." tabindex="0">
				<ul id="wp-admin-bar-root-default" class="ab-top-menu">
		<li id="wp-admin-bar-wp-logo" class="menupop"><a class="ab-item" aria-haspopup="true" href="http://twistedoakstudios.com/blog/wp-admin/about.php" title="About WordPress"><span class="ab-icon"></span></a><div class="ab-sub-wrapper"><ul id="wp-admin-bar-wp-logo-default" class="ab-submenu">
		<li id="wp-admin-bar-about"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/about.php">About WordPress</a>		</li></ul><ul id="wp-admin-bar-wp-logo-external" class="ab-sub-secondary ab-submenu">
		<li id="wp-admin-bar-wporg"><a class="ab-item" href="http://wordpress.org/">WordPress.org</a>		</li>
		<li id="wp-admin-bar-documentation"><a class="ab-item" href="http://codex.wordpress.org/">Documentation</a>		</li>
		<li id="wp-admin-bar-support-forums"><a class="ab-item" href="http://wordpress.org/support/">Support Forums</a>		</li>
		<li id="wp-admin-bar-feedback"><a class="ab-item" href="http://wordpress.org/support/forum/requests-and-feedback">Feedback</a>		</li></ul></div>		</li>
		<li id="wp-admin-bar-site-name" class="menupop"><a class="ab-item" aria-haspopup="true" href="http://twistedoakstudios.com/blog/wp-admin/">twistedoakstudios.com</a><div class="ab-sub-wrapper"><ul id="wp-admin-bar-site-name-default" class="ab-submenu">
		<li id="wp-admin-bar-dashboard"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/">Dashboard</a>		</li></ul><ul id="wp-admin-bar-appearance" class="ab-submenu">
		<li id="wp-admin-bar-themes"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/themes.php">Themes</a>		</li>
		<li id="wp-admin-bar-customize" class="hide-if-no-customize"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/customize.php?url=http%3A%2F%2Ftwistedoakstudios.com%2Fblog%2FPost3573_transmuting-dice-conserving-entropy">Customize</a>		</li></ul></div>		</li>
		<li id="wp-admin-bar-updates"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/update-core.php" title="2 Plugin Updates, 1 Theme Update"><span class="ab-icon"></span><span class="ab-label">3</span><span class="screen-reader-text">2 Plugin Updates, 1 Theme Update</span></a>		</li>
		<li id="wp-admin-bar-comments"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/edit-comments.php" title="0 comments awaiting moderation"><span class="ab-icon"></span><span id="ab-awaiting-mod" class="ab-label awaiting-mod pending-count count-0">0</span></a>		</li>
		<li id="wp-admin-bar-new-content" class="menupop"><a class="ab-item" aria-haspopup="true" href="http://twistedoakstudios.com/blog/wp-admin/post-new.php" title="Add New"><span class="ab-icon"></span><span class="ab-label">New</span></a><div class="ab-sub-wrapper"><ul id="wp-admin-bar-new-content-default" class="ab-submenu">
		<li id="wp-admin-bar-new-post"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/post-new.php">Post</a>		</li>
		<li id="wp-admin-bar-new-media"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/media-new.php">Media</a>		</li>
		<li id="wp-admin-bar-new-link"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/link-add.php">Link</a>		</li>
		<li id="wp-admin-bar-new-page"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/post-new.php?post_type=page">Page</a>		</li>
		<li id="wp-admin-bar-new-user"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/user-new.php">User</a>		</li></ul></div>		</li>
		<li id="wp-admin-bar-edit"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/post.php?post=3573&amp;action=edit">Edit Post</a>		</li></ul><ul id="wp-admin-bar-top-secondary" class="ab-top-secondary ab-top-menu">
		<li id="wp-admin-bar-search" class="admin-bar-search"><div class="ab-item ab-empty-item" tabindex="-1"><form action="http://twistedoakstudios.com/blog/" method="get" id="adminbarsearch"><input class="adminbar-input" name="s" id="adminbar-search" maxlength="150" type="text"><input class="adminbar-button" value="Search" type="submit"></form></div>		</li>
		<li id="wp-admin-bar-my-account" class="menupop with-avatar"><a class="ab-item" aria-haspopup="true" href="http://twistedoakstudios.com/blog/wp-admin/profile.php" title="My Account">Howdy, Craig Gidney<img alt="" src="Transmuting%20Dice,%20Conserving%20Entropy_files/31a6ce579f8f9f9d528715d1e941726e.png" class="avatar avatar-16 photo" height="16" width="16"></a><div class="ab-sub-wrapper"><ul id="wp-admin-bar-user-actions" class="ab-submenu">
		<li id="wp-admin-bar-user-info"><a class="ab-item" tabindex="-1" href="http://twistedoakstudios.com/blog/wp-admin/profile.php"><img alt="" src="Transmuting%20Dice,%20Conserving%20Entropy_files/31a6ce579f8f9f9d528715d1e941726e_002.png" class="avatar avatar-64 photo" height="64" width="64"><span class="display-name">Craig Gidney</span><span class="username">craig</span></a>		</li>
		<li id="wp-admin-bar-edit-profile"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/profile.php">Edit My Profile</a>		</li>
		<li id="wp-admin-bar-logout"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-login.php?action=logout&amp;_wpnonce=8450958ce8">Log Out</a>		</li></ul></div>		</li></ul>			</div>
			<a class="screen-reader-shortcut" href="http://twistedoakstudios.com/blog/wp-login.php?action=logout&amp;_wpnonce=8450958ce8">Log Out</a>
		</div></body></html>