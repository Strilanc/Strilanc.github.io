<!DOCTYPE html>
<!-- paulirish.com/2008/conditional-stylesheets-vs-css-hacks-answer-neither/ -->
<!--[if lt IE 7]> <html class="no-js ie6 oldie" lang="en"> <![endif]-->
<!--[if IE 7]>    <html class="no-js ie7 oldie" lang="en"> <![endif]-->
<!--[if IE 8]>    <html class="no-js ie8 oldie" lang="en"> <![endif]-->
<!-- Consider adding an manifest.appcache: h5bp.com/d/Offline -->
<!--[if gt IE 8]><!-->
<html class=" js flexbox canvas canvastext webgl no-touch geolocation postmessage no-websqldatabase indexeddb hashchange history draganddrop websockets rgba hsla multiplebgs backgroundsize borderimage borderradius boxshadow textshadow opacity cssanimations csscolumns cssgradients no-cssreflections csstransforms csstransforms3d csstransitions fontface generatedcontent video audio localstorage sessionstorage webworkers applicationcache svg inlinesvg smil svgclippaths" xmlns="http://www.w3.org/1999/xhtml" xmlns:og="http://ogp.me/ns#" xmlns:fb="https://www.facebook.com/2008/fbml" lang="en"><script src="Exploring%20Universal%20Ternary%20Gates_files/Post7878_exploring-universal-ternary-gates.htm" async=""></script><script id="bug.surrogate.1">var urchinTracker=function(){},_gaq={push:function(){try {if(arguments[0][0]=='_link')window.location.href=arguments[0][1]}catch(er){}}},_gat={_createTracker:function(){}, _getTracker:function(){return{__noSuchMethod__:function(){},_link:function(o){if(o)location.href=o;},_linkByPost:function(){return true;},_getLinkerUrl:function(o){return o;},_trackEvent:function(){}}}};</script><!--<![endif]--><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
  <meta charset="utf-8">
   <!-- blog feed link -->
  <link href="http://twistedoakstudios.com/blog/?feed=rss" rel="alternate" type="application/rss+xml" title="Twisted Oak Studios Blog">

  <!-- Use the .htaccess and remove these lines to avoid edge case issues.
       More info: h5bp.com/b/378 -->
  <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">

<title>Exploring Universal Ternary Gates | Twisted Oak Studios Blog</title>

  <meta name="description" content="As a lean co-operative team of seasoned developers, Twisted Oak is able to offer efficient, flexible remote and on-the-floor development and consulting without any middle-man or excessive administrivia.">
  <meta name="author" content="/humans.txt">

  <meta name="viewport" content="width=device-width,initial-scale=1">

  <link rel="shortcut icon" href="http://twistedoakstudios.com/blog/favicon.ico">
  <link rel="apple-touch-icon-precomposed" href="http://twistedoakstudios.com/blog/apple-touch-icon-precomposed.png">

  	<!-- The 1140px Grid - http://cssgrid.net/ -->
	<link rel="stylesheet" href="Exploring%20Universal%20Ternary%20Gates_files/1140.css">
    <link rel="stylesheet" href="Exploring%20Universal%20Ternary%20Gates_files/style.css">
    <link rel="stylesheet" href="Exploring%20Universal%20Ternary%20Gates_files/blogstyle.css">
<link rel="stylesheet" href="Exploring%20Universal%20Ternary%20Gates_files/prettify.css" media="all">
<link rel="stylesheet" href="Exploring%20Universal%20Ternary%20Gates_files/sunburst.css" media="all">
<script type="text/javascript" src="Exploring%20Universal%20Ternary%20Gates_files/prettify.js"></script>

	<!-- Webfonts! -->
	<link href="Exploring%20Universal%20Ternary%20Gates_files/css.css" rel="stylesheet" type="text/css">

	<!-- Open Graph -->
	<meta property="og:title" content="Twisted Oak Studios">
	<meta property="og:type" content="company">
	<meta property="og:url" content="http://www.twistedoakstudios.com/">
	<meta property="og:image" content="http://www.twistedoakstudios.com/images/logo.png">
	<meta property="og:description" content="As a lean co-operative team of seasoned developers, Twisted Oak is able to offer efficient, flexible remote and on-the-floor development and consulting without any middle-man or excessive administrivia.">
  
  <script src="Exploring%20Universal%20Ternary%20Gates_files/modernizr-2.js"></script>
<script src="Exploring%20Universal%20Ternary%20Gates_files/embed.js" async="" type="text/javascript"></script></head>
<body class=" customize-support" onload="prettyPrint()">
<!-- begin header -->
<div class="container header-container">
	<div class="row">
		<header>
			<div class="threecol">
				<a href="http://twistedoakstudios.com/"><img class="logo" src="Exploring%20Universal%20Ternary%20Gates_files/logo.png"></a>
			</div><!-- .threecol -->
		
			<div class="fourcol navcol">
				<nav>
					<ul class="primary-nav clearfix">
						<li><a href="http://twistedoakstudios.com/">Home</a></li>
						<li><a href="http://twistedoakstudios.com/portfolio/">Portfolio</a></li>
						<li><a href="http://twistedoakstudios.com/labs/">Labs</a></li>
						<li><a class="scroll" href="#contact">Contact</a></li>
						<li><a href="http://twistedoakstudios.com/blog/">Blog</a></li>
					</ul>
				</nav>
			</div>    

    	</header>
	</div><!-- .row -->
</div><!-- .container -->


	<div id="main">
<span class="blog">
<div class="container home-container" id="home">
	<div class="row">
    <p class="big-callout">
    <!--We're hiring! Experience with Game Dev, Unity3D, Graphics, Signal Processing, or Networking? Eligible to work in Canada? 
      <a href="http://www.twistedoakstudios.com/jobs.php">Check it out</a>!
-->
		</p><section>
			
			<div class="ninecol">


<h2><a href="http://twistedoakstudios.com/blog/Post7878_exploring-universal-ternary-gates" rel="bookmark" title="Permanent Link to Exploring Universal Ternary Gates">Exploring Universal Ternary Gates</a></h2>
<div class="meta">posted by Craig Gidney on November 19, 2013</div>

<p>In this post: finding a gate that can emulate any other gate when using three-valued logic.</p>
<h3>Universal Gates</h3>
<p><a href="http://en.wikipedia.org/wiki/Logic_circuit">Logic circuits</a> are made up of <a href="http://en.wikipedia.org/wiki/Logic_gate">gates</a>
 connected by wires. Wires hold values, and gates operate on those 
values. Creating a circuit that computes a particular function is just a
 matter of running the inputs through the right gates in the right 
order.</p>
<p>Intuitively, you might expect that ever more complicated functions 
would require ever more complicated gates. It turns out that this is 
false: you can find <a href="http://en.wikipedia.org/wiki/Functional_completeness">universal sets of gates</a> that can compute any function. In fact, there are gates that are universal all on their own.</p>
<p>When working in the usual two-valued boolean logic, there are two universal gates: the <a href="http://en.wikipedia.org/wiki/NAND_gate">nand gate</a> and the <a href="http://en.wikipedia.org/wiki/NOR_gate">nor gate</a>. (Note that I’ll only be talking about gates with two inputs in this post. See <a href="http://en.wikipedia.org/wiki/Toffoli_gate">Toffoli gate</a>
 for a three-input universal gate.) We can create any boolean function 
you can imagine, with a fixed number of inputs and outputs, using 
nothing but nand gates.</p>
<p>One day a coworker wondered if three-valued logic also had universal 
gates, like nand and nor but for three values instead of just 
true/false. A cursory googling revealed nothing… so I was sniped, and 
had to figure out the answer.</p>
<h3>Ternary Logic and Gates</h3>
<p>To do ternary logic, we need three values. I’m going to be using <img src="Exploring%20Universal%20Ternary%20Gates_files/quicklatex_017.png" class="ql-img-inline-formula " alt="+" title="Rendered by QuickLaTeX.com" style="vertical-align: -1px;" width="13" height="12">, <img src="Exploring%20Universal%20Ternary%20Gates_files/quicklatex_027.png" class="ql-img-inline-formula " alt="0" title="Rendered by QuickLaTeX.com" style="vertical-align: 0px;" width="9" height="12">, and <img src="Exploring%20Universal%20Ternary%20Gates_files/quicklatex_003.png" class="ql-img-inline-formula " alt="-" title="Rendered by QuickLaTeX.com" style="vertical-align: 4px;" width="12" height="1"> as those values. You can think of <img src="Exploring%20Universal%20Ternary%20Gates_files/quicklatex_017.png" class="ql-img-inline-formula " alt="+" title="Rendered by QuickLaTeX.com" style="vertical-align: -1px;" width="13" height="12"> as corresponding to <code>true</code>, <img src="Exploring%20Universal%20Ternary%20Gates_files/quicklatex_003.png" class="ql-img-inline-formula " alt="-" title="Rendered by QuickLaTeX.com" style="vertical-align: 4px;" width="12" height="1"> as corresponding to <code>false</code>, and <img src="Exploring%20Universal%20Ternary%20Gates_files/quicklatex_027.png" class="ql-img-inline-formula " alt="0" title="Rendered by QuickLaTeX.com" style="vertical-align: 0px;" width="9" height="12"> as being the extra “neither/both/whatever” value… but really they’re just arbitrary symbols.</p>
<p>A ternary function or gate is specified entirely by what to output 
for each possible input. We’ll be working with two-input single-output 
gates. That means there are <img src="Exploring%20Universal%20Ternary%20Gates_files/quicklatex.png" class="ql-img-inline-formula " alt="3^2 = 9" title="Rendered by QuickLaTeX.com" style="vertical-align: 0px;" width="49" height="15"> possible inputs, <img src="Exploring%20Universal%20Ternary%20Gates_files/quicklatex_004.png" class="ql-img-inline-formula " alt="3^1=3" title="Rendered by QuickLaTeX.com" style="vertical-align: 0px;" width="49" height="15"> possible outputs, and <img src="Exploring%20Universal%20Ternary%20Gates_files/quicklatex_022.png" class="ql-img-inline-formula " alt="3^9 = 19383" title="Rendered by QuickLaTeX.com" style="vertical-align: -1px;" width="85" height="16"> possible gates.</p>
<p>The most straightforward ternary gates to specify are the constant 
output gates, which just unconditionally return the same value 
regardless of their input:</p>
<p><img src="Exploring%20Universal%20Ternary%20Gates_files/quicklatex_023.png" class="ql-img-inline-formula " alt="\begin{tabular}{ c | c c c } all+ &amp; + &amp; 0 &amp; -\\ \hline + &amp; + &amp; + &amp; + \\ 0 &amp; + &amp; + &amp; + \\ - &amp; + &amp; + &amp; + \\ \end{tabular} \hspace{10 mm} \begin{tabular}{ c | c c c } all0 &amp; + &amp; 0 &amp; -\\ \hline + &amp; 0 &amp; 0 &amp; 0 \\ 0 &amp; 0 &amp; 0 &amp; 0 \\ - &amp; 0 &amp; 0 &amp; 0 \\ \end{tabular} \hspace{10 mm} \begin{tabular}{ c | c c c } all- &amp; + &amp; 0 &amp; -\\ \hline + &amp; - &amp; - &amp; - \\ 0 &amp; - &amp; - &amp; - \\ - &amp; - &amp; - &amp; - \\ \end{tabular}" title="Rendered by QuickLaTeX.com" style="vertical-align: -40px;" width="512" height="90"></p>
<p>Surprisingly, the above constant gates are actually not the simplest 
when it comes to how many things you can compute. The simplest gates are
 actually <code>1st</code> and <code>2nd</code>, which just return one of their inputs while ignoring the other:</p>
<p><img src="Exploring%20Universal%20Ternary%20Gates_files/quicklatex_016.png" class="ql-img-inline-formula " alt="\begin{tabular}{ c | c c c } 1st &amp; + &amp; 0 &amp; -\\ \hline + &amp; + &amp; + &amp; + \\ 0 &amp; 0 &amp; 0 &amp; 0 \\ - &amp; - &amp; - &amp; - \\ \end{tabular} \hspace{10 mm} \begin{tabular}{ c | c c c } 2nd &amp; + &amp; 0 &amp; -\\ \hline + &amp; + &amp; 0 &amp; - \\ 0 &amp; + &amp; 0 &amp; - \\ - &amp; + &amp; 0 &amp; - \\ \end{tabular}" title="Rendered by QuickLaTeX.com" style="vertical-align: -40px;" width="323" height="90"></p>
<p>The reason <code>1st</code> and <code>2nd</code> are the simplest gates, at least for our purposes, is because <em>you get them for free</em>. When building a circuit, no matter what gates you have available, you can always compute <code>1st</code> or <code>2nd</code> by applying no gates: just directly use the input wire instead of running it through a gate.</p>
<p>Thought of in another way: in the directed graph of gates that can emulate each other, <code>1st</code> and <code>2nd</code> are the leafs. Our starting point.</p>
<h3>Exploring Ternary Gates</h3>
<p>One useful trick when thinking about logic circuits is to imagine the
 gates as having an immutable value equal to the function they compute 
with respect to the circuit’s inputs.</p>
<p>So, when building a circuit, we start off with two values corresponding to the inputs: <code>1st</code> and <code>2nd</code>.
 Then we create new values by combining those values through a gate. 
This places a new gate into the circuit, with a (hopefully) distinct 
value. That’s how I think of circuits anyways: using gates to combine 
gates to make other gates in order to explore the space of gates.</p>
<p>Reading over that it does sound kind of weird, but it’s actually 
really simple. Let’s do an example. Suppose the candidate gate we’re 
working with is the <code>min</code> gate. <code>min</code> returns the smaller of its inputs, with the convention that <img src="Exploring%20Universal%20Ternary%20Gates_files/quicklatex_013.png" class="ql-img-inline-formula " alt="- &lt; 0 &lt; +" title="Rendered by QuickLaTeX.com" style="vertical-align: -1px;" width="82" height="13">:</p>
<p><img src="Exploring%20Universal%20Ternary%20Gates_files/quicklatex_019.png" class="ql-img-inline-formula " alt="\begin{tabular}{ c | c c c } min &amp; + &amp; 0 &amp; -\\ \hline + &amp; + &amp; 0 &amp; - \\ 0 &amp; 0 &amp; 0 &amp; - \\ - &amp; - &amp; - &amp; - \\ \end{tabular}" title="Rendered by QuickLaTeX.com" style="vertical-align: -40px;" width="136" height="90"></p>
<p>We start off with our starting values: <code>1st</code> and <code>2nd</code>. We want to try to make as many different values as we can, by running values we already have through <code>min</code>. Let’s try combining <code>1st</code> and <code>2nd</code> together:</p>
<p><img src="Exploring%20Universal%20Ternary%20Gates_files/quicklatex_025.png" class="ql-img-inline-formula " alt="\begin{tabular}{ c | c c c } 1st min 2nd &amp; + &amp; 0 &amp; -\\ \hline + &amp; + min + &amp; + min 0 &amp; + min - \\ 0 &amp; 0 min + &amp; 0 min 0 &amp; 0 min - \\ - &amp; - min + &amp; - min 0 &amp; - min - \\ \end{tabular} = \begin{tabular}{ c | c c c } min &amp; + &amp; 0 &amp; -\\ \hline + &amp; + &amp; 0 &amp; - \\ 0 &amp; 0 &amp; 0 &amp; - \\ - &amp; - &amp; - &amp; - \\ \end{tabular}" title="Rendered by QuickLaTeX.com" style="vertical-align: -40px;" width="524" height="90"></p>
<p>Go figure: when you compute the minimum of the inputs, the resulting function value is <code>min</code>. How tautological.</p>
<p>Now we have three function values we know we can reach: <code>1st</code>, <code>2nd</code>, and <code>min</code>.
 Unfortunately, as you’ll find out if you try it out for yourself, we 
can’t make any more. We always end up with just another way to make <code>1st</code>, <code>2nd</code>, or <code>min</code> instead of something new. Clearly <code>min</code> is not a universal gate.</p>
<h3>Trying Another Gate</h3>
<p>We barely got anywhere with <code>min</code>. Let’s try another gate to see if we get farther. I call the gate we’ll look at now <code>imp</code>, because it is a generalization of boolean implication. Its truth table is a lot like <code>min</code>‘s, except inverted and flipped:</p>
<p><img src="Exploring%20Universal%20Ternary%20Gates_files/quicklatex_010.png" class="ql-img-inline-formula " alt="\begin{tabular}{ c | c c c } imp &amp; + &amp; 0 &amp; -\\ \hline + &amp; + &amp; 0 &amp; - \\ 0 &amp; + &amp; 0 &amp; 0 \\ - &amp; + &amp; + &amp; + \\ \end{tabular}" title="Rendered by QuickLaTeX.com" style="vertical-align: -40px;" width="149" height="90"></p>
<p>Once again we start with just <code>1st</code> and <code>2nd</code>. If we gate those two together with <code>imp</code>, we trivially reach <code>imp</code> in exactly the same way that <code>min</code> gave us <code>min</code>. However, unlike with <code>min</code>, we have other useful moves available when using <code>imp</code>. For example, if we <code>imp</code> the first input into itself we get this function:</p>
<p><img src="Exploring%20Universal%20Ternary%20Gates_files/quicklatex_018.png" class="ql-img-inline-formula " alt="\begin{tabular}{ c | c c c } 1st imp 1st &amp; + &amp; 0 &amp; -\\ \hline + &amp; + imp + &amp; + imp + &amp; + imp + \\ 0 &amp; 0 imp 0 &amp; 0 imp 0 &amp; 0 imp 0 \\ - &amp; - imp - &amp; - imp - &amp; - imp - \\ \end{tabular} = \begin{tabular}{ c | c c c }  &amp; + &amp; 0 &amp; -\\ \hline + &amp; + &amp; + &amp; + \\ 0 &amp; 0 &amp; 0 &amp; 0 \\ - &amp; + &amp; + &amp; + \\ \end{tabular}" title="Rendered by QuickLaTeX.com" style="vertical-align: -40px;" width="528" height="90"></p>
<p>The above gate is like <code>1st</code>, except it returns <img src="Exploring%20Universal%20Ternary%20Gates_files/quicklatex_017.png" class="ql-img-inline-formula " alt="+" title="Rendered by QuickLaTeX.com" style="vertical-align: -1px;" width="13" height="12"> instead of <img src="Exploring%20Universal%20Ternary%20Gates_files/quicklatex_003.png" class="ql-img-inline-formula " alt="-" title="Rendered by QuickLaTeX.com" style="vertical-align: 4px;" width="12" height="1"> when the first input was <img src="Exploring%20Universal%20Ternary%20Gates_files/quicklatex_003.png" class="ql-img-inline-formula " alt="-" title="Rendered by QuickLaTeX.com" style="vertical-align: 4px;" width="12" height="1">.</p>
<p>Clearly <code>imp</code> is more flexible than <code>min</code> was. Unfortunately, it’s still not universal. By combining and recombining <code>1st</code> and <code>2nd</code> in different ways using <code>imp</code>, we’ll be able to reach only <img src="Exploring%20Universal%20Ternary%20Gates_files/quicklatex_011.png" class="ql-img-inline-formula " alt="18" title="Rendered by QuickLaTeX.com" style="vertical-align: -1px;" width="17" height="13"> functions. That’s a big improvement over <img src="Exploring%20Universal%20Ternary%20Gates_files/quicklatex_009.png" class="ql-img-inline-formula " alt="3" title="Rendered by QuickLaTeX.com" style="vertical-align: 0px;" width="9" height="12">, but nowhere near <img src="Exploring%20Universal%20Ternary%20Gates_files/quicklatex_002.png" class="ql-img-inline-formula " alt="19683" title="Rendered by QuickLaTeX.com" style="vertical-align: -1px;" width="44" height="13">.</p>
<p>Note that we could have used a trick to know immediately that <code>imp</code> was not universal, without doing a breadth-first search of reachable functions. Knowing that <code>0 imp 0 = 0</code> is sufficient. It means there’s no way to escape to another value when both inputs are <code>0</code>, implying <code>imp</code> can never be used to compute a function like “always return <code>+</code>“.</p>
<h3>Generalizing Nand</h3>
<p>Let’s try one more gate. This time we’ll base it off of <code>nand</code>, hoping to “bring along the universal-ness” by starting from a universal gate from another logic. We’ll extend <code>nand</code>
 to ternary by interpreting its truth table as “True when inputs differ,
 else rotate to next value” and generalizing. I’ll arbitrarily call the 
resulting function <code>tand</code>:</p>
<p><img src="Exploring%20Universal%20Ternary%20Gates_files/quicklatex_015.png" class="ql-img-inline-formula " alt="\begin{tabular}{ c | c c c } tand &amp; + &amp; 0 &amp; -\\ \hline + &amp; - &amp; + &amp; + \\ 0 &amp; + &amp; + &amp; + \\ - &amp; + &amp; + &amp; 0 \\ \end{tabular}" title="Rendered by QuickLaTeX.com" style="vertical-align: -40px;" width="155" height="90"></p>
<p>Let’s experiment a bit. If we combine <code>1st</code> with itself, <code>tand</code> keeps getting matching inputs which it cycles from <img src="Exploring%20Universal%20Ternary%20Gates_files/quicklatex_003.png" class="ql-img-inline-formula " alt="-" title="Rendered by QuickLaTeX.com" style="vertical-align: 4px;" width="12" height="1"> to <img src="Exploring%20Universal%20Ternary%20Gates_files/quicklatex_027.png" class="ql-img-inline-formula " alt="0" title="Rendered by QuickLaTeX.com" style="vertical-align: 0px;" width="9" height="12"> to <img src="Exploring%20Universal%20Ternary%20Gates_files/quicklatex_017.png" class="ql-img-inline-formula " alt="+" title="Rendered by QuickLaTeX.com" style="vertical-align: -1px;" width="13" height="12"> and back. So we end up “incrementing” the first input:</p>
<p><img src="Exploring%20Universal%20Ternary%20Gates_files/quicklatex_026.png" class="ql-img-inline-formula " alt="\begin{tabular}{ c | c c c } 1st tand 1st &amp; + &amp; 0 &amp; -\\ \hline + &amp; + tand + &amp; + tand + &amp; + tand + \\ 0 &amp; 0 tand 0 &amp; 0 tand 0 &amp; 0 tand 0 \\ - &amp; - tand - &amp; - tand - &amp; - tand - \\ \end{tabular} = \begin{tabular}{ c | c c c } inc_1 &amp; + &amp; 0 &amp; -\\ \hline + &amp; - &amp; - &amp; - \\ 0 &amp; + &amp; + &amp; + \\ - &amp; 0 &amp; 0 &amp; 0 \\ \end{tabular}" title="Rendered by QuickLaTeX.com" style="vertical-align: -40px;" width="569" height="90"></p>
<p>Basically everything we try to combine right now is going to result in a new function. For example we can get <code>inc2</code> from <code>2nd tand 2nd</code>, we can get <code>dec1</code> from <code>inc1 tand inc1</code>, and we can get <code>all+</code> from <code>1st tand inc1</code>. With these in hand it’s a few short steps to gates whose output distinguishes one input from all the others:</p>
<p><img src="Exploring%20Universal%20Ternary%20Gates_files/quicklatex_024.png" class="ql-img-inline-formula " alt="\begin{tabular}{ c | c c c } tand tand all- &amp; + &amp; 0 &amp; -\\ \hline + &amp; - tand - &amp; + tand - &amp; + tand - \\ 0 &amp; + tand - &amp; + tand - &amp; + tand - \\ - &amp; + tand - &amp; + tand - &amp; 0 tand - \\ \end{tabular} = \begin{tabular}{ c | c c c }  &amp; + &amp; 0 &amp; -\\ \hline + &amp; 0 &amp; + &amp; + \\ 0 &amp; + &amp; + &amp; + \\ - &amp; + &amp; + &amp; + \\ \end{tabular}" title="Rendered by QuickLaTeX.com" style="vertical-align: -40px;" width="543" height="90"></p>
<p>and once you have gates like that you can start doing anything you want. It turns out that <code>tand</code> is in fact a universal gate.</p>
<p>That answers the original question: there are in fact universal ternary gates. I’m a bit curious how many, though.</p>
<h3>Universal Universality</h3>
<p>After I found <code>tand</code> I wrote code to find other universal ternary gates:</p>
<pre><code class="prettyprint"><span class="kwd">private</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="typ">IEnumerable</span><span class="pun">&lt;</span><span class="typ">TernaryGate</span><span class="pun">&gt;</span><span class="pln"> </span><span class="typ">UniversalGates</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="com">// hack: the hash code of a ternary gate is guaranteed to be under 2^18 and to not collide</span><span class="pln">
    </span><span class="com">// we take advantage of that to do known-result lookups faster</span><span class="pln">
    </span><span class="kwd">var</span><span class="pln"> tryIsUniveralByHash </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="kwd">bool</span><span class="pun">?[</span><span class="lit">1</span><span class="pln"> </span><span class="pun">&lt;&lt;</span><span class="pln"> </span><span class="lit">18</span><span class="pun">];</span><span class="pln">
            
    </span><span class="com">// optimization: having a known universal gate significantly speeds things up</span><span class="pln">
    </span><span class="com">// it allows the 'what can I reach?' to terminate as soon as the known gate is found</span><span class="pln">
    </span><span class="com">// instead of after ALL gates are found</span><span class="pln">
    tryIsUniveralByHash</span><span class="pun">[</span><span class="typ">Tand</span><span class="pun">.</span><span class="typ">GetHashCode</span><span class="pun">()]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">true</span><span class="pun">;</span><span class="pln">
            
    </span><span class="kwd">foreach</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">var</span><span class="pln"> candidate </span><span class="kwd">in</span><span class="pln"> </span><span class="typ">TernaryGate</span><span class="pun">.</span><span class="typ">All</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">tryIsUniveralByHash</span><span class="pun">[</span><span class="pln">candidate</span><span class="pun">.</span><span class="typ">GetHashCode</span><span class="pun">()].</span><span class="typ">HasValue</span><span class="pun">)</span><span class="pln"> </span><span class="kwd">continue</span><span class="pun">;</span><span class="pln">
                
        </span><span class="com">// if it turns out that this candidate is not universal</span><span class="pln">
        </span><span class="com">// then all of the gates it reached also can't be universal</span><span class="pln">
        </span><span class="com">// so we track them to be marked in that case</span><span class="pln">
        </span><span class="kwd">var</span><span class="pln"> weakGates </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">List</span><span class="pun">&lt;</span><span class="typ">TernaryGate</span><span class="pun">&gt;</span><span class="pln"> </span><span class="pun">{</span><span class="pln">candidate</span><span class="pun">};</span><span class="pln">

        </span><span class="kwd">var</span><span class="pln"> reachedCount </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln">
        </span><span class="kwd">foreach</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">var</span><span class="pln"> reachedGate </span><span class="kwd">in</span><span class="pln"> candidate</span><span class="pun">.</span><span class="typ">ReachableGates</span><span class="pun">())</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
            reachedCount </span><span class="pun">+=</span><span class="pln"> </span><span class="lit">1</span><span class="pun">;</span><span class="pln">

            </span><span class="kwd">var</span><span class="pln"> tryIsUniversal </span><span class="pun">=</span><span class="pln"> tryIsUniveralByHash</span><span class="pun">[</span><span class="pln">reachedGate</span><span class="pun">.</span><span class="typ">GetHashCode</span><span class="pun">()];</span><span class="pln">
            </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">tryIsUniversal </span><span class="pun">==</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
                </span><span class="com">// if the candidate gate isn't universal, we learn this reached gate also isn't</span><span class="pln">
                weakGates</span><span class="pun">.</span><span class="typ">Add</span><span class="pun">(</span><span class="pln">reachedGate</span><span class="pun">);</span><span class="pln">
            </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">else</span><span class="pln"> </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">tryIsUniversal </span><span class="pun">==</span><span class="pln"> </span><span class="kwd">true</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
                </span><span class="com">// reaching a universal gate implies the candidate gate must be universal</span><span class="pln">
                reachedCount </span><span class="pun">=</span><span class="pln"> </span><span class="typ">TernaryGate</span><span class="pun">.</span><span class="typ">CountAll</span><span class="pun">;</span><span class="pln">
                </span><span class="kwd">break</span><span class="pun">;</span><span class="pln">
            </span><span class="pun">}</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">

        </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">reachedCount </span><span class="pun">==</span><span class="pln"> </span><span class="typ">TernaryGate</span><span class="pun">.</span><span class="typ">CountAll</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
            </span><span class="kwd">yield</span><span class="pln"> </span><span class="kwd">return</span><span class="pln"> candidate</span><span class="pun">;</span><span class="pln">
            tryIsUniveralByHash</span><span class="pun">[</span><span class="pln">candidate</span><span class="pun">.</span><span class="typ">GetHashCode</span><span class="pun">()]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">true</span><span class="pun">;</span><span class="pln">
        </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">else</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
            </span><span class="kwd">foreach</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">var</span><span class="pln"> gate </span><span class="kwd">in</span><span class="pln"> weakGates</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
                tryIsUniveralByHash</span><span class="pun">[</span><span class="pln">gate</span><span class="pun">.</span><span class="typ">GetHashCode</span><span class="pun">()]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">false</span><span class="pun">;</span><span class="pln">
            </span><span class="pun">}</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code></pre>
<p>(<a href="https://github.com/Strilanc/UniversalTernaryGates">Complete source is on github</a>. I also brute force double-checked that <code>tand</code> was a universal gate.)</p>
<p>It turns out that 3773 of the 19383 two-input ternary gates are universal.</p>
<p>Speculation time: It’s interesting that the proportion of ternary 
gates that are universal is much higher than the proportion of binary 
gates that are universal (about 19.5% vs 12.5%). I suspect that this 
trend continues; that the proportion of universal gates limits to 100% 
as the number of values in your logic increases. I think all you need 
for a gate to be universal is some way to convert each of the <img src="Exploring%20Universal%20Ternary%20Gates_files/quicklatex_014.png" class="ql-img-inline-formula " alt="n" title="Rendered by QuickLaTeX.com" style="vertical-align: 0px;" width="11" height="8"> values to and from two values that the gate acts on as if it was a <code>nand</code>. That’s <img src="Exploring%20Universal%20Ternary%20Gates_files/quicklatex_008.png" class="ql-img-inline-formula " alt="2n+4" title="Rendered by QuickLaTeX.com" style="vertical-align: -1px;" width="50" height="13"> constraints in a system with <img src="Exploring%20Universal%20Ternary%20Gates_files/quicklatex_020.png" class="ql-img-inline-formula " alt="n^2" title="Rendered by QuickLaTeX.com" style="vertical-align: 0px;" width="18" height="15">
 degrees of freedom, so it seems like the freedoms increase 
asymptotically faster and will result in almost all n-ary gates being 
universal.</p>
<p><strong>Update</strong>: Turns out the proportion of universal gates does not limit to 100%. It limits to <img src="Exploring%20Universal%20Ternary%20Gates_files/quicklatex_005.png" class="ql-img-inline-formula " alt="\frac{1}{e}" title="Rendered by QuickLaTeX.com" style="vertical-align: -6px;" width="7" height="22">.
  The fact that Euler’s constant shows up here is amazing. The reason it
 can’t be 100% is because, as I mentioned above, the gates must satisfy <img src="Exploring%20Universal%20Ternary%20Gates_files/quicklatex_021.png" class="ql-img-inline-formula " alt="f(x,x) \neq x" title="Rendered by QuickLaTeX.com" style="vertical-align: -4px;" width="86" height="18"> for each value <img src="Exploring%20Universal%20Ternary%20Gates_files/quicklatex_012.png" class="ql-img-inline-formula " alt="x" title="Rendered by QuickLaTeX.com" style="vertical-align: 0px;" width="10" height="8">. That decreases the maximum proportion of universal gates by a factor of <img src="Exploring%20Universal%20Ternary%20Gates_files/quicklatex_007.png" class="ql-img-inline-formula " alt="\frac{n-1}{n} = 1-\frac{1}{n}" title="Rendered by QuickLaTeX.com" style="vertical-align: -6px;" width="93" height="22"> for each of the <img src="Exploring%20Universal%20Ternary%20Gates_files/quicklatex_014.png" class="ql-img-inline-formula " alt="n" title="Rendered by QuickLaTeX.com" style="vertical-align: 0px;" width="11" height="8"> values. Counting all those up gives <img src="Exploring%20Universal%20Ternary%20Gates_files/quicklatex_006.png" class="ql-img-inline-formula " alt="\lim_{n \rightarrow \infty} (1-\frac{1}{n})^n = \frac{1}{e}" title="Rendered by QuickLaTeX.com" style="vertical-align: -6px;" width="160" height="22">, so clearly there can’t be more than <img src="Exploring%20Universal%20Ternary%20Gates_files/quicklatex_005.png" class="ql-img-inline-formula " alt="\frac{1}{e}" title="Rendered by QuickLaTeX.com" style="vertical-align: -6px;" width="7" height="22"> universal gates per gate. The concluding remarks in <a href="http://www.site.uottawa.ca/%7Eivan/F07-sheffer-DAM.PDF">this paper</a> casually mentions that the answer is in fact <img src="Exploring%20Universal%20Ternary%20Gates_files/quicklatex_005.png" class="ql-img-inline-formula " alt="\frac{1}{e}" title="Rendered by QuickLaTeX.com" style="vertical-align: -6px;" width="7" height="22"> (unfortunately, I can’t access the papers it references for that result).</p>
<h3>Summary</h3>
<p>A universal gate can emulate any other gate.</p>
<p>You can think of gates in a circuit as producing new functions over the circuit’s inputs.</p>
<p>The following is a universal gate for three-valued logic:</p>
<p><img src="Exploring%20Universal%20Ternary%20Gates_files/quicklatex_015.png" class="ql-img-inline-formula " alt="\begin{tabular}{ c | c c c } tand &amp; + &amp; 0 &amp; -\\ \hline + &amp; - &amp; + &amp; + \\ 0 &amp; + &amp; + &amp; + \\ - &amp; + &amp; + &amp; 0 \\ \end{tabular}" title="Rendered by QuickLaTeX.com" style="vertical-align: -40px;" width="155" height="90"></p>
<p>Universal gates are not scarce.</p>
<p>—</p>
<h3><a href="http://www.reddit.com/r/programming/comments/1qza8t/exploring_universal_ternary_gates/">Discuss on Reddit</a></h3>
<p>—</p>
<h3>My Twitter: <a href="https://twitter.com/CraigGidney">@CraigGidney</a></h3>
<p>—</p>

<blockquote><p>


</p><div id="disqus_thread"><iframe verticalscrolling="no" horizontalscrolling="no" src="Exploring%20Universal%20Ternary%20Gates_files/a.htm" style="width: 100% ! important; border: medium none ! important; overflow: hidden ! important; height: 346px ! important;" role="complementary" allowtransparency="true" data-disqus-uid="2" id="dsq-2" scrolling="no" width="100%" frameborder="0"></iframe></div>

<script type="text/javascript">
/* <![CDATA[ */
    var disqus_url = 'http://twistedoakstudios.com/blog/Post7878_exploring-universal-ternary-gates';
    var disqus_identifier = '7878 http://twistedoakstudios.com/blog/?p=7878';
    var disqus_container_id = 'disqus_thread';
    var disqus_domain = 'disqus.com';
    var disqus_shortname = 'twistedoakstudios';
    var disqus_title = "Exploring Universal Ternary Gates";
        var disqus_config = function () {
        var config = this; // Access to the config object
        config.language = '';

        /*
           All currently supported events:
            * preData — fires just before we request for initial data
            * preInit - fires after we get initial data but before we load any dependencies
            * onInit  - fires when all dependencies are resolved but before dtpl template is rendered
            * afterRender - fires when template is rendered but before we show it
            * onReady - everything is done
         */

        config.callbacks.preData.push(function() {
            // clear out the container (its filled for SEO/legacy purposes)
            document.getElementById(disqus_container_id).innerHTML = '';
        });
                config.callbacks.onReady.push(function() {
            // sync comments in the background so we don't block the page
            var script = document.createElement('script');
            script.async = true;
            script.src = '?cf_action=sync_comments&post_id=7878';

            var firstScript = document.getElementsByTagName( "script" )[0];
            firstScript.parentNode.insertBefore(script, firstScript);
        });
                    };
/* ]]> */
</script>

<script type="text/javascript">
/* <![CDATA[ */
    var DsqLocal = {
        'trackbacks': [
        ],
        'trackback_url': "http:\/\/twistedoakstudios.com\/blog\/Post7878_exploring-universal-ternary-gates\/trackback"    };
/* ]]> */
</script>

<script type="text/javascript">
/* <![CDATA[ */
(function() {
    var dsq = document.createElement('script'); dsq.type = 'text/javascript';
    dsq.async = true;
    dsq.src = '//' + disqus_shortname + '.' + 'disqus.com' + '/embed.js?pname=wordpress&pver=2.74';
    (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
})();
/* ]]> */
</script>

<h3>
<spacer>
</spacer></h3>

<span style="color:#4A9EC2"><em><br>
Twisted Oak Studios offers consulting and development on high-tech interactive projects. Check out our <a href="http://twistedoakstudios.com/portfolio/">portfolio</a>, or <a href="mailto:contact@twistedoakstudios.com">Give us a shout</a> if you have anything you think some really rad engineers should help you with.<br>
</em></span>
<p></p></blockquote>

<h2 class="endofpage">Archive</h2>
<p></p><ul>
     <li><a href="http://twistedoakstudios.com/blog/Post8147_referencing-substrings-faster-without-leaking-memory" rel="bookmark" title="Permanent Link to Referencing Substrings Faster, without Leaking Memory">Referencing Substrings Faster, without Leaking Memory</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post8000_not-crying-over-old-code" rel="bookmark" title="Permanent Link to Not Crying Over Old Code">Not Crying Over Old Code</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post7878_exploring-universal-ternary-gates" rel="bookmark" title="Permanent Link to Exploring Universal Ternary Gates">Exploring Universal Ternary Gates</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post7748_impractical-experiments-2-securing-peer-to-peer-fog-of-war-against-map-hacks" rel="bookmark" title="Permanent Link to Impractical Experiments #2: Securing Peer to Peer Fog of War against Map Hacks">Impractical Experiments #2: Securing Peer to Peer Fog of War against Map Hacks</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post7694_achieving-exponential-slowdown-by-enumerating-twice" rel="bookmark" title="Permanent Link to Achieving Exponential Slowdown by Enumerating Twice">Achieving Exponential Slowdown by Enumerating Twice</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post7525_using-immortality-to-kill-accidental-callback-cycles" rel="bookmark" title="Permanent Link to Using Immortality to Kill Accidental Callback Cycles">Using Immortality to Kill Accidental Callback Cycles</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post7391_cancellation-tokens-and-collapsing-futures-for-objective-c" rel="bookmark" title="Permanent Link to Cancellation Tokens (and Collapsing Futures) for Objective-C">Cancellation Tokens (and Collapsing Futures) for Objective-C</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post7254_visualizing-the-eigenvectors-of-a-rotation" rel="bookmark" title="Permanent Link to Visualizing the Eigenvectors of a Rotation">Visualizing the Eigenvectors of a Rotation</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post7149_collapsing-futures-in-objective-c" rel="bookmark" title="Permanent Link to Collapsing Futures in Objective-C">Collapsing Futures in Objective-C</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post7052_bug-hunting-1-garbled-audio-from-end-to-end" rel="bookmark" title="Permanent Link to Bug Hunting #1: Garbled Audio from End to End">Bug Hunting #1: Garbled Audio from End to End</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post6871_impractical-experiments-1-representing-numbers-as-polynomials" rel="bookmark" title="Permanent Link to Impractical Experiments #1: Representing Numbers as Polynomials">Impractical Experiments #1: Representing Numbers as Polynomials</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post6536_implementing-quantum-pseudo-telepathy" rel="bookmark" title="Permanent Link to Implementing Quantum Pseudo-Telepathy">Implementing Quantum Pseudo-Telepathy</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post6422_turn-on-your-damn-warnings" rel="bookmark" title="Permanent Link to Turn On Your Damn Warnings">Turn On Your Damn Warnings</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post5953_big-o-made-trivial" rel="bookmark" title="Permanent Link to Big-O Made Trivial">Big-O Made Trivial</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post5268_unfathomable-bugs-7-the-broken-oven" rel="bookmark" title="Permanent Link to Unfathomable Bugs #7: The Broken Oven">Unfathomable Bugs #7: The Broken Oven</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post5623_solomonoffs-mad-scientist" rel="bookmark" title="Permanent Link to Solomonoff’s Mad Scientist">Solomonoff’s Mad Scientist</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post5753_yearly-blogging-roundup-1" rel="bookmark" title="Permanent Link to Yearly Blogging Roundup #1">Yearly Blogging Roundup #1</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post5485_what-isnt-a-monad" rel="bookmark" title="Permanent Link to What isn’t a Monad">What isn’t a Monad</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post5365_searching-a-sorted-matrix-faster" rel="bookmark" title="Permanent Link to Searching a Sorted Matrix Faster">Searching a Sorted Matrix Faster</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post5273_how-to-read-nested-ternary-operators" rel="bookmark" title="Permanent Link to How to Read Nested Ternary Operators">How to Read Nested Ternary Operators</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post5204_making-sublime-text-2-jump-to-the-correct-line-with-unity-on-os-x" rel="bookmark" title="Permanent Link to Making Sublime Text 2 Jump to the Correct Line with Unity on OS X">Making Sublime Text 2 Jump to the Correct Line with Unity on OS X</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post5096_my-bug-my-bad-4-reading-concurrently" rel="bookmark" title="Permanent Link to My Bug, My Bad #4: Reading Concurrently">My Bug, My Bad #4: Reading Concurrently</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post5018_whole-api-testing-with-reflection" rel="bookmark" title="Permanent Link to Whole API Testing with Reflection">Whole API Testing with Reflection</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post4708_optimizing-a-parser-combinator-into-a-memcpy" rel="bookmark" title="Permanent Link to Optimizing a Parser Combinator into a memcpy">Optimizing a Parser Combinator into a memcpy</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post4872_dont-treat-paths-like-strings" rel="bookmark" title="Permanent Link to Don’t Treat Paths Like Strings">Don’t Treat Paths Like Strings</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post4706_breaking-a-toy-hash-function" rel="bookmark" title="Permanent Link to Breaking a Toy Hash Function">Breaking a Toy Hash Function</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post4425_counting-iterators-lazily" rel="bookmark" title="Permanent Link to Counting Iterators Lazily">Counting Iterators Lazily</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post4428_unfathomable-bugs-6-pretend-precision" rel="bookmark" title="Permanent Link to Unfathomable Bugs #6: Pretend Precision">Unfathomable Bugs #6: Pretend Precision</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post4281_my-bug-my-bad-3-accidentally-attacking-warcraft-3" rel="bookmark" title="Permanent Link to My Bug, My Bad #3: Accidentally Attacking WarCraft 3">My Bug, My Bad #3: Accidentally Attacking WarCraft 3</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post4130_collapsing-types-vs-monads-followup" rel="bookmark" title="Permanent Link to Collapsing Types vs Monads (followup)">Collapsing Types vs Monads (followup)</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post4008_collapsing-futures-easy-to-use-hard-to-represent" rel="bookmark" title="Permanent Link to Collapsing Futures: Easy to Use, Hard to Represent">Collapsing Futures: Easy to Use, Hard to Represent</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post3858_eventual-exceptions-vs-programming-in-a-minimal-functional-style" rel="bookmark" title="Permanent Link to Eventual Exceptions vs Programming in a Minimal Functional Style">Eventual Exceptions vs Programming in a Minimal Functional Style</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post3769_the-mystery-of-flunf" rel="bookmark" title="Permanent Link to The Mystery of Flunf">The Mystery of Flunf</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post3724_explain-it-like-im-five-the-socialist-millionaire-problem-and-secure-multi-party-computation" rel="bookmark" title="Permanent Link to Explain it like I’m Five: The Socialist Millionaire Problem and Secure Multi-Party Computation">Explain it like I’m Five: The Socialist Millionaire Problem and Secure Multi-Party Computation</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post3631_computer-science-blows-my-mind" rel="bookmark" title="Permanent Link to Computer Science Blows My Mind">Computer Science Blows My Mind</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post3484_a-visit-to-execution-labs-in-montreal" rel="bookmark" title="Permanent Link to A visit to Execution Labs in Montréal">A visit to Execution Labs in Montréal</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post3573_transmuting-dice-conserving-entropy" rel="bookmark" title="Permanent Link to Transmuting Dice, Conserving Entropy">Transmuting Dice, Conserving Entropy</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post3516_rule-of-thumb-ask-for-the-clock" rel="bookmark" title="Permanent Link to Rule of Thumb: Ask for the Clock">Rule of Thumb: Ask for the Clock</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post3477_rule-of-thumb-use-purposefully-weakened-methods" rel="bookmark" title="Permanent Link to Rule of Thumb: Use Purposefully Weakened Methods">Rule of Thumb: Use Purposefully Weakened Methods</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post3376_rule-of-thumb-preconditions-should-be-checked-explicitly" rel="bookmark" title="Permanent Link to Rule of thumb: Preconditions Should be Checked Explicitly">Rule of thumb: Preconditions Should be Checked Explicitly</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post3280_intersecting-linked-lists-faster" rel="bookmark" title="Permanent Link to Intersecting Linked Lists Faster">Intersecting Linked Lists Faster</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post3138_mouse-path-smoothing-for-jack-lumber" rel="bookmark" title="Permanent Link to Mouse Path Smoothing for Jack Lumber">Mouse Path Smoothing for Jack Lumber</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post3044_my-bug-my-bad-2-sunk-by-float" rel="bookmark" title="Permanent Link to My Bug, My Bad #2: Sunk by Float">My Bug, My Bad #2: Sunk by Float</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post2852_repeat-yourself-differently" rel="bookmark" title="Permanent Link to Repeat Yourself Differently">Repeat Yourself Differently</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post2644_grovers-quantum-search-algorithm" rel="bookmark" title="Permanent Link to Grover’s Quantum Search Algorithm">Grover’s Quantum Search Algorithm</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post2766_followup-to-non-nullable-types-vs-c" rel="bookmark" title="Permanent Link to Followup to Non-Nullable Types vs C#">Followup to Non-Nullable Types vs C#</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post2540_optimizing-just-in-time-with-expression-trees" rel="bookmark" title="Permanent Link to Optimizing Just in Time with Expression Trees">Optimizing Just in Time with Expression Trees</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post2353_when-one-way-latency-doesnt-matter" rel="bookmark" title="Permanent Link to When One-Way Latency Doesn’t Matter">When One-Way Latency Doesn’t Matter</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post2194_determining-exactly-ifwhenwhere-a-moving-line-intersected-a-moving-point" rel="bookmark" title="Permanent Link to Determining exactly if/when/where a moving line intersected a moving point">Determining exactly if/when/where a moving line intersected a moving point</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post2061_emulating-actors-in-c-with-asyncawait" rel="bookmark" title="Permanent Link to Emulating Actors in C# with Async/Await">Emulating Actors in C# with Async/Await</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post2096_making-an-immutable-queue-with-guaranteed-constant-time-operations" rel="bookmark" title="Permanent Link to Making an immutable queue with guaranteed constant time operations">Making an immutable queue with guaranteed constant time operations</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post399_improving-checked-exceptions" rel="bookmark" title="Permanent Link to Improving Checked Exceptions">Improving Checked Exceptions</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post1941_perishable-collections-the-benefits-of-removal-by-lifetime" rel="bookmark" title="Permanent Link to Perishable Collections: The Benefits of Removal-by-Lifetime">Perishable Collections: The Benefits of Removal-by-Lifetime</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post1823_decoupling-shared-control" rel="bookmark" title="Permanent Link to Decoupling shared control">Decoupling shared control</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post1694_decoupling-inlined-ui-code" rel="bookmark" title="Permanent Link to Decoupling inlined UI code">Decoupling inlined UI code</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post1585_linq-to-collections-beyond-ienumerablet" rel="bookmark" title="Permanent Link to Linq to Collections: Beyond IEnumerable&lt;T&gt;">Linq to Collections: Beyond IEnumerable&lt;T&gt;</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post1295_publish-your-net-library-as-a-nuget-package" rel="bookmark" title="Permanent Link to Publish your .Net library as a NuGet package">Publish your .Net library as a NuGet package</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post1130_when-null-is-not-enough-an-option-type-for-c" rel="bookmark" title="Permanent Link to When null is not enough: an option type for C#">When null is not enough: an option type for C#</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post1473_unfathomable-bugs-5-readonly-or-not" rel="bookmark" title="Permanent Link to Unfathomable Bugs #5: Readonly or not">Unfathomable Bugs #5: Readonly or not</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post667_minkowski-sums-examples" rel="bookmark" title="Permanent Link to Minkowski sums: examples">Minkowski sums: examples</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post1080_my-bug-my-bad-1-fractal-spheres" rel="bookmark" title="Permanent Link to My Bug, My Bad #1: Fractal Spheres">My Bug, My Bad #1: Fractal Spheres</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post1007_working-around-the-brittle-ui-virtualization-in-windows-8" rel="bookmark" title="Permanent Link to Working around the brittle UI Virtualization in Windows 8">Working around the brittle UI Virtualization in Windows 8</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post938_encapsulating-angles" rel="bookmark" title="Permanent Link to Encapsulating Angles">Encapsulating Angles</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post925_unfathomable-bugs-4-keys-that-arent" rel="bookmark" title="Permanent Link to Unfathomable Bugs #4: Keys that aren’t">Unfathomable Bugs #4: Keys that aren’t</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post867_how-would-i-even-use-a-monad-in-c" rel="bookmark" title="Permanent Link to How would I even use a monad (in C#)?">How would I even use a monad (in C#)?</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post822_useful-methods-1-observable-wheneach" rel="bookmark" title="Permanent Link to Useful/Interesting Methods #1: Observable.WhenEach">Useful/Interesting Methods #1: Observable.WhenEach</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post818_unfathomable-bugs-3-stringing-you-along" rel="bookmark" title="Permanent Link to Unfathomable Bugs #3: Stringing you along">Unfathomable Bugs #3: Stringing you along</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post774_anonymous-implementation-classes-a-design-pattern-for-c" rel="bookmark" title="Permanent Link to Anonymous Implementation Classes – A Design Pattern for C#">Anonymous Implementation Classes – A Design Pattern for C#</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post532_tasks-for-action-script-3" rel="bookmark" title="Permanent Link to Tasks for ActionScript 3 – Improving on Event-Driven Programming">Tasks for ActionScript 3 – Improving on Event-Driven Programming</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post554_minkowski-sums-and-differences" rel="bookmark" title="Permanent Link to Minkowski sums and differences">Minkowski sums and differences</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post330_non-nullable-types-vs-c-fixing-the-billion-dollar-mistake" rel="bookmark" title="Permanent Link to Non-Nullable Types vs C#: Fixing the Billion Dollar Mistake">Non-Nullable Types vs C#: Fixing the Billion Dollar Mistake</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post384_unfathomable-bugs-2-slashing-out" rel="bookmark" title="Permanent Link to Unfathomable Bugs #2: Slashing Out">Unfathomable Bugs #2: Slashing Out</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post404_script-templates-and-base-classes" rel="bookmark" title="Permanent Link to Script templates and base classes">Script templates and base classes</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post373_unity-font-extraction" rel="bookmark" title="Permanent Link to Unity font extraction">Unity font extraction</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post341_abusing-phantom-types-to-encode-list-lengths-into-their-type" rel="bookmark" title="Permanent Link to Abusing “Phantom Types” to Encode List Lengths Into Their Type">Abusing “Phantom Types” to Encode List Lengths Into Their Type</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post261_constructive-criticism-of-the-reactive-extensions-api" rel="bookmark" title="Permanent Link to Constructive Criticism of the Reactive Extensions API">Constructive Criticism of the Reactive Extensions API</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post241_quaternions-part-3-2" rel="bookmark" title="Permanent Link to Quaternions part 3">Quaternions part 3</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post204_quaternions-part-2" rel="bookmark" title="Permanent Link to Quaternions part 2">Quaternions part 2</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post144_quaternions-part-1" rel="bookmark" title="Permanent Link to Quaternions part 1">Quaternions part 1</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post157_unfathomable-bugs-1-you-can-have-things-you-can-have-things-in-things-you-can-have" rel="bookmark" title="Permanent Link to Unfathomable Bugs #1: You can have things! You can have things IN things! You can have …">Unfathomable Bugs #1: You can have things! You can have things IN things! You can have …</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post83_coroutines-more-than-you-want-to-know" rel="bookmark" title="Permanent Link to Coroutines – More than you want to know">Coroutines – More than you want to know</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post74_asset-bundle-helper" rel="bookmark" title="Permanent Link to Asset Bundle Helper">Asset Bundle Helper</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post60_the-visual-studio-goes-away" rel="bookmark" title="Permanent Link to The Visual Studio goes away">The Visual Studio goes away</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post57_nets-time-traveling-stopwatch" rel="bookmark" title="Permanent Link to .Net’s time traveling StopWatch">.Net’s time traveling StopWatch</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post29_introducing-catalyst" rel="bookmark" title="Permanent Link to Introducing Catalyst">Introducing Catalyst</a></li>
  </ul>
<p></p>


			</div><!-- #content -->
			</section>

			</div>
		</div><!-- #container -->


</span></div><!-- .container -->

 <div id="upprev_box" style="right: -400px;">
	<h6>
		More interesting posts <span class="num"> (1 of 11 articles)</span>
	</h6>
	<div class="upprev_excerpt">
		<p>
			<a href="http://twistedoakstudios.com/blog/Post6871_impractical-experiments-1-representing-numbers-as-polynomials" rel="prev">Impractical Experiments #1: Representing Numbers as Polynomials</a>
		</p>
	</div>
	
		<p>
Or check out our <a href="http://twistedoakstudios.com/portfolio">Portfolio</a>.		</p><button id="upprev_close" type="button">Close</button>
</div><!-- #upprev_box -->
<link rel="stylesheet" id="al2fb_style-css" href="Exploring%20Universal%20Ternary%20Gates_files/add-link-to-facebook.css" type="text/css" media="all">
<link rel="stylesheet" id="admin-bar-css" href="Exploring%20Universal%20Ternary%20Gates_files/admin-bar.css" type="text/css" media="all">
<link rel="stylesheet" id="upprev-css-css" href="Exploring%20Universal%20Ternary%20Gates_files/upprev.css" type="text/css" media="all">
<link rel="stylesheet" id="wp-quicklatex-format-css" href="Exploring%20Universal%20Ternary%20Gates_files/quicklatex-format.css" type="text/css" media="all">
<script type="text/javascript" src="Exploring%20Universal%20Ternary%20Gates_files/admin-bar.js"></script>
<script type="text/javascript" src="Exploring%20Universal%20Ternary%20Gates_files/jquery.js"></script>
<script type="text/javascript" src="Exploring%20Universal%20Ternary%20Gates_files/upprev_js.php"></script>
<script type="text/javascript" src="Exploring%20Universal%20Ternary%20Gates_files/comment-reply.js"></script>
	<script type="text/javascript">
		(function() {
			var request, b = document.body, c = 'className', cs = 'customize-support', rcs = new RegExp('(^|\\s+)(no-)?'+cs+'(\\s+|$)');

			request = true;

			b[c] = b[c].replace( rcs, ' ' );
			b[c] += ( window.postMessage && request ? ' ' : ' no-' ) + cs;
		}());
	</script>
			

		 
<!-- BEGIN footer-type stuff -->
<div class="container footer-container">
	<div class="row">
		
		<div class="fourcol last"><!-- .last b/c it's floated right -->
      <!-- home portfolio used to be here -->
		</div>

		<div class="eightcol" id="contact">
			<p>Twisted Oak Studios<br>
				138-1657 Barrington St.<br>
				Halifax, NS, Canada B3J 2A1</p>
			
			<p>001-902-237-7326<br>
			<a href="mailto:contact@twistedoakstudios.com">contact@twistedoakstudios.com</a></p>
		</div>

		<div class="twelvecol">
			<footer>
				<small>©2012
					<script>
						var d=new Date(); 
						yr=d.getFullYear();
						if (yr!=2012)
						document.write("- "+yr);
					</script>- 2013 Twisted Oak Studios Ltd. -- All Rights Reserved -- All images and logos are property of their respective owners.
				</small>
			</footer>
		</div>
		
		
	</div><!-- .row -->
</div><!-- .container -->
<!-- END footer stuff-->

<!-- jQuery and scrolly script for contact link -->
<script src="Exploring%20Universal%20Ternary%20Gates_files/jquery_002.js"></script>
  <script>window.jQuery || document.write('<script src="../js/libs/jquery-1.6.2.min.js"><\/script>')</script>

<script src="Exploring%20Universal%20Ternary%20Gates_files/scrolly.js"></script>


  <!-- Don't forget Analytics! -->



  <!-- Prompt IE 6 users to install Chrome Frame. Remove this if you want to support IE 6.
       chromium.org/developers/how-tos/chrome-frame-getting-started -->
  <!--[if lt IE 7 ]>
    <script src="//ajax.googleapis.com/ajax/libs/chrome-frame/1.0.3/CFInstall.min.js"></script>
    <script>window.attachEvent('onload',function(){CFInstall.check({mode:'overlay'})})</script>
  <![endif]-->
  


<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-31441525-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>
<div id="wpadminbar" class="nojq " role="navigation">
			<a class="screen-reader-shortcut" href="#wp-toolbar" tabindex="1">Skip to toolbar</a>
			<div class="quicklinks" id="wp-toolbar" role="navigation" aria-label="Top navigation toolbar." tabindex="0">
				<ul id="wp-admin-bar-root-default" class="ab-top-menu">
		<li id="wp-admin-bar-wp-logo" class="menupop"><a class="ab-item" aria-haspopup="true" href="http://twistedoakstudios.com/blog/wp-admin/about.php" title="About WordPress"><span class="ab-icon"></span></a><div class="ab-sub-wrapper"><ul id="wp-admin-bar-wp-logo-default" class="ab-submenu">
		<li id="wp-admin-bar-about"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/about.php">About WordPress</a>		</li></ul><ul id="wp-admin-bar-wp-logo-external" class="ab-sub-secondary ab-submenu">
		<li id="wp-admin-bar-wporg"><a class="ab-item" href="http://wordpress.org/">WordPress.org</a>		</li>
		<li id="wp-admin-bar-documentation"><a class="ab-item" href="http://codex.wordpress.org/">Documentation</a>		</li>
		<li id="wp-admin-bar-support-forums"><a class="ab-item" href="http://wordpress.org/support/">Support Forums</a>		</li>
		<li id="wp-admin-bar-feedback"><a class="ab-item" href="http://wordpress.org/support/forum/requests-and-feedback">Feedback</a>		</li></ul></div>		</li>
		<li id="wp-admin-bar-site-name" class="menupop"><a class="ab-item" aria-haspopup="true" href="http://twistedoakstudios.com/blog/wp-admin/">Twisted Oak Studios Blog</a><div class="ab-sub-wrapper"><ul id="wp-admin-bar-site-name-default" class="ab-submenu">
		<li id="wp-admin-bar-dashboard"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/">Dashboard</a>		</li></ul><ul id="wp-admin-bar-appearance" class="ab-submenu">
		<li id="wp-admin-bar-themes"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/themes.php">Themes</a>		</li>
		<li id="wp-admin-bar-customize" class="hide-if-no-customize"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/customize.php?url=http%3A%2F%2Ftwistedoakstudios.com%2Fblog%2FPost7878_exploring-universal-ternary-gates">Customize</a>		</li></ul></div>		</li>
		<li id="wp-admin-bar-updates"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/update-core.php" title="3 Plugin Updates, 3 Theme Updates"><span class="ab-icon"></span><span class="ab-label">6</span><span class="screen-reader-text">3 Plugin Updates, 3 Theme Updates</span></a>		</li>
		<li id="wp-admin-bar-comments"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/edit-comments.php" title="0 comments awaiting moderation"><span class="ab-icon"></span><span id="ab-awaiting-mod" class="ab-label awaiting-mod pending-count count-0">0</span></a>		</li>
		<li id="wp-admin-bar-new-content" class="menupop"><a class="ab-item" aria-haspopup="true" href="http://twistedoakstudios.com/blog/wp-admin/post-new.php" title="Add New"><span class="ab-icon"></span><span class="ab-label">New</span></a><div class="ab-sub-wrapper"><ul id="wp-admin-bar-new-content-default" class="ab-submenu">
		<li id="wp-admin-bar-new-post"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/post-new.php">Post</a>		</li>
		<li id="wp-admin-bar-new-media"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/media-new.php">Media</a>		</li>
		<li id="wp-admin-bar-new-link"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/link-add.php">Link</a>		</li>
		<li id="wp-admin-bar-new-page"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/post-new.php?post_type=page">Page</a>		</li>
		<li id="wp-admin-bar-new-user"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/user-new.php">User</a>		</li></ul></div>		</li>
		<li id="wp-admin-bar-edit"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/post.php?post=7878&amp;action=edit">Edit Post</a>		</li></ul><ul id="wp-admin-bar-top-secondary" class="ab-top-secondary ab-top-menu">
		<li id="wp-admin-bar-search" class="admin-bar-search"><div class="ab-item ab-empty-item" tabindex="-1"><form action="http://twistedoakstudios.com/blog/" method="get" id="adminbarsearch"><input class="adminbar-input" name="s" id="adminbar-search" maxlength="150" type="text"><input class="adminbar-button" value="Search" type="submit"></form></div>		</li>
		<li id="wp-admin-bar-my-account" class="menupop with-avatar"><a class="ab-item" aria-haspopup="true" href="http://twistedoakstudios.com/blog/wp-admin/profile.php" title="My Account">Howdy, Craig Gidney<img alt="" src="Exploring%20Universal%20Ternary%20Gates_files/31a6ce579f8f9f9d528715d1e941726e.png" class="avatar avatar-16 photo" width="16" height="16"></a><div class="ab-sub-wrapper"><ul id="wp-admin-bar-user-actions" class="ab-submenu">
		<li id="wp-admin-bar-user-info"><a class="ab-item" tabindex="-1" href="http://twistedoakstudios.com/blog/wp-admin/profile.php"><img alt="" src="Exploring%20Universal%20Ternary%20Gates_files/31a6ce579f8f9f9d528715d1e941726e_002.png" class="avatar avatar-64 photo" width="64" height="64"><span class="display-name">Craig Gidney</span><span class="username">craig</span></a>		</li>
		<li id="wp-admin-bar-edit-profile"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/profile.php">Edit My Profile</a>		</li>
		<li id="wp-admin-bar-logout"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-login.php?action=logout&amp;_wpnonce=8f8dfa30f4">Log Out</a>		</li></ul></div>		</li></ul>			</div>
			<a class="screen-reader-shortcut" href="http://twistedoakstudios.com/blog/wp-login.php?action=logout&amp;_wpnonce=8f8dfa30f4">Log Out</a>
		</div></body></html>