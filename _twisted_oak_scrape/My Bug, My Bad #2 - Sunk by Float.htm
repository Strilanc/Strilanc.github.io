<!DOCTYPE html>
<!-- paulirish.com/2008/conditional-stylesheets-vs-css-hacks-answer-neither/ -->
<!--[if lt IE 7]> <html class="no-js ie6 oldie" lang="en"> <![endif]-->
<!--[if IE 7]>    <html class="no-js ie7 oldie" lang="en"> <![endif]-->
<!--[if IE 8]>    <html class="no-js ie8 oldie" lang="en"> <![endif]-->
<!-- Consider adding an manifest.appcache: h5bp.com/d/Offline -->
<!--[if gt IE 8]><!-->
<html class=" js flexbox canvas canvastext webgl no-touch geolocation postmessage no-websqldatabase indexeddb hashchange history draganddrop websockets rgba hsla multiplebgs backgroundsize borderimage borderradius boxshadow textshadow opacity cssanimations csscolumns cssgradients no-cssreflections csstransforms csstransforms3d csstransitions fontface generatedcontent video audio localstorage sessionstorage webworkers applicationcache svg inlinesvg smil svgclippaths" xmlns="http://www.w3.org/1999/xhtml" xmlns:og="http://ogp.me/ns#" xmlns:fb="https://www.facebook.com/2008/fbml" lang="en"><script id="bug.surrogate">var urchinTracker=function(){},_gaq={push:function(){try {if(arguments[0][0]=='_link')window.location.href=arguments[0][1]}catch(er){}}},_gat={_createTracker:function(){}, _getTracker:function(){return{__noSuchMethod__:function(){},_link:function(o){if(o)location.href=o;},_linkByPost:function(){return true;},_getLinkerUrl:function(o){return o;},_trackEvent:function(){}}}}; if (document.location.host == 'www.salon.com') {var _ga_ = document.querySelectorAll('script[src$=ga\\.js]')[0], ga_e = document.createEvent('Event'); ga_e.initEvent('load', true, true);_ga_.dispatchEvent(ga_e);}</script><!--<![endif]--><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
  <meta charset="utf-8">
   <!-- blog feed link -->
  <link href="http://twistedoakstudios.com/blog/?feed=rss" rel="alternate" type="application/rss+xml" title="Twisted Oak Studios Blog">

  <!-- Use the .htaccess and remove these lines to avoid edge case issues.
       More info: h5bp.com/b/378 -->
  <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">

  <title>Twisted Oak Studios | Unity3D Consulting | Technical Magic</title>
  <meta name="description" content="As a lean co-operative team of seasoned developers, Twisted Oak is able to offer efficient, flexible remote and on-the-floor development and consulting without any middle-man or excessive administrivia.">
  <meta name="author" content="/humans.txt">

  <meta name="viewport" content="width=device-width,initial-scale=1">

  <link rel="shortcut icon" href="http://twistedoakstudios.com/blog/favicon.ico">
  <link rel="apple-touch-icon-precomposed" href="http://twistedoakstudios.com/blog/apple-touch-icon-precomposed.png">

  	<!-- The 1140px Grid - http://cssgrid.net/ -->
	<link rel="stylesheet" href="My%20Bug,%20My%20Bad%20%232%20-%20Sunk%20by%20Float_files/1140.css">
    <link rel="stylesheet" href="My%20Bug,%20My%20Bad%20%232%20-%20Sunk%20by%20Float_files/style.css">
    <link rel="stylesheet" href="My%20Bug,%20My%20Bad%20%232%20-%20Sunk%20by%20Float_files/blogstyle.css">
<link rel="stylesheet" href="My%20Bug,%20My%20Bad%20%232%20-%20Sunk%20by%20Float_files/prettify.css" media="all">
<link rel="stylesheet" href="My%20Bug,%20My%20Bad%20%232%20-%20Sunk%20by%20Float_files/sunburst.css" media="all">
<script type="text/javascript" src="My%20Bug,%20My%20Bad%20%232%20-%20Sunk%20by%20Float_files/prettify.js"></script>

	<!-- Webfonts! -->
	<link href="My%20Bug,%20My%20Bad%20%232%20-%20Sunk%20by%20Float_files/css.css" rel="stylesheet" type="text/css">

	<!-- Open Graph -->
	<meta property="og:title" content="Twisted Oak Studios">
	<meta property="og:type" content="company">
	<meta property="og:url" content="http://www.twistedoakstudios.com/">
	<meta property="og:image" content="http://www.twistedoakstudios.com/images/logo.png">
	<meta property="og:description" content="As a lean co-operative team of seasoned developers, Twisted Oak is able to offer efficient, flexible remote and on-the-floor development and consulting without any middle-man or excessive administrivia.">
  
  <script src="My%20Bug,%20My%20Bad%20%232%20-%20Sunk%20by%20Float_files/modernizr-2.js"></script>
</head>
<body class=" customize-support" onload="prettyPrint()">
<!-- begin header -->
<div class="container header-container">
	<div class="row">
		<header>
			<div class="threecol">
				<a href="#"><img class="logo" src="My%20Bug,%20My%20Bad%20%232%20-%20Sunk%20by%20Float_files/logo.png"></a>
			</div><!-- .threecol -->
		
			<div class="fourcol navcol">
				<nav>
					<ul class="primary-nav clearfix">
						<li><a href="http://twistedoakstudios.com/">Home</a></li>
						<li><a href="http://twistedoakstudios.com/portfolio/">Portfolio</a></li>
						<li><a href="http://twistedoakstudios.com/labs/">Labs</a></li>
						<li><a class="scroll" href="#contact">Contact</a></li>
						<li><a href="http://twistedoakstudios.com/blog/">Blog</a></li>
					</ul>
				</nav>
			</div>    

    	</header>
	</div><!-- .row -->
</div><!-- .container -->


	<div id="main">
<span class="blog">
<div class="container home-container" id="home">
	<div class="row">
		<section>
			
			<div class="ninecol">


<h2><a href="http://twistedoakstudios.com/blog/Post3044_my-bug-my-bad-2-sunk-by-float" rel="bookmark" title="Permanent Link to My Bug, My Bad #2: Sunk by Float">My Bug, My Bad #2: Sunk by Float</a></h2>
<div class="meta">posted by Craig Gidney on March 19, 2013</div>

<p>Last week I read a post that sparked my interest: Comparing an Integer With a Floating-Point Number (<a href="http://www.drdobbs.com/cpp/comparing-an-integer-with-a-floating-poi/240150323">Part 1</a>, <a href="http://www.drdobbs.com/cpp/comparing-an-integer-with-a-floating-poi/240150886">Part 2</a>).
 The problem from the post is interesting because a) it involves 
floating point numbers and b) neither type (32-bit integers, single 
precision floats) can represent all values of the other type (and you’re
 not allowed to cheat by casting to double).</p>
<p>The post starts solving the float/int comparison problem with an 
approach based on boundaries: find the smallest float guaranteed to be a
 whole number, do different things on either side of that boundary, etc.
 I find this distasteful because it screams “easy to get wrong and not 
realize it!”. You’re in danger of testing the wrong corner cases if you 
compute the wrong boundary value (i.e. it’s difficult to repeat yourself
 differently in the tests), so a mistake might go unnoticed.</p>
<p>I figured I would try to come up with a different approach, and I did:</p>
<pre><code class="prettyprint"><span class="kwd">bool</span><span class="pln"> </span><span class="typ">Equals</span><span class="pun">(</span><span class="kwd">int</span><span class="pln"> i</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">float</span><span class="pln"> f</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="com">// warning: this is wrong</span><span class="pln">
    </span><span class="kwd">float</span><span class="pln"> iToF </span><span class="pun">=</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">float</span><span class="pun">)</span><span class="pln">i</span><span class="pun">;</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">int</span><span class="pun">)</span><span class="pln">iToF </span><span class="pun">==</span><span class="pln"> i </span><span class="pun">&amp;&amp;</span><span class="pln"> f </span><span class="pun">==</span><span class="pln"> iToF</span><span class="pun">;</span><span class="pln">
</span><span class="pun">}</span></code></pre>
<p>The main idea behind the above code is that only integers that can be
 represented as floats will survive unchanged through a round-trip 
casting to float and back to int. If an integer can be represented as a 
float, then we can use its float version for the comparison. If an 
integer can’t be represented as a float, then there’s no way it’s equal 
to any float.</p>
<p>The other idea behind the above code is being <strong>horribly, terribly wrong</strong>.
 Wrong stacked on top of wrong stacked on top of even more wrong, in a 
never-ending cycle of pain and unreliable knowledge… but maybe I’m being
 a bit hard on myself. <a href="http://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html">Working with floating point numbers</a> is <a href="http://www.exploringbinary.com/why-volatile-fixes-the-2-2250738585072011e-308-bug/">notoriously difficult</a>, after all. Lets break down the issues in the above code.</p>
<h3>Wrong #1: Rounding out of range</h3>
<p>The code assumes round-tripping a 32-bit integer through float will 
give back a proper 32-bit integer. That’s actually not the case. For 
example, the maximum 32-bit signed integer is rounded <em>up</em> when you convert it to float: from <img src="My%20Bug,%20My%20Bad%20%232%20-%20Sunk%20by%20Float_files/quicklatex_006.png" class="ql-img-inline-formula " alt="2^{31}-1" title="Rendered by QuickLaTeX.com" style="vertical-align: -1px;" height="16" width="53"> to <img src="My%20Bug,%20My%20Bad%20%232%20-%20Sunk%20by%20Float_files/quicklatex.png" class="ql-img-inline-formula " alt="2^{31}" title="Rendered by QuickLaTeX.com" style="vertical-align: 0px;" height="15" width="22">. When you convert the float back to an Int32, it’s out of the valid range.</p>
<p>Bad things happen when you try to convert a too-large/out-of-range float into an int. <a href="http://stackoverflow.com/questions/3986795/casting-float-inf-to-integer">In C it’s undefined behavior</a>, which is <a href="http://blog.llvm.org/2011/05/what-every-c-programmer-should-know.html">very very bad</a>.
 Even in a “safe” language like C# the spec says the cast either throws 
an exception or returns an “unspecified value”, depending on if you’re 
in a checked or unchecked context.</p>
<p>Relying on undefined behavior or on an unspecified value is a great 
way to turn your code into a time bomb. Everyone loves wasting time 
figuring out why apparently working code broke when you started using a 
more recent compiler… right?</p>
<p>Before even getting into the muck of floating point precision, the 
code is wrong. The round-trip might fail more than it should. On the 
other hand, a few ‘is it in range?’ checks could bypass this problem. 
The wrong goes so much deeper.</p>
<h3>Wrong #2: Precision</h3>
<p>The code assumes floats have a fixed amount of precision. This sounds
 reasonable, except in reality the compiler and the hardware will “help 
out” by providing more precision in some cases.</p>
<p>For example, the compiler is likely to keep the value of the local variable <code>iToF</code> in a register, instead of in memory. On x86, floating point registers have <a href="http://en.wikipedia.org/wiki/Extended_precision">more bits of precision</a>
 than required. The extra precision, whether it comes from registers or 
from optimizations, has observable effects. Consider this C# code:</p>
<pre><code class="prettyprint"><span class="kwd">float</span><span class="pln"> f </span><span class="pun">=</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">float</span><span class="pun">)(</span><span class="lit">1</span><span class="pln"> </span><span class="pun">&lt;&lt;</span><span class="pln"> </span><span class="lit">24</span><span class="pun">);</span><span class="pln">
</span><span class="kwd">int</span><span class="pln"> i0 </span><span class="pun">=</span><span class="pln"> </span><span class="pun">(</span><span class="lit">1</span><span class="pln"> </span><span class="pun">&lt;&lt;</span><span class="pln"> </span><span class="lit">24</span><span class="pun">)</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> </span><span class="lit">1</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">int</span><span class="pln"> i1 </span><span class="pun">=</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">int</span><span class="pun">)(</span><span class="pln">f </span><span class="pun">+</span><span class="pln"> </span><span class="lit">1f</span><span class="pun">);</span><span class="pln">
</span><span class="kwd">int</span><span class="pln"> i2 </span><span class="pun">=</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">int</span><span class="pun">)(</span><span class="kwd">float</span><span class="pun">)(</span><span class="pln">f </span><span class="pun">+</span><span class="pln"> </span><span class="lit">1f</span><span class="pun">);</span><span class="pln">
</span><span class="typ">Console</span><span class="pun">.</span><span class="typ">WriteLine</span><span class="pun">(</span><span class="pln">i0</span><span class="pun">);</span><span class="pln"> </span><span class="com">// 16777217</span><span class="pln">
</span><span class="typ">Console</span><span class="pun">.</span><span class="typ">WriteLine</span><span class="pun">(</span><span class="pln">i1</span><span class="pun">);</span><span class="pln"> </span><span class="com">// 16777217</span><span class="pln">
</span><span class="typ">Console</span><span class="pun">.</span><span class="typ">WriteLine</span><span class="pun">(</span><span class="pln">i2</span><span class="pun">);</span><span class="pln"> </span><span class="com">// 16777216</span></code></pre>
<p>Those well versed in the dangers of floating points will notice that 
floats don't have enough precision to represent the integer <img src="My%20Bug,%20My%20Bad%20%232%20-%20Sunk%20by%20Float_files/quicklatex_003.png" class="ql-img-inline-formula " alt="2^{24}+1 = 16777217" title="Rendered by QuickLaTeX.com" style="vertical-align: -1px;" height="16" width="150">. That's the first level of trickery. It explains <code>i2</code> printing <img src="My%20Bug,%20My%20Bad%20%232%20-%20Sunk%20by%20Float_files/quicklatex_005.png" class="ql-img-inline-formula " alt="16777216" title="Rendered by QuickLaTeX.com" style="vertical-align: -1px;" height="14" width="71"> instead of <img src="My%20Bug,%20My%20Bad%20%232%20-%20Sunk%20by%20Float_files/quicklatex_002.png" class="ql-img-inline-formula " alt="16777217" title="Rendered by QuickLaTeX.com" style="vertical-align: -1px;" height="14" width="71">.
 The second level of trickery is the "bonus" precision, which allows the
 apparently impossible feat of converting a float to an int and getting <img src="My%20Bug,%20My%20Bad%20%232%20-%20Sunk%20by%20Float_files/quicklatex_002.png" class="ql-img-inline-formula " alt="16777217" title="Rendered by QuickLaTeX.com" style="vertical-align: -1px;" height="14" width="71"> stored in <code>i1</code> despite the fact that floats can't represent <img src="My%20Bug,%20My%20Bad%20%232%20-%20Sunk%20by%20Float_files/quicklatex_002.png" class="ql-img-inline-formula " alt="16777217" title="Rendered by QuickLaTeX.com" style="vertical-align: -1px;" height="14" width="71">.</p>
<p>Note that the above sample might behave differently on your machine 
or in the future. The C# spec does not specify how extra precision is 
handled, stating nothing more concrete than "Floating-point operations 
may be performed with higher precision than the result type of the 
operation.".</p>
<p>(Terrible Trivia You've Just Learned: In C# is there any type T such 
that casting from T to T is not guaranteed to be a no-op? Yup. Float. In
 the above sample, on my machine, casting a float expression to float 
removes the extra precision.)</p>
<p>In terms of my wrong code for solving the integer/float comparison 
problem, extended precision means the round-trip might succeed more 
often than it should. Even if the integer can't be represented as a 
float, there's no guarantee extended precision won't be used (in the 
future or on other machines or at different optimization levels) to 
allow the round-trip to preserve all integers.</p>
<p>For those keeping track: that's a total of two time bombs accidentally written into the same two-line function.</p>
<p>Actually, this whole extended precision thing calls into question the problem itself.</p>
<h3>Wrong #3: Assuming Floats Have a Consistent Value</h3>
<p>The truly terrifying thing about "bonus" precision is that you don't 
control it. It can be available for one comparison, but not the next, 
creating some <a href="http://gcc.gnu.org/ml/gcc-bugs/1999-05n/msg00133.html">truly nasty bugs</a>.</p>
<p>Consider the following code:</p>
<pre><code class="prettyprint"><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">someFloat </span><span class="pun">&gt;</span><span class="pln"> </span><span class="lit">1</span><span class="pun">)</span><span class="pln"> </span><span class="typ">Print</span><span class="pun">(</span><span class="str">"More"</span><span class="pun">);</span><span class="pln">
</span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">someFloat </span><span class="pun">&lt;=</span><span class="pln"> </span><span class="lit">1</span><span class="pun">)</span><span class="pln"> </span><span class="typ">Print</span><span class="pun">(</span><span class="str">"Not More"</span><span class="pun">);</span></code></pre>
<p>You might be surprised to find out that it's possible for the above code to print "More" <strong>and</strong> "Not More" at the same time. If <code>someFloat</code>
 has extra precision and is barely larger than 1, then it passes the 
'greater than 1' check. If it then loses that precision, perhaps due to 
the call to Print needing floating point registers, then it will be 
rounded to 1 in time to also pass the 'less than or equal to 1' check.</p>
<p>Basically, any code that compares a float to the same value twice can
 be broken by a sufficiently evil compiler, even a compliant-to-spec 
one. If that doesn't immediately terrify you, maybe a practical example 
will:</p>
<pre><code class="prettyprint"><span class="typ">Vector2</span><span class="pln"> </span><span class="typ">Normal</span><span class="pun">(</span><span class="typ">Vector2</span><span class="pln"> v</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">var</span><span class="pln"> length </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Math</span><span class="pun">.</span><span class="typ">Sqrt</span><span class="pun">(</span><span class="pln">v</span><span class="pun">.</span><span class="pln">x</span><span class="pun">*</span><span class="pln">v</span><span class="pun">.</span><span class="pln">x </span><span class="pun">+</span><span class="pln"> v</span><span class="pun">.</span><span class="pln">y</span><span class="pun">*</span><span class="pln">v</span><span class="pun">.</span><span class="pln">y</span><span class="pun">);</span><span class="pln">
    </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">length </span><span class="pun">==</span><span class="pln"> </span><span class="lit">0</span><span class="pun">)</span><span class="pln"> </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Vector2</span><span class="pun">(</span><span class="lit">0</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0</span><span class="pun">);</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Vector2</span><span class="pun">(</span><span class="pln">v</span><span class="pun">.</span><span class="pln">x </span><span class="pun">/</span><span class="pln"> length</span><span class="pun">,</span><span class="pln"> v</span><span class="pun">.</span><span class="pln">y </span><span class="pun">/</span><span class="pln"> length</span><span class="pun">);</span><span class="pln">
</span><span class="pun">}</span></code></pre>
<p>The above is a typical function to get the normal of a vector. 
Similar code appears in almost every geometry library ever. It's not 
really "wrong", exactly, but bad things happen if you look at it through
 the eyes of a sufficiently evil compiler.</p>
<p>You might assume that, given an input vector with real coordinates 
(not infinity or NaN), this function is guaranteed to return a vector 
with real coordinates with a length approximately equal to 1 or 0. 
Except, if you take the normal of a vector near zero then the extra 
precision might be available for the length == 0 check but not for the 
divisions, resulting in non-real outputs. So much for the assumed "real 
preserving" invariant. Ugh.</p>
<p>Using a <img src="My%20Bug,%20My%20Bad%20%232%20-%20Sunk%20by%20Float_files/quicklatex_004.png" class="ql-img-inline-formula " alt="length \leq \epsilon" title="Rendered by QuickLaTeX.com" style="vertical-align: -4px;" height="17" width="81">
 check improves the situation a lot, by preventing the evil compiler 
from rounding to zero for the division. On the other hand, it increases 
the size of the boundary where the compiler might flip the result from a
 unit vector to the zero vector or from the zero vector to a unit 
vector.</p>
<p>What I'm getting at is that floats flout the idea of being 
comparable. The idea that we can write a function that tells if an 
integer is equal to a float is, frankly, a little bit misguided. We'll 
either get false positives, when precision is lost after the check, or 
false negatives, when precision is temporarily lost (or purposefully 
removed) during the check.</p>
<p>So, in a sense, even the function specification I was implementing 
was wrong. No code can implement it perfectly. Compilers just don't 
treat floats that way.</p>
<h3>A Corrected Solution</h3>
<p>To correct the code I gave above, the three wrongs I listed (rounding, extra precision, impossible spec) need to be addressed.</p>
<p>The rounding issue is the easiest to fix. It only happens in one case
 (numbers near int.MaxValue), and can be caught with an explicit check. 
The other two issues will be fixed by slightly altering the spec.</p>
<p>To make the function independent of the whims of the compiler, I will
 avoid comparing against the overprecise-by-unknown-amount runtime value
 of the float. Instead, the function will compare against the nearest 
representable <a href="http://en.wikipedia.org/wiki/IEEE_floating_point">IEEE single precision float</a>
 (i.e. what you'd naively expect the function to do, before learning 
about extended precision). You can get that value, in many languages, by
 casting to a <code>volatile float</code> or storing in a <code>volatile float</code> field.</p>
<p>Applying both of these fixes (while still trying to avoid risky boundaries) gives a corrected solution in C#:</p>
<pre><code class="prettyprint"><span class="kwd">private</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">volatile</span><span class="pln"> </span><span class="kwd">float</span><span class="pln"> staticVolatileFloat</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">private</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">float</span><span class="pln"> </span><span class="typ">RemoveExtendedPrecision</span><span class="pun">(</span><span class="kwd">float</span><span class="pln"> f</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="com">// thread safe? what's that?</span><span class="pln">
    staticVolatileFloat </span><span class="pun">=</span><span class="pln"> f</span><span class="pun">;</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> staticVolatileFloat</span><span class="pun">;</span><span class="pln">
</span><span class="pun">}</span><span class="pln">

</span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">bool</span><span class="pln"> </span><span class="typ">EqualAfterRemovingExtendedPrecision</span><span class="pun">(</span><span class="kwd">int</span><span class="pln"> i</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">float</span><span class="pln"> f</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    f </span><span class="pun">=</span><span class="pln"> </span><span class="typ">RemoveExtendedPrecision</span><span class="pun">(</span><span class="pln">f</span><span class="pun">);</span><span class="pln">
    </span><span class="kwd">var</span><span class="pln"> iToF </span><span class="pun">=</span><span class="pln"> </span><span class="typ">RemoveExtendedPrecision</span><span class="pun">((</span><span class="kwd">float</span><span class="pun">)</span><span class="pln">i</span><span class="pun">);</span><span class="pln">
    
    </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">iToF </span><span class="pun">==</span><span class="pln"> </span><span class="typ">RemoveExtendedPrecision</span><span class="pun">((</span><span class="kwd">float</span><span class="pun">)</span><span class="kwd">int</span><span class="pun">.</span><span class="typ">MaxValue</span><span class="pun">))</span><span class="pln">
        </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">false</span><span class="pun">;</span><span class="pln"> </span><span class="com">// rounded out of range, can't be represented</span><span class="pln">
    </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">((</span><span class="kwd">int</span><span class="pun">)</span><span class="pln">iToF </span><span class="pun">!=</span><span class="pln"> i</span><span class="pun">)</span><span class="pln">
        </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">false</span><span class="pun">;</span><span class="pln"> </span><span class="com">// rounded to a different value, can't be represented</span><span class="pln">
    
    </span><span class="com">// can be represented faithfully, naive equality check will work</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> iToF </span><span class="pun">==</span><span class="pln"> f</span><span class="pun">;</span><span class="pln">
</span><span class="pun">}</span></code></pre>
<p>(To be honest, I'm drawing a blank trying to think of natural uses for a function like <code>EqualAfterRemovingExtendedPrecision</code>.)</p>
<p>I tested that the function corresponds to what happens if you compare after casting both inputs to <code>double</code>, so <em>hopefully</em> it's correct now and forever. Maybe someone who knows even more about floating point horrors will correct that optimism.</p>
<p><em>Update</em>: If a different <a href="http://en.wikipedia.org/wiki/Ieee_float#Rounding_rules">valid IEEE rounding rule</a>
 is being used, (float)int.MaxValue might be rounded down instead of up.
 As a result, the "corrected" code would wrongly categorize the largest 
integer representable as a float as being not representable and create 
false negatives. Pessimism increased.</p>
<h3>Summary</h3>
<p>Floats are terrifying. Maybe not as terrifying as unicode, but pretty darn terrifying.</p>
<p>Remember: floats are fundamentally imprecise approximations of 
continuous quantities. Not only because of their representation, but 
because of how they are treated by compilers and CPUs. As a result, 
trying to force a precise discrete result out of a float (by rounding or
 doing a comparison) is just inherently risky. Prepare to compromise.</p>
<p>---</p>
<h3>Discuss on <a href="http://www.reddit.com/r/programming/comments/1al4wv/my_bug_my_bad_sunk_by_float/">Reddit</a>, <a href="https://news.ycombinator.com/item?id=5400169">Hacker News</a></h3>
<p>---</p>

<blockquote><p>
<span style="color:#4A9EC2"><em><br>
Twisted Oak Studios offers consulting and development on high-tech interactive projects. Check out our <a href="http://twistedoakstudios.com/portfolio/">portfolio</a>, or <a href="mailto:contact@twistedoakstudios.com">Give us a shout</a> if you have anything you think some really rad engineers should help you with.<br>
</em></span>
</p></blockquote>
<h2 class="endofpage">Older Posts</h2>
<p></p><ul>
     <li><a href="http://twistedoakstudios.com/blog/Post4008_collapsing-futures-easy-to-use-hard-to-represent" rel="bookmark" title="Permanent Link to Collapsing Futures: Easy to Use, Hard to Represent">Collapsing Futures: Easy to Use, Hard to Represent</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post3858_eventual-exceptions-vs-programming-in-a-minimal-functional-style" rel="bookmark" title="Permanent Link to Eventual Exceptions vs Programming in a Minimal Functional Style">Eventual Exceptions vs Programming in a Minimal Functional Style</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post3769_the-mystery-of-flunf" rel="bookmark" title="Permanent Link to The Mystery of Flunf">The Mystery of Flunf</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post3724_explain-it-like-im-five-the-socialist-millionaire-problem-and-secure-multi-party-computation" rel="bookmark" title="Permanent Link to Explain it like I’m Five: The Socialist Millionaire Problem and Secure Multi-Party Computation">Explain it like I’m Five: The Socialist Millionaire Problem and Secure Multi-Party Computation</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post3631_computer-science-blows-my-mind" rel="bookmark" title="Permanent Link to Computer Science Blows My Mind">Computer Science Blows My Mind</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post3484_a-visit-to-execution-labs-in-montreal" rel="bookmark" title="Permanent Link to A visit to Execution Labs in Montréal">A visit to Execution Labs in Montréal</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post3573_transmuting-dice-conserving-entropy" rel="bookmark" title="Permanent Link to Transmuting Dice, Conserving Entropy">Transmuting Dice, Conserving Entropy</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post3516_rule-of-thumb-ask-for-the-clock" rel="bookmark" title="Permanent Link to Rule of Thumb: Ask for the Clock">Rule of Thumb: Ask for the Clock</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post3477_rule-of-thumb-use-purposefully-weakened-methods" rel="bookmark" title="Permanent Link to Rule of Thumb: Use Purposefully Weakened Methods">Rule of Thumb: Use Purposefully Weakened Methods</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post3376_rule-of-thumb-preconditions-should-be-checked-explicitly" rel="bookmark" title="Permanent Link to Rule of thumb: Preconditions Should be Checked Explicitly">Rule of thumb: Preconditions Should be Checked Explicitly</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post3280_intersecting-linked-lists-faster" rel="bookmark" title="Permanent Link to Intersecting Linked Lists Faster">Intersecting Linked Lists Faster</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post3138_mouse-path-smoothing-for-jack-lumber" rel="bookmark" title="Permanent Link to Mouse Path Smoothing for Jack Lumber">Mouse Path Smoothing for Jack Lumber</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post2852_repeat-yourself-differently" rel="bookmark" title="Permanent Link to Repeat Yourself Differently">Repeat Yourself Differently</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post2644_grovers-quantum-search-algorithm" rel="bookmark" title="Permanent Link to Grover’s Quantum Search Algorithm">Grover’s Quantum Search Algorithm</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post2766_followup-to-non-nullable-types-vs-c" rel="bookmark" title="Permanent Link to Followup to Non-Nullable Types vs C#">Followup to Non-Nullable Types vs C#</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post2540_optimizing-just-in-time-with-expression-trees" rel="bookmark" title="Permanent Link to Optimizing Just in Time with Expression Trees">Optimizing Just in Time with Expression Trees</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post2353_when-one-way-latency-doesnt-matter" rel="bookmark" title="Permanent Link to When One-Way Latency Doesn’t Matter">When One-Way Latency Doesn’t Matter</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post2194_determining-exactly-ifwhenwhere-a-moving-line-intersected-a-moving-point" rel="bookmark" title="Permanent Link to Determining exactly if/when/where a moving line intersected a moving point">Determining exactly if/when/where a moving line intersected a moving point</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post2061_emulating-actors-in-c-with-asyncawait" rel="bookmark" title="Permanent Link to Emulating Actors in C# with Async/Await">Emulating Actors in C# with Async/Await</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post2096_making-an-immutable-queue-with-guaranteed-constant-time-operations" rel="bookmark" title="Permanent Link to Making an immutable queue with guaranteed constant time operations">Making an immutable queue with guaranteed constant time operations</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post399_improving-checked-exceptions" rel="bookmark" title="Permanent Link to Improving Checked Exceptions">Improving Checked Exceptions</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post1941_perishable-collections-the-benefits-of-removal-by-lifetime" rel="bookmark" title="Permanent Link to Perishable Collections: The Benefits of Removal-by-Lifetime">Perishable Collections: The Benefits of Removal-by-Lifetime</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post1823_decoupling-shared-control" rel="bookmark" title="Permanent Link to Decoupling shared control">Decoupling shared control</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post1694_decoupling-inlined-ui-code" rel="bookmark" title="Permanent Link to Decoupling inlined UI code">Decoupling inlined UI code</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post1585_linq-to-collections-beyond-ienumerablet" rel="bookmark" title="Permanent Link to Linq to Collections: Beyond IEnumerable&lt;T&gt;">Linq to Collections: Beyond IEnumerable&lt;T&gt;</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post1295_publish-your-net-library-as-a-nuget-package" rel="bookmark" title="Permanent Link to Publish your .Net library as a NuGet package">Publish your .Net library as a NuGet package</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post1130_when-null-is-not-enough-an-option-type-for-c" rel="bookmark" title="Permanent Link to When null is not enough: an option type for C#">When null is not enough: an option type for C#</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post1473_unfathomable-bugs-5-readonly-or-not" rel="bookmark" title="Permanent Link to Unfathomable Bugs #5: Readonly or not">Unfathomable Bugs #5: Readonly or not</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post667_minkowski-sums-examples" rel="bookmark" title="Permanent Link to Minkowski sums: examples">Minkowski sums: examples</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post1080_my-bug-my-bad-1-fractal-spheres" rel="bookmark" title="Permanent Link to My Bug, My Bad #1: Fractal Spheres">My Bug, My Bad #1: Fractal Spheres</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post1007_working-around-the-brittle-ui-virtualization-in-windows-8" rel="bookmark" title="Permanent Link to Working around the brittle UI Virtualization in Windows 8">Working around the brittle UI Virtualization in Windows 8</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post938_encapsulating-angles" rel="bookmark" title="Permanent Link to Encapsulating Angles">Encapsulating Angles</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post925_unfathomable-bugs-4-keys-that-arent" rel="bookmark" title="Permanent Link to Unfathomable Bugs #4: Keys that aren’t">Unfathomable Bugs #4: Keys that aren’t</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post867_how-would-i-even-use-a-monad-in-c" rel="bookmark" title="Permanent Link to How would I even use a monad (in C#)?">How would I even use a monad (in C#)?</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post822_useful-methods-1-observable-wheneach" rel="bookmark" title="Permanent Link to Useful/Interesting Methods #1: Observable.WhenEach">Useful/Interesting Methods #1: Observable.WhenEach</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post818_unfathomable-bugs-3-stringing-you-along" rel="bookmark" title="Permanent Link to Unfathomable Bugs #3: Stringing you along">Unfathomable Bugs #3: Stringing you along</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post774_anonymous-implementation-classes-a-design-pattern-for-c" rel="bookmark" title="Permanent Link to Anonymous Implementation Classes – A Design Pattern for C#">Anonymous Implementation Classes – A Design Pattern for C#</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post532_tasks-for-action-script-3" rel="bookmark" title="Permanent Link to Tasks for ActionScript 3 – Improving on Event-Driven Programming">Tasks for ActionScript 3 – Improving on Event-Driven Programming</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post554_minkowski-sums-and-differences" rel="bookmark" title="Permanent Link to Minkowski sums and differences">Minkowski sums and differences</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post330_non-nullable-types-vs-c-fixing-the-billion-dollar-mistake" rel="bookmark" title="Permanent Link to Non-Nullable Types vs C#: Fixing the Billion Dollar Mistake">Non-Nullable Types vs C#: Fixing the Billion Dollar Mistake</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post384_unfathomable-bugs-2-slashing-out" rel="bookmark" title="Permanent Link to Unfathomable Bugs #2: Slashing Out">Unfathomable Bugs #2: Slashing Out</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post404_script-templates-and-base-classes" rel="bookmark" title="Permanent Link to Script templates and base classes">Script templates and base classes</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post373_unity-font-extraction" rel="bookmark" title="Permanent Link to Unity font extraction">Unity font extraction</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post341_abusing-phantom-types-to-encode-list-lengths-into-their-type" rel="bookmark" title="Permanent Link to Abusing “Phantom Types” to Encode List Lengths Into Their Type">Abusing “Phantom Types” to Encode List Lengths Into Their Type</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post261_constructive-criticism-of-the-reactive-extensions-api" rel="bookmark" title="Permanent Link to Constructive Criticism of the Reactive Extensions API">Constructive Criticism of the Reactive Extensions API</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post241_quaternions-part-3-2" rel="bookmark" title="Permanent Link to Quaternions part 3">Quaternions part 3</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post204_quaternions-part-2" rel="bookmark" title="Permanent Link to Quaternions part 2">Quaternions part 2</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post144_quaternions-part-1" rel="bookmark" title="Permanent Link to Quaternions part 1">Quaternions part 1</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post157_unfathomable-bugs-1-you-can-have-things-you-can-have-things-in-things-you-can-have" rel="bookmark" title="Permanent Link to Unfathomable Bugs #1: You can have things! You can have things IN things! You can have …">Unfathomable Bugs #1: You can have things! You can have things IN things! You can have …</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post83_coroutines-more-than-you-want-to-know" rel="bookmark" title="Permanent Link to Coroutines – More than you want to know">Coroutines – More than you want to know</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post74_asset-bundle-helper" rel="bookmark" title="Permanent Link to Asset Bundle Helper">Asset Bundle Helper</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post60_the-visual-studio-goes-away" rel="bookmark" title="Permanent Link to The Visual Studio goes away">The Visual Studio goes away</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post57_nets-time-traveling-stopwatch" rel="bookmark" title="Permanent Link to .Net’s time traveling StopWatch">.Net’s time traveling StopWatch</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post3718_polish" rel="bookmark" title="Permanent Link to Polish">Polish</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post29_introducing-catalyst" rel="bookmark" title="Permanent Link to Introducing Catalyst">Introducing Catalyst</a></li>
  </ul>
<p></p>


			</div><!-- #content -->
			</section>

			</div>
		</div><!-- #container -->


</span></div><!-- .container -->

 <link rel="stylesheet" id="al2fb_style-css" href="My%20Bug,%20My%20Bad%20%232%20-%20Sunk%20by%20Float_files/add-link-to-facebook.css" type="text/css" media="all">
<link rel="stylesheet" id="admin-bar-css" href="My%20Bug,%20My%20Bad%20%232%20-%20Sunk%20by%20Float_files/admin-bar.css" type="text/css" media="all">
<link rel="stylesheet" id="upprev-css-css" href="My%20Bug,%20My%20Bad%20%232%20-%20Sunk%20by%20Float_files/upprev.css" type="text/css" media="all">
<link rel="stylesheet" id="wp-quicklatex-format-css" href="My%20Bug,%20My%20Bad%20%232%20-%20Sunk%20by%20Float_files/quicklatex-format.css" type="text/css" media="all">
<script type="text/javascript" src="My%20Bug,%20My%20Bad%20%232%20-%20Sunk%20by%20Float_files/admin-bar.js"></script>
<script type="text/javascript" src="My%20Bug,%20My%20Bad%20%232%20-%20Sunk%20by%20Float_files/jquery_002.js"></script>
<script type="text/javascript" src="My%20Bug,%20My%20Bad%20%232%20-%20Sunk%20by%20Float_files/upprev_js.php"></script>
<script type="text/javascript" src="My%20Bug,%20My%20Bad%20%232%20-%20Sunk%20by%20Float_files/comment-reply.js"></script>
	<script type="text/javascript">
		(function() {
			var request, b = document.body, c = 'className', cs = 'customize-support', rcs = new RegExp('(^|\\s+)(no-)?'+cs+'(\\s+|$)');

			request = true;

			b[c] = b[c].replace( rcs, ' ' );
			b[c] += ( window.postMessage && request ? ' ' : ' no-' ) + cs;
		}());
	</script>
			

		 
<!-- BEGIN footer-type stuff -->
<div class="container footer-container">
	<div class="row">
		
		<div class="fourcol last"><!-- .last b/c it's floated right -->
      <!-- home portfolio used to be here -->
		</div>

		<div class="eightcol" id="contact">
			<p>Twisted Oak Studios<br>
				138-1657 Barrington St.<br>
				Halifax, NS, Canada B3J 2A1</p>
			
			<p>001-902-237-7326<br>
			<a href="mailto:contact@twistedoakstudios.com">contact@twistedoakstudios.com</a></p>
		</div>

		<div class="twelvecol">
			<footer>
				<small>©2012
					<script>
						var d=new Date(); 
						yr=d.getFullYear();
						if (yr!=2012)
						document.write("- "+yr);
					</script>- 2013 Twisted Oak Studios Ltd. -- All Rights Reserved -- All images and logos are property of their respective owners.
				</small>
			</footer>
		</div>
		
		
	</div><!-- .row -->
</div><!-- .container -->
<!-- END footer stuff-->

<!-- jQuery and scrolly script for contact link -->
<script src="My%20Bug,%20My%20Bad%20%232%20-%20Sunk%20by%20Float_files/jquery.js"></script>
  <script>window.jQuery || document.write('<script src="../js/libs/jquery-1.6.2.min.js"><\/script>')</script>

<script src="My%20Bug,%20My%20Bad%20%232%20-%20Sunk%20by%20Float_files/scrolly.js"></script>


  <!-- Don't forget Analytics! -->



  <!-- Prompt IE 6 users to install Chrome Frame. Remove this if you want to support IE 6.
       chromium.org/developers/how-tos/chrome-frame-getting-started -->
  <!--[if lt IE 7 ]>
    <script src="//ajax.googleapis.com/ajax/libs/chrome-frame/1.0.3/CFInstall.min.js"></script>
    <script>window.attachEvent('onload',function(){CFInstall.check({mode:'overlay'})})</script>
  <![endif]-->
  


<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-31441525-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>
<div id="wpadminbar" class="nojq " role="navigation">
			<a class="screen-reader-shortcut" href="#wp-toolbar" tabindex="1">Skip to toolbar</a>
			<div class="quicklinks" id="wp-toolbar" role="navigation" aria-label="Top navigation toolbar." tabindex="0">
				<ul id="wp-admin-bar-root-default" class="ab-top-menu">
		<li id="wp-admin-bar-wp-logo" class="menupop"><a class="ab-item" aria-haspopup="true" href="http://twistedoakstudios.com/blog/wp-admin/about.php" title="About WordPress"><span class="ab-icon"></span></a><div class="ab-sub-wrapper"><ul id="wp-admin-bar-wp-logo-default" class="ab-submenu">
		<li id="wp-admin-bar-about"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/about.php">About WordPress</a>		</li></ul><ul id="wp-admin-bar-wp-logo-external" class="ab-sub-secondary ab-submenu">
		<li id="wp-admin-bar-wporg"><a class="ab-item" href="http://wordpress.org/">WordPress.org</a>		</li>
		<li id="wp-admin-bar-documentation"><a class="ab-item" href="http://codex.wordpress.org/">Documentation</a>		</li>
		<li id="wp-admin-bar-support-forums"><a class="ab-item" href="http://wordpress.org/support/">Support Forums</a>		</li>
		<li id="wp-admin-bar-feedback"><a class="ab-item" href="http://wordpress.org/support/forum/requests-and-feedback">Feedback</a>		</li></ul></div>		</li>
		<li id="wp-admin-bar-site-name" class="menupop"><a class="ab-item" aria-haspopup="true" href="http://twistedoakstudios.com/blog/wp-admin/">twistedoakstudios.com</a><div class="ab-sub-wrapper"><ul id="wp-admin-bar-site-name-default" class="ab-submenu">
		<li id="wp-admin-bar-dashboard"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/">Dashboard</a>		</li></ul><ul id="wp-admin-bar-appearance" class="ab-submenu">
		<li id="wp-admin-bar-themes"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/themes.php">Themes</a>		</li>
		<li id="wp-admin-bar-customize" class="hide-if-no-customize"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/customize.php?url=http%3A%2F%2Ftwistedoakstudios.com%2Fblog%2FPost3044_my-bug-my-bad-2-sunk-by-float">Customize</a>		</li></ul></div>		</li>
		<li id="wp-admin-bar-updates"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/update-core.php" title="2 Plugin Updates, 1 Theme Update"><span class="ab-icon"></span><span class="ab-label">3</span><span class="screen-reader-text">2 Plugin Updates, 1 Theme Update</span></a>		</li>
		<li id="wp-admin-bar-comments"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/edit-comments.php" title="0 comments awaiting moderation"><span class="ab-icon"></span><span id="ab-awaiting-mod" class="ab-label awaiting-mod pending-count count-0">0</span></a>		</li>
		<li id="wp-admin-bar-new-content" class="menupop"><a class="ab-item" aria-haspopup="true" href="http://twistedoakstudios.com/blog/wp-admin/post-new.php" title="Add New"><span class="ab-icon"></span><span class="ab-label">New</span></a><div class="ab-sub-wrapper"><ul id="wp-admin-bar-new-content-default" class="ab-submenu">
		<li id="wp-admin-bar-new-post"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/post-new.php">Post</a>		</li>
		<li id="wp-admin-bar-new-media"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/media-new.php">Media</a>		</li>
		<li id="wp-admin-bar-new-link"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/link-add.php">Link</a>		</li>
		<li id="wp-admin-bar-new-page"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/post-new.php?post_type=page">Page</a>		</li>
		<li id="wp-admin-bar-new-user"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/user-new.php">User</a>		</li></ul></div>		</li>
		<li id="wp-admin-bar-edit"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/post.php?post=3044&amp;action=edit">Edit Post</a>		</li></ul><ul id="wp-admin-bar-top-secondary" class="ab-top-secondary ab-top-menu">
		<li id="wp-admin-bar-search" class="admin-bar-search"><div class="ab-item ab-empty-item" tabindex="-1"><form action="http://twistedoakstudios.com/blog/" method="get" id="adminbarsearch"><input class="adminbar-input" name="s" id="adminbar-search" maxlength="150" type="text"><input class="adminbar-button" value="Search" type="submit"></form></div>		</li>
		<li id="wp-admin-bar-my-account" class="menupop with-avatar"><a class="ab-item" aria-haspopup="true" href="http://twistedoakstudios.com/blog/wp-admin/profile.php" title="My Account">Howdy, Craig Gidney<img alt="" src="My%20Bug,%20My%20Bad%20%232%20-%20Sunk%20by%20Float_files/31a6ce579f8f9f9d528715d1e941726e.png" class="avatar avatar-16 photo" height="16" width="16"></a><div class="ab-sub-wrapper"><ul id="wp-admin-bar-user-actions" class="ab-submenu">
		<li id="wp-admin-bar-user-info"><a class="ab-item" tabindex="-1" href="http://twistedoakstudios.com/blog/wp-admin/profile.php"><img alt="" src="My%20Bug,%20My%20Bad%20%232%20-%20Sunk%20by%20Float_files/31a6ce579f8f9f9d528715d1e941726e_002.png" class="avatar avatar-64 photo" height="64" width="64"><span class="display-name">Craig Gidney</span><span class="username">craig</span></a>		</li>
		<li id="wp-admin-bar-edit-profile"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/profile.php">Edit My Profile</a>		</li>
		<li id="wp-admin-bar-logout"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-login.php?action=logout&amp;_wpnonce=8450958ce8">Log Out</a>		</li></ul></div>		</li></ul>			</div>
			<a class="screen-reader-shortcut" href="http://twistedoakstudios.com/blog/wp-login.php?action=logout&amp;_wpnonce=8450958ce8">Log Out</a>
		</div></body></html>