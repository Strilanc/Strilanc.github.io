<!DOCTYPE html>
<!-- paulirish.com/2008/conditional-stylesheets-vs-css-hacks-answer-neither/ -->
<!--[if lt IE 7]> <html class="no-js ie6 oldie" lang="en"> <![endif]-->
<!--[if IE 7]>    <html class="no-js ie7 oldie" lang="en"> <![endif]-->
<!--[if IE 8]>    <html class="no-js ie8 oldie" lang="en"> <![endif]-->
<!-- Consider adding an manifest.appcache: h5bp.com/d/Offline -->
<!--[if gt IE 8]><!-->
<html class=" js flexbox canvas canvastext webgl no-touch geolocation postmessage no-websqldatabase indexeddb hashchange history draganddrop websockets rgba hsla multiplebgs backgroundsize borderimage borderradius boxshadow textshadow opacity cssanimations csscolumns cssgradients no-cssreflections csstransforms csstransforms3d csstransitions fontface generatedcontent video audio localstorage sessionstorage webworkers applicationcache svg inlinesvg smil svgclippaths" xmlns="http://www.w3.org/1999/xhtml" xmlns:og="http://ogp.me/ns#" xmlns:fb="https://www.facebook.com/2008/fbml" lang="en"><script id="bug.surrogate">var urchinTracker=function(){},_gaq={push:function(){try {if(arguments[0][0]=='_link')window.location.href=arguments[0][1]}catch(er){}}},_gat={_createTracker:function(){}, _getTracker:function(){return{__noSuchMethod__:function(){},_link:function(o){if(o)location.href=o;},_linkByPost:function(){return true;},_getLinkerUrl:function(o){return o;},_trackEvent:function(){}}}}; if (document.location.host == 'www.salon.com') {var _ga_ = document.querySelectorAll('script[src$=ga\\.js]')[0], ga_e = document.createEvent('Event'); ga_e.initEvent('load', true, true);_ga_.dispatchEvent(ga_e);}</script><!--<![endif]--><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
  <meta charset="utf-8">
   <!-- blog feed link -->
  <link href="http://twistedoakstudios.com/blog/?feed=rss" rel="alternate" type="application/rss+xml" title="Twisted Oak Studios Blog">

  <!-- Use the .htaccess and remove these lines to avoid edge case issues.
       More info: h5bp.com/b/378 -->
  <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">

  <title>Twisted Oak Studios | Unity3D Consulting | Technical Magic</title>
  <meta name="description" content="As a lean co-operative team of seasoned developers, Twisted Oak is able to offer efficient, flexible remote and on-the-floor development and consulting without any middle-man or excessive administrivia.">
  <meta name="author" content="/humans.txt">

  <meta name="viewport" content="width=device-width,initial-scale=1">

  <link rel="shortcut icon" href="http://twistedoakstudios.com/blog/favicon.ico">
  <link rel="apple-touch-icon-precomposed" href="http://twistedoakstudios.com/blog/apple-touch-icon-precomposed.png">

  	<!-- The 1140px Grid - http://cssgrid.net/ -->
	<link rel="stylesheet" href="Rule%20of%20Thumb%20-%20Ask%20for%20the%20Clock_files/1140.css">
    <link rel="stylesheet" href="Rule%20of%20Thumb%20-%20Ask%20for%20the%20Clock_files/style.css">
    <link rel="stylesheet" href="Rule%20of%20Thumb%20-%20Ask%20for%20the%20Clock_files/blogstyle.css">
<link rel="stylesheet" href="Rule%20of%20Thumb%20-%20Ask%20for%20the%20Clock_files/prettify.css" media="all">
<link rel="stylesheet" href="Rule%20of%20Thumb%20-%20Ask%20for%20the%20Clock_files/sunburst.css" media="all">
<script type="text/javascript" src="Rule%20of%20Thumb%20-%20Ask%20for%20the%20Clock_files/prettify.js"></script>

	<!-- Webfonts! -->
	<link href="Rule%20of%20Thumb%20-%20Ask%20for%20the%20Clock_files/css.css" rel="stylesheet" type="text/css">

	<!-- Open Graph -->
	<meta property="og:title" content="Twisted Oak Studios">
	<meta property="og:type" content="company">
	<meta property="og:url" content="http://www.twistedoakstudios.com/">
	<meta property="og:image" content="http://www.twistedoakstudios.com/images/logo.png">
	<meta property="og:description" content="As a lean co-operative team of seasoned developers, Twisted Oak is able to offer efficient, flexible remote and on-the-floor development and consulting without any middle-man or excessive administrivia.">
  
  <script src="Rule%20of%20Thumb%20-%20Ask%20for%20the%20Clock_files/modernizr-2.js"></script>
</head>
<body class=" customize-support" onload="prettyPrint()">
<!-- begin header -->
<div class="container header-container">
	<div class="row">
		<header>
			<div class="threecol">
				<a href="#"><img class="logo" src="Rule%20of%20Thumb%20-%20Ask%20for%20the%20Clock_files/logo.png"></a>
			</div><!-- .threecol -->
		
			<div class="fourcol navcol">
				<nav>
					<ul class="primary-nav clearfix">
						<li><a href="http://twistedoakstudios.com/">Home</a></li>
						<li><a href="http://twistedoakstudios.com/portfolio/">Portfolio</a></li>
						<li><a href="http://twistedoakstudios.com/labs/">Labs</a></li>
						<li><a class="scroll" href="#contact">Contact</a></li>
						<li><a href="http://twistedoakstudios.com/blog/">Blog</a></li>
					</ul>
				</nav>
			</div>    

    	</header>
	</div><!-- .row -->
</div><!-- .container -->


	<div id="main">
<span class="blog">
<div class="container home-container" id="home">
	<div class="row">
		<section>
			
			<div class="ninecol">


<h2><a href="http://twistedoakstudios.com/blog/Post3516_rule-of-thumb-ask-for-the-clock" rel="bookmark" title="Permanent Link to Rule of Thumb: Ask for the Clock">Rule of Thumb: Ask for the Clock</a></h2>
<div class="meta">posted by Craig Gidney on April 16, 2013</div>

<p>There are a lot of ways to make your code hard to test.</p>
<p>The classic example is touching global mutable state, which destroys 
the independence between tests and introduces lots of setup and teardown
 concerns. Of course, global mutable state has so many other downsides 
that avoiding it is a good idea even if you’re not going to write any 
tests at all.</p>
<p>Another example of what not to do, that doesn’t matter as much on metrics other than testability, is <em>failing to ask for external dependencies</em>.
 Code is a lot harder to test when it directly accesses external systems
 like the file system, networks, sensors, or the subject of this week’s 
trying-to-be-concrete post: time.</p>
<h3>Time Twists Testing</h3>
<p>Code that depends on the time, or date, is hard to test.</p>
<p>Suppose you want to test a long timeout: a prompt should appear when a
 user is inactive for five minutes. A test that waits for five minutes, 
and fails if the programmer moves the mouse during that time, is clearly
 unacceptable.</p>
<p>Alternatively, suppose you want to test that an event that should 
occur “once per day at 12:30am” doesn’t occur twice on daylight savings 
days where time “falls back” and repeats 12:30 am. No, having the tests 
pass once per year is not okay. Neither is changing the system time (who
 knows what sorts of things other programs will do when the apparent 
time jumps by years).</p>
<p>Testing edge cases based on time is extremely important, but you 
can’t afford to actually wait to do the testing. For example, I bet 
Microsoft’s not waiting four years to find out if the <a href="http://blogs.msdn.com/b/windowsazure/archive/2012/03/09/summary-of-windows-azure-service-disruption-on-feb-29th-2012.aspx">mistake that took down Azure</a>, computing the expiration date of certificates as Feb 29, 2012+1 = Feb 29, 2013 [not a valid day], is fixed.</p>
<p>Clearly we want to do <em>something</em> to cause code to act as if 
it’s a particular day, or as if a large amount of time has passed, 
without actually waiting for those things to happen in real time. But 
what?</p>
<h3>Mediocre Solution: Mocking</h3>
<p>A mocking framework allows you to (among other things) intercept 
invocations of methods like “get the current date”, and have methods 
under your control be invoked instead. This allows you to do things like
 make code see a particular date.</p>
<p>Mocking is very flexible, but it requires specific knowledge of the 
code’s internals. You need to know how the code implements its 
functionality in order to know what to mock. It won’t do much good to 
mock DateTime.Now if the code uses DateTime.UtcNow or 
Environment.TickCount or System.Diagnostics.StopWatch or a custom NTP 
client or invokes external time-dependent code or … uh, you get the 
idea. Mocking can easily drift from testing the surface of the code 
(that a particular goal is achieved), into testing the code’s internal 
minutia (that particular methods are used to achieve a goal).</p>
<p>I don’t recommend relying on mocks solving your time-testing 
problems. If your mocking framework can mock the flow of time in a 
unified way, so that all the various methods to access the time give 
consistent results, then that should work fine for testing. If it can’t…
 bleh. You should be solving designing code so these problems don’t 
occur, not solving them one by one with assumptions that break every 
time the code changes.</p>
<h3>My Preferred Solution: Ask for the Clock</h3>
<p>The method I use to create testable time-dependent code is to ask for
 a “clock”. A clock is a provider for the progression of time, an 
instance of an interface with methods for all the various time-related 
things the code might want to do: delaying an action, measuring elapsed 
time, creating periodic events, querying the date, whatever you need.</p>
<p>When the code is being run in production, the provided clock will be 
advancing with respect to external time. When the code is being tested, 
the provided clock will be a “fake” manually controlled instanced that 
the test can advance as needed.</p>
<p>Here’s an example of a simple method that takes a clock, in order to make itself trivially testable:</p>
<pre><code class="prettyprint"><span class="typ">TimeSpan</span><span class="pln"> </span><span class="typ">MeasureElapsedTime</span><span class="pun">(</span><span class="typ">Action</span><span class="pln"> action</span><span class="pun">,</span><span class="pln"> </span><span class="typ">IClock</span><span class="pln"> clock</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">var</span><span class="pln"> t </span><span class="pun">=</span><span class="pln"> clock</span><span class="pun">.</span><span class="typ">Time</span><span class="pun">();</span><span class="pln">
    action</span><span class="pun">();</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> clock</span><span class="pun">.</span><span class="typ">Time</span><span class="pun">()</span><span class="pln"> </span><span class="pun">-</span><span class="pln"> t</span><span class="pun">;</span><span class="pln">
</span><span class="pun">}</span></code></pre>
<pre><code class="prettyprint"><span class="kwd">void</span><span class="pln"> </span><span class="typ">MeasureElapsedTimeTest</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">var</span><span class="pln"> c </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">ManualClock</span><span class="pun">();</span><span class="pln">
    </span><span class="kwd">var</span><span class="pln"> d </span><span class="pun">=</span><span class="pln"> </span><span class="typ">TimeSpan</span><span class="pun">.</span><span class="typ">FromSeconds</span><span class="pun">(</span><span class="lit">5</span><span class="pun">);</span><span class="pln">
    </span><span class="typ">Assert</span><span class="pun">.</span><span class="typ">IsTrue</span><span class="pun">(</span><span class="typ">MeasureElapsedTime</span><span class="pun">(()</span><span class="pln"> </span><span class="pun">=&gt;</span><span class="pln"> c</span><span class="pun">.</span><span class="typ">AdvanceBy</span><span class="pun">(</span><span class="pln">d</span><span class="pun">),</span><span class="pln"> c</span><span class="pun">)</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> d</span><span class="pun">);</span><span class="pln">
</span><span class="pun">}</span></code></pre>
<p>The cost you pay for asking for clocks is ‘constructor bloat’. It’s 
no good to have a global clock or a singleton clock, because different 
tests use different clocks and you don’t want them to interfere with 
each other. Each class that wants a clock ends up asking for it in its 
constructor (or in the relevant methods). You end up handing the clock 
around a lot (along with sorts of external provider interfaces). The 
issue can be alleviated somewhat by dependency injection frameworks, 
which basically do the propagation for you.</p>
<h3>Bonus Benefits</h3>
<p>Interestingly, once you’re asking for clocks everywhere, you can start reaping some benefits unrelated to testing.</p>
<p>For example, consider that program that shows a prompt after five 
minutes of inactivity. Suppose a user starts the program, closes their 
laptop to put it to sleep, comes back an hour later, and opens their 
laptop. What happens? The program throws up an “Are you still there?” 
prompt <em>in response to user activity</em>. I had an old laptop that 
did this with the screensaver: I’d open the laptop, see the desktop for a
 second, and then the screen saver would trigger because I hadn’t moved 
the mouse in “hours”.</p>
<p>In the above example, the problem is that the program is waiting for <em>external time</em> to pass when it should actually care about <em>program-is-active time</em>.
 When the computer hibernates, or a debugger breakpoint is hit, the 
program is unable to be active and so the timeout should pause. Given 
that you’re already passing clock around, why not use a clock that 
pauses when the program pauses and save yourself some trouble when 
debugging?</p>
<p>I actually implemented exactly such a clock, and use it regularly. 
Below is a ‘ProgramClock’, which wraps a ‘PauseSkippingClock’ (pretends 
no time passed when its underlying clock has advanced a lot since the 
last call), which itself wraps a ‘SystemClock’ that advances with 
external time. When the program is halted for more than a few seconds a 
periodic callback can’t occur, the PauseSkippingClock detects a pause 
(not shown), and the halted time is skipped.</p>
<pre><code class="prettyprint"><span class="com">///&lt;summary&gt;</span><span class="pln">
</span><span class="com">/// An &lt;see cref="IClock" /&gt; that advances in real time while the program is running.</span><span class="pln">
</span><span class="com">/// Doesn't advance while execution is halted.</span><span class="pln">
</span><span class="com">/// For example, stops during debugger breakpoints and during system hibernation.</span><span class="pln">
</span><span class="com">/// &lt;/summary&gt;</span><span class="pln">
</span><span class="com">/// &lt;remarks&gt;</span><span class="pln">
</span><span class="com">/// Uses a shared &lt;see cref="PauseSkippingClock" /&gt; to ensure only one periodic check occurs.</span><span class="pln">
</span><span class="com">/// (The shared instance is garbage collectable when no &lt;see cref="ProgramClock" /&gt; instances exist.)</span><span class="pln">
</span><span class="com">/// &lt;/remarks&gt;</span><span class="pln">
</span><span class="pun">[</span><span class="typ">DebuggerDisplay</span><span class="pun">(</span><span class="str">"{ToString()}"</span><span class="pun">)]</span><span class="pln">
</span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">sealed</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">ProgramClock</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="typ">IClock</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">private</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">readonly</span><span class="pln"> </span><span class="typ">TimeSpan</span><span class="pln"> </span><span class="typ">TickPeriod</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">1.Seconds</span><span class="pun">();</span><span class="pln">
    </span><span class="kwd">private</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">readonly</span><span class="pln"> </span><span class="typ">TimeSpan</span><span class="pln"> </span><span class="typ">PausePeriod</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">3.Seconds</span><span class="pun">();</span><span class="pln">
    </span><span class="kwd">private</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">readonly</span><span class="pln"> </span><span class="typ">WeakReference</span><span class="pun">&lt;</span><span class="typ">IClock</span><span class="pun">&gt;</span><span class="pln"> </span><span class="typ">BackingClock</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">WeakReference</span><span class="pun">&lt;</span><span class="typ">IClock</span><span class="pun">&gt;(</span><span class="kwd">null</span><span class="pun">);</span><span class="pln">
    </span><span class="kwd">private</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">readonly</span><span class="pln"> </span><span class="kwd">object</span><span class="pln"> </span><span class="typ">BackingClockLock</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="kwd">object</span><span class="pun">();</span><span class="pln">
    </span><span class="kwd">private</span><span class="pln"> </span><span class="kwd">readonly</span><span class="pln"> </span><span class="typ">IClock</span><span class="pln"> _clock</span><span class="pun">;</span><span class="pln">

    </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">ProgramClock</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">lock</span><span class="pln"> </span><span class="pun">(</span><span class="typ">BackingClockLock</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
            </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="typ">BackingClock</span><span class="pun">.</span><span class="typ">TryGetTarget</span><span class="pun">(</span><span class="kwd">out</span><span class="pln"> _clock</span><span class="pun">))</span><span class="pln"> </span><span class="kwd">return</span><span class="pun">;</span><span class="pln">
            </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">_clock </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">PauseSkippingClock</span><span class="pun">(</span><span class="kwd">new</span><span class="pln"> </span><span class="typ">SystemClock</span><span class="pun">(),</span><span class="pln"> </span><span class="typ">TickPeriod</span><span class="pun">,</span><span class="pln"> </span><span class="typ">PausePeriod</span><span class="pun">);</span><span class="pln">
            </span><span class="typ">BackingClock</span><span class="pun">.</span><span class="typ">SetTarget</span><span class="pun">(</span><span class="kwd">this</span><span class="pun">.</span><span class="pln">_clock</span><span class="pun">);</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">

    </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">Task</span><span class="pln"> </span><span class="typ">At</span><span class="pun">(</span><span class="typ">Moment</span><span class="pln"> time</span><span class="pun">,</span><span class="pln"> </span><span class="typ">CancellationToken</span><span class="pln"> ct </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">default</span><span class="pun">(</span><span class="typ">CancellationToken</span><span class="pun">))</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">return</span><span class="pln"> _clock</span><span class="pun">.</span><span class="typ">At</span><span class="pun">(</span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Moment</span><span class="pun">(</span><span class="pln">_clock</span><span class="pun">,</span><span class="pln"> time</span><span class="pun">.</span><span class="typ">Ticks</span><span class="pun">),</span><span class="pln"> ct</span><span class="pun">);</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">

    </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">Moment</span><span class="pln"> </span><span class="typ">Time</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Moment</span><span class="pun">(</span><span class="kwd">this</span><span class="pun">,</span><span class="pln"> _clock</span><span class="pun">.</span><span class="typ">Time</span><span class="pun">().</span><span class="typ">Ticks</span><span class="pun">);</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">

    </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">override</span><span class="pln"> </span><span class="kwd">string</span><span class="pln"> </span><span class="typ">ToString</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">return</span><span class="pln"> </span><span class="typ">String</span><span class="pun">.</span><span class="typ">Format</span><span class="pun">(</span><span class="str">"ProgramClock: {0}"</span><span class="pun">,</span><span class="pln"> _clock</span><span class="pun">);</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code></pre>
<p>Note that the code uses a “dumb” periodic callback to detect the 
program being paused, because the amount of work that would be required 
to (incorrectly) figure out all the ways a program might be paused as 
well as how to “properly” detect each happening is absurd.</p>
<p>Ironically, due to the need to ensure allocating many program clocks 
couldn’t cause many periodic callbacks and due to the extraction of 
testable bits into PauseSkippingClock, ProgramClock is not very 
testable. I’m not above making tradeoffs.</p>
<p>Other clocks I’ve implemented and used include PausableClock and 
MultiplicativeClock. They come in handy when you want things to stop or 
run at a different speed, without having to rewrite those components. It
 is so incredibly satisfying to make a simple game pausable by changing 
two lines of code.</p>
<h3>Summary</h3>
<p>Asking for a clock makes time-dependent code easier to test, and adds
 some unexpected flexibility as a bonus. It is a specific instance of 
“Ask For What You Need”, a basic tenet of writing <a href="http://www.youtube.com/watch?v=wEhu57pih5w">clean testable code</a>.</p>
<p>You can pull the same trick with other external dependencies. 
Sometimes the appropriate type is even already in the language. For 
example a class that asks for an IP address in order to create a 
NetworkSocket in order to get a (network) stream is hard to test. A 
class that just asks for a stream is easy to test, and more flexible.</p>
<p>—</p>
<h3>Discuss on <a href="http://www.reddit.com/r/programming/comments/1cg36o/ask_for_the_clock/">Reddit</a>, <a href="https://news.ycombinator.com/item?id=5556536">Hacker News</a></h3>
<p>—</p>

<blockquote><p>
<span style="color:#4A9EC2"><em><br>
Twisted Oak Studios offers consulting and development on high-tech interactive projects. Check out our <a href="http://twistedoakstudios.com/portfolio/">portfolio</a>, or <a href="mailto:contact@twistedoakstudios.com">Give us a shout</a> if you have anything you think some really rad engineers should help you with.<br>
</em></span>
</p></blockquote>
<h2 class="endofpage">Older Posts</h2>
<p></p><ul>
     <li><a href="http://twistedoakstudios.com/blog/Post4008_collapsing-futures-easy-to-use-hard-to-represent" rel="bookmark" title="Permanent Link to Collapsing Futures: Easy to Use, Hard to Represent">Collapsing Futures: Easy to Use, Hard to Represent</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post3858_eventual-exceptions-vs-programming-in-a-minimal-functional-style" rel="bookmark" title="Permanent Link to Eventual Exceptions vs Programming in a Minimal Functional Style">Eventual Exceptions vs Programming in a Minimal Functional Style</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post3769_the-mystery-of-flunf" rel="bookmark" title="Permanent Link to The Mystery of Flunf">The Mystery of Flunf</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post3724_explain-it-like-im-five-the-socialist-millionaire-problem-and-secure-multi-party-computation" rel="bookmark" title="Permanent Link to Explain it like I’m Five: The Socialist Millionaire Problem and Secure Multi-Party Computation">Explain it like I’m Five: The Socialist Millionaire Problem and Secure Multi-Party Computation</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post3631_computer-science-blows-my-mind" rel="bookmark" title="Permanent Link to Computer Science Blows My Mind">Computer Science Blows My Mind</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post3484_a-visit-to-execution-labs-in-montreal" rel="bookmark" title="Permanent Link to A visit to Execution Labs in Montréal">A visit to Execution Labs in Montréal</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post3573_transmuting-dice-conserving-entropy" rel="bookmark" title="Permanent Link to Transmuting Dice, Conserving Entropy">Transmuting Dice, Conserving Entropy</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post3477_rule-of-thumb-use-purposefully-weakened-methods" rel="bookmark" title="Permanent Link to Rule of Thumb: Use Purposefully Weakened Methods">Rule of Thumb: Use Purposefully Weakened Methods</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post3376_rule-of-thumb-preconditions-should-be-checked-explicitly" rel="bookmark" title="Permanent Link to Rule of thumb: Preconditions Should be Checked Explicitly">Rule of thumb: Preconditions Should be Checked Explicitly</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post3280_intersecting-linked-lists-faster" rel="bookmark" title="Permanent Link to Intersecting Linked Lists Faster">Intersecting Linked Lists Faster</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post3138_mouse-path-smoothing-for-jack-lumber" rel="bookmark" title="Permanent Link to Mouse Path Smoothing for Jack Lumber">Mouse Path Smoothing for Jack Lumber</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post3044_my-bug-my-bad-2-sunk-by-float" rel="bookmark" title="Permanent Link to My Bug, My Bad #2: Sunk by Float">My Bug, My Bad #2: Sunk by Float</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post2852_repeat-yourself-differently" rel="bookmark" title="Permanent Link to Repeat Yourself Differently">Repeat Yourself Differently</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post2644_grovers-quantum-search-algorithm" rel="bookmark" title="Permanent Link to Grover’s Quantum Search Algorithm">Grover’s Quantum Search Algorithm</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post2766_followup-to-non-nullable-types-vs-c" rel="bookmark" title="Permanent Link to Followup to Non-Nullable Types vs C#">Followup to Non-Nullable Types vs C#</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post2540_optimizing-just-in-time-with-expression-trees" rel="bookmark" title="Permanent Link to Optimizing Just in Time with Expression Trees">Optimizing Just in Time with Expression Trees</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post2353_when-one-way-latency-doesnt-matter" rel="bookmark" title="Permanent Link to When One-Way Latency Doesn’t Matter">When One-Way Latency Doesn’t Matter</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post2194_determining-exactly-ifwhenwhere-a-moving-line-intersected-a-moving-point" rel="bookmark" title="Permanent Link to Determining exactly if/when/where a moving line intersected a moving point">Determining exactly if/when/where a moving line intersected a moving point</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post2061_emulating-actors-in-c-with-asyncawait" rel="bookmark" title="Permanent Link to Emulating Actors in C# with Async/Await">Emulating Actors in C# with Async/Await</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post2096_making-an-immutable-queue-with-guaranteed-constant-time-operations" rel="bookmark" title="Permanent Link to Making an immutable queue with guaranteed constant time operations">Making an immutable queue with guaranteed constant time operations</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post399_improving-checked-exceptions" rel="bookmark" title="Permanent Link to Improving Checked Exceptions">Improving Checked Exceptions</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post1941_perishable-collections-the-benefits-of-removal-by-lifetime" rel="bookmark" title="Permanent Link to Perishable Collections: The Benefits of Removal-by-Lifetime">Perishable Collections: The Benefits of Removal-by-Lifetime</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post1823_decoupling-shared-control" rel="bookmark" title="Permanent Link to Decoupling shared control">Decoupling shared control</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post1694_decoupling-inlined-ui-code" rel="bookmark" title="Permanent Link to Decoupling inlined UI code">Decoupling inlined UI code</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post1585_linq-to-collections-beyond-ienumerablet" rel="bookmark" title="Permanent Link to Linq to Collections: Beyond IEnumerable&lt;T&gt;">Linq to Collections: Beyond IEnumerable&lt;T&gt;</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post1295_publish-your-net-library-as-a-nuget-package" rel="bookmark" title="Permanent Link to Publish your .Net library as a NuGet package">Publish your .Net library as a NuGet package</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post1130_when-null-is-not-enough-an-option-type-for-c" rel="bookmark" title="Permanent Link to When null is not enough: an option type for C#">When null is not enough: an option type for C#</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post1473_unfathomable-bugs-5-readonly-or-not" rel="bookmark" title="Permanent Link to Unfathomable Bugs #5: Readonly or not">Unfathomable Bugs #5: Readonly or not</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post667_minkowski-sums-examples" rel="bookmark" title="Permanent Link to Minkowski sums: examples">Minkowski sums: examples</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post1080_my-bug-my-bad-1-fractal-spheres" rel="bookmark" title="Permanent Link to My Bug, My Bad #1: Fractal Spheres">My Bug, My Bad #1: Fractal Spheres</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post1007_working-around-the-brittle-ui-virtualization-in-windows-8" rel="bookmark" title="Permanent Link to Working around the brittle UI Virtualization in Windows 8">Working around the brittle UI Virtualization in Windows 8</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post938_encapsulating-angles" rel="bookmark" title="Permanent Link to Encapsulating Angles">Encapsulating Angles</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post925_unfathomable-bugs-4-keys-that-arent" rel="bookmark" title="Permanent Link to Unfathomable Bugs #4: Keys that aren’t">Unfathomable Bugs #4: Keys that aren’t</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post867_how-would-i-even-use-a-monad-in-c" rel="bookmark" title="Permanent Link to How would I even use a monad (in C#)?">How would I even use a monad (in C#)?</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post822_useful-methods-1-observable-wheneach" rel="bookmark" title="Permanent Link to Useful/Interesting Methods #1: Observable.WhenEach">Useful/Interesting Methods #1: Observable.WhenEach</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post818_unfathomable-bugs-3-stringing-you-along" rel="bookmark" title="Permanent Link to Unfathomable Bugs #3: Stringing you along">Unfathomable Bugs #3: Stringing you along</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post774_anonymous-implementation-classes-a-design-pattern-for-c" rel="bookmark" title="Permanent Link to Anonymous Implementation Classes – A Design Pattern for C#">Anonymous Implementation Classes – A Design Pattern for C#</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post532_tasks-for-action-script-3" rel="bookmark" title="Permanent Link to Tasks for ActionScript 3 – Improving on Event-Driven Programming">Tasks for ActionScript 3 – Improving on Event-Driven Programming</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post554_minkowski-sums-and-differences" rel="bookmark" title="Permanent Link to Minkowski sums and differences">Minkowski sums and differences</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post330_non-nullable-types-vs-c-fixing-the-billion-dollar-mistake" rel="bookmark" title="Permanent Link to Non-Nullable Types vs C#: Fixing the Billion Dollar Mistake">Non-Nullable Types vs C#: Fixing the Billion Dollar Mistake</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post384_unfathomable-bugs-2-slashing-out" rel="bookmark" title="Permanent Link to Unfathomable Bugs #2: Slashing Out">Unfathomable Bugs #2: Slashing Out</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post404_script-templates-and-base-classes" rel="bookmark" title="Permanent Link to Script templates and base classes">Script templates and base classes</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post373_unity-font-extraction" rel="bookmark" title="Permanent Link to Unity font extraction">Unity font extraction</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post341_abusing-phantom-types-to-encode-list-lengths-into-their-type" rel="bookmark" title="Permanent Link to Abusing “Phantom Types” to Encode List Lengths Into Their Type">Abusing “Phantom Types” to Encode List Lengths Into Their Type</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post261_constructive-criticism-of-the-reactive-extensions-api" rel="bookmark" title="Permanent Link to Constructive Criticism of the Reactive Extensions API">Constructive Criticism of the Reactive Extensions API</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post241_quaternions-part-3-2" rel="bookmark" title="Permanent Link to Quaternions part 3">Quaternions part 3</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post204_quaternions-part-2" rel="bookmark" title="Permanent Link to Quaternions part 2">Quaternions part 2</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post144_quaternions-part-1" rel="bookmark" title="Permanent Link to Quaternions part 1">Quaternions part 1</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post157_unfathomable-bugs-1-you-can-have-things-you-can-have-things-in-things-you-can-have" rel="bookmark" title="Permanent Link to Unfathomable Bugs #1: You can have things! You can have things IN things! You can have …">Unfathomable Bugs #1: You can have things! You can have things IN things! You can have …</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post83_coroutines-more-than-you-want-to-know" rel="bookmark" title="Permanent Link to Coroutines – More than you want to know">Coroutines – More than you want to know</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post74_asset-bundle-helper" rel="bookmark" title="Permanent Link to Asset Bundle Helper">Asset Bundle Helper</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post60_the-visual-studio-goes-away" rel="bookmark" title="Permanent Link to The Visual Studio goes away">The Visual Studio goes away</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post57_nets-time-traveling-stopwatch" rel="bookmark" title="Permanent Link to .Net’s time traveling StopWatch">.Net’s time traveling StopWatch</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post3718_polish" rel="bookmark" title="Permanent Link to Polish">Polish</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post29_introducing-catalyst" rel="bookmark" title="Permanent Link to Introducing Catalyst">Introducing Catalyst</a></li>
  </ul>
<p></p>


			</div><!-- #content -->
			</section>

			</div>
		</div><!-- #container -->


</span></div><!-- .container -->

 <div id="upprev_box" style="right: -400px;">
	<h6>
		More interesting posts <span class="num"> (4 of 12 articles)</span>
	</h6>
	<div class="upprev_excerpt">
		<p>
			<a href="http://twistedoakstudios.com/blog/Post3477_rule-of-thumb-use-purposefully-weakened-methods" rel="prev">Rule of Thumb: Use Purposefully Weakened Methods</a>
		</p>
	</div>
	
		<p>
Or check out our <a href="http://twistedoakstudios.com/portfolio">Portfolio</a>.		</p><button id="upprev_close" type="button">Close</button>
</div><!-- #upprev_box -->
<link rel="stylesheet" id="al2fb_style-css" href="Rule%20of%20Thumb%20-%20Ask%20for%20the%20Clock_files/add-link-to-facebook.css" type="text/css" media="all">
<link rel="stylesheet" id="admin-bar-css" href="Rule%20of%20Thumb%20-%20Ask%20for%20the%20Clock_files/admin-bar.css" type="text/css" media="all">
<link rel="stylesheet" id="upprev-css-css" href="Rule%20of%20Thumb%20-%20Ask%20for%20the%20Clock_files/upprev.css" type="text/css" media="all">
<link rel="stylesheet" id="wp-quicklatex-format-css" href="Rule%20of%20Thumb%20-%20Ask%20for%20the%20Clock_files/quicklatex-format.css" type="text/css" media="all">
<script type="text/javascript" src="Rule%20of%20Thumb%20-%20Ask%20for%20the%20Clock_files/admin-bar.js"></script>
<script type="text/javascript" src="Rule%20of%20Thumb%20-%20Ask%20for%20the%20Clock_files/jquery_002.js"></script>
<script type="text/javascript" src="Rule%20of%20Thumb%20-%20Ask%20for%20the%20Clock_files/upprev_js.php"></script>
<script type="text/javascript" src="Rule%20of%20Thumb%20-%20Ask%20for%20the%20Clock_files/comment-reply.js"></script>
	<script type="text/javascript">
		(function() {
			var request, b = document.body, c = 'className', cs = 'customize-support', rcs = new RegExp('(^|\\s+)(no-)?'+cs+'(\\s+|$)');

			request = true;

			b[c] = b[c].replace( rcs, ' ' );
			b[c] += ( window.postMessage && request ? ' ' : ' no-' ) + cs;
		}());
	</script>
			

		 
<!-- BEGIN footer-type stuff -->
<div class="container footer-container">
	<div class="row">
		
		<div class="fourcol last"><!-- .last b/c it's floated right -->
      <!-- home portfolio used to be here -->
		</div>

		<div class="eightcol" id="contact">
			<p>Twisted Oak Studios<br>
				138-1657 Barrington St.<br>
				Halifax, NS, Canada B3J 2A1</p>
			
			<p>001-902-237-7326<br>
			<a href="mailto:contact@twistedoakstudios.com">contact@twistedoakstudios.com</a></p>
		</div>

		<div class="twelvecol">
			<footer>
				<small>©2012
					<script>
						var d=new Date(); 
						yr=d.getFullYear();
						if (yr!=2012)
						document.write("- "+yr);
					</script>- 2013 Twisted Oak Studios Ltd. -- All Rights Reserved -- All images and logos are property of their respective owners.
				</small>
			</footer>
		</div>
		
		
	</div><!-- .row -->
</div><!-- .container -->
<!-- END footer stuff-->

<!-- jQuery and scrolly script for contact link -->
<script src="Rule%20of%20Thumb%20-%20Ask%20for%20the%20Clock_files/jquery.js"></script>
  <script>window.jQuery || document.write('<script src="../js/libs/jquery-1.6.2.min.js"><\/script>')</script>

<script src="Rule%20of%20Thumb%20-%20Ask%20for%20the%20Clock_files/scrolly.js"></script>


  <!-- Don't forget Analytics! -->



  <!-- Prompt IE 6 users to install Chrome Frame. Remove this if you want to support IE 6.
       chromium.org/developers/how-tos/chrome-frame-getting-started -->
  <!--[if lt IE 7 ]>
    <script src="//ajax.googleapis.com/ajax/libs/chrome-frame/1.0.3/CFInstall.min.js"></script>
    <script>window.attachEvent('onload',function(){CFInstall.check({mode:'overlay'})})</script>
  <![endif]-->
  


<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-31441525-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>
<div id="wpadminbar" class="nojq " role="navigation">
			<a class="screen-reader-shortcut" href="#wp-toolbar" tabindex="1">Skip to toolbar</a>
			<div class="quicklinks" id="wp-toolbar" role="navigation" aria-label="Top navigation toolbar." tabindex="0">
				<ul id="wp-admin-bar-root-default" class="ab-top-menu">
		<li id="wp-admin-bar-wp-logo" class="menupop"><a class="ab-item" aria-haspopup="true" href="http://twistedoakstudios.com/blog/wp-admin/about.php" title="About WordPress"><span class="ab-icon"></span></a><div class="ab-sub-wrapper"><ul id="wp-admin-bar-wp-logo-default" class="ab-submenu">
		<li id="wp-admin-bar-about"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/about.php">About WordPress</a>		</li></ul><ul id="wp-admin-bar-wp-logo-external" class="ab-sub-secondary ab-submenu">
		<li id="wp-admin-bar-wporg"><a class="ab-item" href="http://wordpress.org/">WordPress.org</a>		</li>
		<li id="wp-admin-bar-documentation"><a class="ab-item" href="http://codex.wordpress.org/">Documentation</a>		</li>
		<li id="wp-admin-bar-support-forums"><a class="ab-item" href="http://wordpress.org/support/">Support Forums</a>		</li>
		<li id="wp-admin-bar-feedback"><a class="ab-item" href="http://wordpress.org/support/forum/requests-and-feedback">Feedback</a>		</li></ul></div>		</li>
		<li id="wp-admin-bar-site-name" class="menupop"><a class="ab-item" aria-haspopup="true" href="http://twistedoakstudios.com/blog/wp-admin/">twistedoakstudios.com</a><div class="ab-sub-wrapper"><ul id="wp-admin-bar-site-name-default" class="ab-submenu">
		<li id="wp-admin-bar-dashboard"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/">Dashboard</a>		</li></ul><ul id="wp-admin-bar-appearance" class="ab-submenu">
		<li id="wp-admin-bar-themes"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/themes.php">Themes</a>		</li>
		<li id="wp-admin-bar-customize" class="hide-if-no-customize"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/customize.php?url=http%3A%2F%2Ftwistedoakstudios.com%2Fblog%2FPost3516_rule-of-thumb-ask-for-the-clock">Customize</a>		</li></ul></div>		</li>
		<li id="wp-admin-bar-updates"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/update-core.php" title="2 Plugin Updates, 1 Theme Update"><span class="ab-icon"></span><span class="ab-label">3</span><span class="screen-reader-text">2 Plugin Updates, 1 Theme Update</span></a>		</li>
		<li id="wp-admin-bar-comments"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/edit-comments.php" title="0 comments awaiting moderation"><span class="ab-icon"></span><span id="ab-awaiting-mod" class="ab-label awaiting-mod pending-count count-0">0</span></a>		</li>
		<li id="wp-admin-bar-new-content" class="menupop"><a class="ab-item" aria-haspopup="true" href="http://twistedoakstudios.com/blog/wp-admin/post-new.php" title="Add New"><span class="ab-icon"></span><span class="ab-label">New</span></a><div class="ab-sub-wrapper"><ul id="wp-admin-bar-new-content-default" class="ab-submenu">
		<li id="wp-admin-bar-new-post"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/post-new.php">Post</a>		</li>
		<li id="wp-admin-bar-new-media"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/media-new.php">Media</a>		</li>
		<li id="wp-admin-bar-new-link"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/link-add.php">Link</a>		</li>
		<li id="wp-admin-bar-new-page"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/post-new.php?post_type=page">Page</a>		</li>
		<li id="wp-admin-bar-new-user"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/user-new.php">User</a>		</li></ul></div>		</li>
		<li id="wp-admin-bar-edit"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/post.php?post=3516&amp;action=edit">Edit Post</a>		</li></ul><ul id="wp-admin-bar-top-secondary" class="ab-top-secondary ab-top-menu">
		<li id="wp-admin-bar-search" class="admin-bar-search"><div class="ab-item ab-empty-item" tabindex="-1"><form action="http://twistedoakstudios.com/blog/" method="get" id="adminbarsearch"><input class="adminbar-input" name="s" id="adminbar-search" maxlength="150" type="text"><input class="adminbar-button" value="Search" type="submit"></form></div>		</li>
		<li id="wp-admin-bar-my-account" class="menupop with-avatar"><a class="ab-item" aria-haspopup="true" href="http://twistedoakstudios.com/blog/wp-admin/profile.php" title="My Account">Howdy, Craig Gidney<img alt="" src="Rule%20of%20Thumb%20-%20Ask%20for%20the%20Clock_files/31a6ce579f8f9f9d528715d1e941726e.png" class="avatar avatar-16 photo" height="16" width="16"></a><div class="ab-sub-wrapper"><ul id="wp-admin-bar-user-actions" class="ab-submenu">
		<li id="wp-admin-bar-user-info"><a class="ab-item" tabindex="-1" href="http://twistedoakstudios.com/blog/wp-admin/profile.php"><img alt="" src="Rule%20of%20Thumb%20-%20Ask%20for%20the%20Clock_files/31a6ce579f8f9f9d528715d1e941726e_002.png" class="avatar avatar-64 photo" height="64" width="64"><span class="display-name">Craig Gidney</span><span class="username">craig</span></a>		</li>
		<li id="wp-admin-bar-edit-profile"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/profile.php">Edit My Profile</a>		</li>
		<li id="wp-admin-bar-logout"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-login.php?action=logout&amp;_wpnonce=8450958ce8">Log Out</a>		</li></ul></div>		</li></ul>			</div>
			<a class="screen-reader-shortcut" href="http://twistedoakstudios.com/blog/wp-login.php?action=logout&amp;_wpnonce=8450958ce8">Log Out</a>
		</div></body></html>