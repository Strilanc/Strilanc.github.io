<!DOCTYPE html>
<!-- paulirish.com/2008/conditional-stylesheets-vs-css-hacks-answer-neither/ -->
<!--[if lt IE 7]> <html class="no-js ie6 oldie" lang="en"> <![endif]-->
<!--[if IE 7]>    <html class="no-js ie7 oldie" lang="en"> <![endif]-->
<!--[if IE 8]>    <html class="no-js ie8 oldie" lang="en"> <![endif]-->
<!-- Consider adding an manifest.appcache: h5bp.com/d/Offline -->
<!--[if gt IE 8]><!-->
<html class=" js flexbox canvas canvastext webgl no-touch geolocation postmessage no-websqldatabase indexeddb hashchange history draganddrop websockets rgba hsla multiplebgs backgroundsize borderimage borderradius boxshadow textshadow opacity cssanimations csscolumns cssgradients no-cssreflections csstransforms csstransforms3d csstransitions fontface generatedcontent video audio localstorage sessionstorage webworkers applicationcache svg inlinesvg smil svgclippaths" xmlns="http://www.w3.org/1999/xhtml" xmlns:og="http://ogp.me/ns#" xmlns:fb="https://www.facebook.com/2008/fbml" lang="en"><script id="bug.surrogate">var urchinTracker=function(){},_gaq={push:function(){try {if(arguments[0][0]=='_link')window.location.href=arguments[0][1]}catch(er){}}},_gat={_createTracker:function(){}, _getTracker:function(){return{__noSuchMethod__:function(){},_link:function(o){if(o)location.href=o;},_linkByPost:function(){return true;},_getLinkerUrl:function(o){return o;},_trackEvent:function(){}}}}; if (document.location.host == 'www.salon.com') {var _ga_ = document.querySelectorAll('script[src$=ga\\.js]')[0], ga_e = document.createEvent('Event'); ga_e.initEvent('load', true, true);_ga_.dispatchEvent(ga_e);}</script><!--<![endif]--><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
  <meta charset="utf-8">
   <!-- blog feed link -->
  <link href="http://twistedoakstudios.com/blog/?feed=rss" rel="alternate" type="application/rss+xml" title="Twisted Oak Studios Blog">

  <!-- Use the .htaccess and remove these lines to avoid edge case issues.
       More info: h5bp.com/b/378 -->
  <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">

  <title>Twisted Oak Studios | Game Developers | Unity 3D Development</title>
  <meta name="description" content="As a lean co-operative team of seasoned developers, Twisted Oak is able to offer efficient, flexible remote and on-the-floor development and consulting without any middle-man or excessive administrivia.">
  <meta name="author" content="/humans.txt">

  <meta name="viewport" content="width=device-width,initial-scale=1">

  <link rel="shortcut icon" href="http://twistedoakstudios.com/blog/favicon.ico">
  <link rel="apple-touch-icon-precomposed" href="http://twistedoakstudios.com/blog/apple-touch-icon-precomposed.png">

  	<!-- The 1140px Grid - http://cssgrid.net/ -->
	<link rel="stylesheet" href="Post261_constructive-criticism-of-the-reactive-extensions-api_files/1140.css">
    <link rel="stylesheet" href="Post261_constructive-criticism-of-the-reactive-extensions-api_files/style.css">
    <link rel="stylesheet" href="Post261_constructive-criticism-of-the-reactive-extensions-api_files/blogstyle.css">
<link rel="stylesheet" href="Post261_constructive-criticism-of-the-reactive-extensions-api_files/prettify.css" media="all">
<link rel="stylesheet" href="Post261_constructive-criticism-of-the-reactive-extensions-api_files/sunburst.css" media="all">
<script type="text/javascript" src="Post261_constructive-criticism-of-the-reactive-extensions-api_files/prettify.js"></script>

	<!-- Webfonts! -->
	<link href="Post261_constructive-criticism-of-the-reactive-extensions-api_files/css.css" rel="stylesheet" type="text/css">

	<!-- Open Graph -->
	<meta property="og:title" content="Twisted Oak Studios">
	<meta property="og:type" content="company">
	<meta property="og:url" content="http://www.twistedoakstudios.com/">
	<meta property="og:image" content="http://www.twistedoakstudios.com/images/logo.png">
	<meta property="og:description" content="As a lean co-operative team of seasoned developers, Twisted Oak is able to offer efficient, flexible remote and on-the-floor development and consulting without any middle-man or excessive administrivia.">
  
  <script src="Post261_constructive-criticism-of-the-reactive-extensions-api_files/modernizr-2.js"></script>
</head>
<body onload="prettyPrint()">
<!-- begin header -->
<div class="container header-container">
	<div class="row">
		<header>
			<div class="threecol">
				<a href="#"><img class="logo" src="Post261_constructive-criticism-of-the-reactive-extensions-api_files/logo.png"></a>
			</div><!-- .threecol -->
		
			<div class="fourcol navcol">
				<nav>
					<ul class="primary-nav clearfix">
						<li><a href="http://twistedoakstudios.com/">Home</a></li>
						<li><a href="http://twistedoakstudios.com/portfolio/">Portfolio</a></li>
						<li><a class="scroll" href="#contact">Contact</a></li>
						<li><a href="http://twistedoakstudios.com/blog/">Blog</a></li>
					</ul>
				</nav>
			</div>    

    	</header>
	</div><!-- .row -->
</div><!-- .container -->


	<div id="main">
<span class="blog">
<div class="container home-container" id="home">
	<div class="row">
		<section>
			
			<div class="ninecol">


<h2><a href="http://twistedoakstudios.com/blog/Post261_constructive-criticism-of-the-reactive-extensions-api" rel="bookmark" title="Permanent Link to Constructive Criticism of the Reactive Extensions API">Constructive Criticism of the Reactive Extensions API</a></h2>
<div class="meta">posted by Craig Gidney on September 6, 2012</div>

<p>I love the <a href="http://msdn.microsoft.com/en-us/data/gg577609.aspx">Reactive Extension (Rx)</a>
 library for .Net. You may also have heard it referred to as “linq to 
events”, which is a perfect name because Rx simplifies event handling in
 a linq-y functional style (also, the creators have a strange obsession 
with calling IObservable the dual of IEnumerable.).</p>
<p>You can use Rx to write event-driven systems that, written in the 
normal style, would be absolute messes. For example, consider this code 
that uses Rx plus some custom extension methods to implement ‘dragging 
the volume up and down’:</p>
<pre><code class="prettyprint"><span class="kwd">private</span><span class="pln"> async </span><span class="kwd">void</span><span class="pln"> </span><span class="typ">OnPressed</span><span class="pun">(</span><span class="kwd">object</span><span class="pln"> sender</span><span class="pun">,</span><span class="pln"> </span><span class="typ">PointerRoutedEventArgs</span><span class="pln"> e</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">var</span><span class="pln"> preVolume </span><span class="pun">=</span><span class="pln"> </span><span class="typ">GetVolume</span><span class="pun">();</span><span class="pln">

    </span><span class="kwd">var</span><span class="pln"> releasedNormally </span><span class="pun">=</span><span class="pln"> await </span><span class="kwd">this</span><span class="pun">.</span><span class="typ">CaptureObserveDrag</span><span class="pun">(</span><span class="pln">e</span><span class="pun">).</span><span class="typ">Select</span><span class="pun">(</span><span class="pln">pt </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">var</span><span class="pln"> f </span><span class="pun">=</span><span class="pln"> </span><span class="pun">(</span><span class="pln">pt</span><span class="pun">.</span><span class="typ">GetCurrentPoint</span><span class="pun">(</span><span class="kwd">this</span><span class="pun">).</span><span class="typ">Position</span><span class="pun">.</span><span class="pln">X</span><span class="pun">/</span><span class="kwd">this</span><span class="pun">.</span><span class="typ">ActualWidth</span><span class="pun">).</span><span class="typ">Between</span><span class="pun">(</span><span class="lit">0</span><span class="pun">,</span><span class="pln"> </span><span class="lit">1</span><span class="pun">);</span><span class="pln">
        </span><span class="typ">SetVolume</span><span class="pun">(</span><span class="pln">f</span><span class="pun">);</span><span class="pln">
        </span><span class="kwd">return</span><span class="pln"> f</span><span class="pun">;</span><span class="pln">
    </span><span class="pun">}).</span><span class="typ">WillCompleteNormally</span><span class="pun">();</span><span class="pln">

    </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">releasedNormally</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        </span><span class="typ">PlayBeep</span><span class="pun">();</span><span class="pln">
    </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">else</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        </span><span class="typ">SetVolume</span><span class="pun">(</span><span class="pln">preVolume</span><span class="pun">);</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code></pre>
<p>The equivalent code, written without Rx or something similar, is 
awful. You have to register for multiple events (PointerReleased, 
PointerMoved, PointerCancelled, CaptureLost), sprinkle state throughout 
the control’s code, and then the next time you want drag-like 
functionality you have to do it all over again from scratch.</p>
<p><em>Although the rest of this post is about issues I have with the Rx
 API, I absolutely recommend that you use it or at least read more about
 it.</em></p>
<p>—</p>
<p>The Rx API has a few gaping flaws in it that I really hope are fixed 
before it is set in concrete by being included in the .Net framework. I 
suppose the easiest way to cover them is awkwardly segueing into a list.</p>
<h3>1) Extension methods have return types that are too general. Return tasks instead of observables where possible.</h3>
<p>A method’s return type should closely match its set of possible 
results. Almost all of the observable extension methods return 
IObservable&lt;T&gt;, but many of them (Aggregate, First, All, Max, 
ToList, …) could return the more specific Task&lt;T&gt; instead. 
Returning a Task&lt;T&gt; ensures the user knows there is exactly one 
result (or an exception), and makes the result easier to use. This is 
especially significant now that C#5 includes async features that make 
working with tasks a breeze.</p>
<p>As an analogy, imagine if the enumerable extension method ToList 
returned an IEnumerable&lt;List&lt;T&gt;&gt; instead of a List&lt;T&gt;.
 You would be forced to call GetEnumerator() then MoveNext() then 
Current just to get what you actually wanted, and any static analysis 
tools would complain unless you made accessing Current dependent on 
MoveNext’s result. You know there’s always exactly one result, and the 
return type should reflect that fact.</p>
<p>To drive this point home, here is a concrete example. Suppose we want
 to print the average of the sums of integers in observables in a list, 
and consider Observable.Sum/ToArray returning either an IObservable or a
 Task.</p>
<p>First, returning a Task:</p>
<pre><code class="prettyprint"><span class="kwd">static</span><span class="pln"> async </span><span class="kwd">void</span><span class="pln"> </span><span class="typ">PrintAverageSum</span><span class="pun">(</span><span class="typ">IEnumerable</span><span class="pun">&lt;</span><span class="typ">IObservable</span><span class="str">&lt;int&gt;</span><span class="pun">&gt;</span><span class="pln"> observables</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">try</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">var</span><span class="pln"> asyncSums </span><span class="pun">=</span><span class="pln"> observables</span><span class="pun">.</span><span class="typ">Select</span><span class="pun">(</span><span class="pln">e </span><span class="pun">=&gt;</span><span class="pln"> e</span><span class="pun">.</span><span class="typ">Sum</span><span class="pun">());</span><span class="pln"> </span><span class="com">// enumerable task sums</span><span class="pln">
        </span><span class="kwd">var</span><span class="pln"> sums </span><span class="pun">=</span><span class="pln"> await </span><span class="typ">Task</span><span class="pun">.</span><span class="typ">WhenAll</span><span class="pun">(</span><span class="pln">asyncSums</span><span class="pun">);</span><span class="pln"> </span><span class="com">// enumerable of task --&gt; task of enumerable</span><span class="pln">
        </span><span class="kwd">var</span><span class="pln"> avg </span><span class="pun">=</span><span class="pln"> sums</span><span class="pun">.</span><span class="typ">Average</span><span class="pun">();</span><span class="pln"> </span><span class="com">// compute average in the normal way</span><span class="pln">
        </span><span class="typ">Print</span><span class="pun">(</span><span class="pln">avg</span><span class="pun">);</span><span class="pln"> </span><span class="com">// print result</span><span class="pln">
    </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">catch</span><span class="pln"> </span><span class="pun">(</span><span class="typ">Exception</span><span class="pln"> ex</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        </span><span class="typ">Print</span><span class="pun">(</span><span class="pln">ex</span><span class="pun">);</span><span class="pln"> </span><span class="com">// print exception (if any)</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code></pre>
<p>Second, returning an IObservable:</p>
<pre><code class="prettyprint"><span class="kwd">static</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> </span><span class="typ">PrintAverageSum</span><span class="pun">(</span><span class="typ">IEnumerable</span><span class="pun">&lt;</span><span class="typ">IObservable</span><span class="str">&lt;int&gt;</span><span class="pun">&gt;</span><span class="pln"> observables</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">var</span><span class="pln"> sums </span><span class="pun">=</span><span class="pln"> observables</span><span class="pun">.</span><span class="typ">Select</span><span class="pun">(</span><span class="pln">e </span><span class="pun">=&gt;</span><span class="pln"> e</span><span class="pun">.</span><span class="typ">Sum</span><span class="pun">())</span><span class="pln"> </span><span class="com">// enumerable observable sums</span><span class="pln">
                          </span><span class="pun">.</span><span class="typ">ToObservable</span><span class="pun">()</span><span class="pln"> </span><span class="com">// convert top-level enumerable to observable</span><span class="pln">
                          </span><span class="pun">.</span><span class="typ">SelectMany</span><span class="pun">(</span><span class="pln">e </span><span class="pun">=&gt;</span><span class="pln"> e</span><span class="pun">)</span><span class="pln"> </span><span class="com">// flatten two-level observable</span><span class="pln">
                          </span><span class="pun">.</span><span class="typ">ToArray</span><span class="pun">();</span><span class="pln"> </span><span class="com">// group all items into observable single int[]</span><span class="pln">
     </span><span class="kwd">var</span><span class="pln"> avg </span><span class="pun">=</span><span class="pln"> sums</span><span class="pun">.</span><span class="typ">Select</span><span class="pun">(</span><span class="pln">e </span><span class="pun">=&gt;</span><span class="pln"> e</span><span class="pun">.</span><span class="typ">Average</span><span class="pun">());</span><span class="pln"> </span><span class="com">// single observable average of all sums</span><span class="pln">
     avg</span><span class="pun">.</span><span class="typ">Subscribe</span><span class="pun">(</span><span class="typ">Observer</span><span class="pun">.</span><span class="typ">Create</span><span class="str">&lt;double&gt;</span><span class="pun">(</span><span class="pln"> </span><span class="com">// print result or exception</span><span class="pln">
        v </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="typ">Print</span><span class="pun">(</span><span class="pln">v</span><span class="pun">),</span><span class="pln">
        ex </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="typ">Print</span><span class="pun">(</span><span class="pln">ex</span><span class="pun">)));</span><span class="pln">
</span><span class="pun">}</span></code></pre>
<p>The task variant has two big advantages here: it looks more like 
“normal” C# and it is easier to analyze. It uses standard control flow 
(try-catch) and it is trivially clear that exactly one thing is printed.
 The observable variant is forced to use custom control flow built out 
of lambdas, which is easier to get wrong. Also, proving that it prints 
exactly one thing requires knowing that the observable returned from 
Observable.ToArray contains exactly one item (or an exception). This 
fact is not present in the method’s signature, meaning static analysis 
tools will have difficulty with it.</p>
<p>These advantages compound as methods become more complicated, especially in the presence of asynchronous loops and branches.</p>
<p><em>Note that, when Rx was first released, .Net didn’t have the Task 
type yet (it was introduced in .Net 4.0). Using task types would make Rx
 incompatible with .Net 3.5, but I think it’s worth it.</em></p>
<h3>2) The caller should manage the “lifetime data” of a subscription. Use cancellation tokens, not returned disposables.</h3>
<p>Many asynchronous methods in the .Net base class library have a 
CancellationToken parameter, used to allow disposal/cancellation of the 
result. In contrast, the Rx Subscribe methods return an IDisposable 
allows disposal/cancellation of the subscription. The cancellation token
 approach is fundamentally better for a few reasons:</p>
<ol>
<li><strong>Matching lifetimes</strong>: The lifetime of a subscription 
often matches the lifetime of other subscriptions or of the calling 
method. If you are using cancellation tokens then the same token can be 
used for all subscriptions with the same lifetime, or the token given to
 the caller can be passed along. If you are using returned disposables, 
then you must write additional wiring code each time.</li>
<li><strong>Dependent lifetimes</strong>: The lifetime of a subscription
 often matches the lifetime of the observable to which it is subscribed.
 If you are using cancellation tokens this is achieved simply by passing
 CancellationToken.None. To do this with returned disposables you must 
choose between two evils, to prevent the subscriptions from being 
collected: either force users to store the disposable subscription 
tokens and draw their ire or break the convention that finalization 
implies disposal and draw the ire of code analysis tools like FxCop 
(letting a disposable go out of scope without disposing it is a 
warning).</li>
<li><strong>Single results</strong>: The return value of a method is 
often used for some other purpose. If that method must also allow 
management of the lifetime of a subscription then returning a disposable
 requires returning an awkward combination type or using an out 
parameter. Using a cancellation token is unaffected by the return type: 
just add the token parameter like usual.</li>
</ol>
<p>Cancellation tokens just work better. They’re easier to add to 
existing methods, they handle edge cases nicely, they have the exact 
semantics you want, and they even play nice with optional parameters 
because default(CancellationToken) is CancellationToken.None.</p>
<h3>3) <span style="text-decoration: underline;"><a href="http://www.youtube.com/watch?v=heh4OeB9A-c">When in doubt, leave it out.</a></span> The exposed API is too large.</h3>
<p>The Rx framework exposes a lot of classes that don’t necessarily need
 to be exposed. For example, 
System.Reactive.Disposables.RefCountDisposable is a public class that</p>
<blockquote><p>Represents a disposable resource that only disposes its 
underlying disposable resource when all 
System.Reactive.Disposables.RefCountDisposable.GetDisposable() have been
 disposed.</p></blockquote>
<p>This class is <em>potentially</em> useful, but it’s also something 
that must be learned and considered when exploring the API. The Rx 
framework is full of bits like this that almost no one will ever use. 
Browsing it all in the object explorer is frankly a little daunting.</p>
<p>The Rx framework also exposes types like System.Reactive.Unit (the 
‘void’ value) and System.Reactive.Disposables.ICancelable (disposable 
with IsDisposed getter). These are great types to have, but they’re so 
great that the user probably already has one implemented. Giving them 
another “not a value” value just creates conflict between their code and
 your code.</p>
<p>—</p>
<p>In spite of the flaws I’ve listed (reducible return types, awkward 
lifetimes, large API), Rx is still a very useful framework. It’s just 
not as good as it could be. The longer we wait, the harder it will be to
 change it.</p>
<p><em>Honestly, it’s probably already too late.</em></p>
<p><em>Update</em>: <a href="http://channel9.msdn.com/Tags/bart+de+smet">Bart De Smet</a>, one of the Rx devs, has posted an <a href="http://www.reddit.com/r/programming/comments/zg0ld/constructive_criticism_of_the_reactive_extensions/c64eu4b">excellent response to this critique</a>.</p>

<blockquote><p>
<span style="color:#4A9EC2"><em><br>
Twisted Oak Studios offers efficient, flexible remote and on-the-floor 
development and consulting without any middle-man or excessive 
administrivia. <a href="mailto:contact@twistedoakstudios.com">Give us a shout</a> if you have anything you think some really rad engineers should help you with.<br>
</em></span>
</p></blockquote>
<h2>Older Posts</h2>
<p></p><ul>
     <li><a href="http://twistedoakstudios.com/blog/Post1295_publish-your-net-library-as-a-nuget-package" rel="bookmark" title="Permanent Link to Publish your .Net library as a NuGet package">Publish your .Net library as a NuGet package</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post1130_when-null-is-not-enough-an-option-type-for-c" rel="bookmark" title="Permanent Link to When null is not enough: an option type for C#">When null is not enough: an option type for C#</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post1473_unfathomable-bugs-5-readonly-or-not" rel="bookmark" title="Permanent Link to Unfathomable Bugs #5: Readonly or not">Unfathomable Bugs #5: Readonly or not</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post667_minkowski-sums-examples" rel="bookmark" title="Permanent Link to Minkowski sums: examples">Minkowski sums: examples</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post1080_my-bug-my-bad-1-fractal-spheres" rel="bookmark" title="Permanent Link to My Bug, My Bad #1: Fractal Spheres">My Bug, My Bad #1: Fractal Spheres</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post1007_working-around-the-brittle-ui-virtualization-in-windows-8" rel="bookmark" title="Permanent Link to Working around the brittle UI Virtualization in Windows 8">Working around the brittle UI Virtualization in Windows 8</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post938_encapsulating-angles" rel="bookmark" title="Permanent Link to Encapsulating Angles">Encapsulating Angles</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post925_unfathomable-bugs-4-keys-that-arent" rel="bookmark" title="Permanent Link to Unfathomable Bugs #4: Keys that aren’t">Unfathomable Bugs #4: Keys that aren’t</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post867_how-would-i-even-use-a-monad-in-c" rel="bookmark" title="Permanent Link to How would I even use a monad (in C#)?">How would I even use a monad (in C#)?</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post822_useful-methods-1-observable-wheneach" rel="bookmark" title="Permanent Link to Useful/Interesting Methods #1: Observable.WhenEach">Useful/Interesting Methods #1: Observable.WhenEach</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post818_unfathomable-bugs-3-stringing-you-along" rel="bookmark" title="Permanent Link to Unfathomable Bugs #3: Stringing you along">Unfathomable Bugs #3: Stringing you along</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post774_anonymous-implementation-classes-a-design-pattern-for-c" rel="bookmark" title="Permanent Link to Anonymous Implementation Classes – A Design Pattern for C#">Anonymous Implementation Classes – A Design Pattern for C#</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post532_tasks-for-action-script-3" rel="bookmark" title="Permanent Link to Tasks for ActionScript 3 – Improving on Event-Driven Programming">Tasks for ActionScript 3 – Improving on Event-Driven Programming</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post554_minkowski-sums-and-differences" rel="bookmark" title="Permanent Link to Minkowski sums and differences">Minkowski sums and differences</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post330_non-nullable-types-vs-c-fixing-the-billion-dollar-mistake" rel="bookmark" title="Permanent Link to Non-Nullable Types vs C#: Fixing the Billion Dollar Mistake">Non-Nullable Types vs C#: Fixing the Billion Dollar Mistake</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post384_unfathomable-bugs-2-slashing-out" rel="bookmark" title="Permanent Link to Unfathomable Bugs #2: Slashing Out">Unfathomable Bugs #2: Slashing Out</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post404_script-templates-and-base-classes" rel="bookmark" title="Permanent Link to Script templates and base classes">Script templates and base classes</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post373_unity-font-extraction" rel="bookmark" title="Permanent Link to Unity font extraction">Unity font extraction</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post341_abusing-phantom-types-to-encode-list-lengths-into-their-type" rel="bookmark" title="Permanent Link to Abusing “Phantom Types” to Encode List Lengths Into Their Type">Abusing “Phantom Types” to Encode List Lengths Into Their Type</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post241_quaternions-part-3-2" rel="bookmark" title="Permanent Link to Quaternions part 3">Quaternions part 3</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post204_quaternions-part-2" rel="bookmark" title="Permanent Link to Quaternions part 2">Quaternions part 2</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post144_quaternions-part-1" rel="bookmark" title="Permanent Link to Quaternions part 1">Quaternions part 1</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post157_unfathomable-bugs-1-you-can-have-things-you-can-have-things-in-things-you-can-have" rel="bookmark" title="Permanent Link to Unfathomable Bugs #1: You can have things! You can have things IN things! You can have …">Unfathomable Bugs #1: You can have things! You can have things IN things! You can have …</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post83_coroutines-more-than-you-want-to-know" rel="bookmark" title="Permanent Link to Coroutines – More than you want to know">Coroutines – More than you want to know</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post74_asset-bundle-helper" rel="bookmark" title="Permanent Link to Asset Bundle Helper">Asset Bundle Helper</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post60_the-visual-studio-goes-away" rel="bookmark" title="Permanent Link to The Visual Studio goes away">The Visual Studio goes away</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post57_nets-time-traveling-stopwatch" rel="bookmark" title="Permanent Link to .Net’s time traveling StopWatch">.Net’s time traveling StopWatch</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post29_introducing-catalyst" rel="bookmark" title="Permanent Link to Introducing Catalyst">Introducing Catalyst</a></li>
  </ul>
<p></p>


			</div><!-- #content -->
			</section>

			</div>
		</div><!-- #container -->


</span></div><!-- .container -->


<!-- BEGIN footer-type stuff -->
<div class="container footer-container">
	<div class="row">
		
		<div class="fourcol last"><!-- .last b/c it's floated right -->
			<nav>
				<ul class="primary-nav clearfix">
					<li><a href="http://www.twistedoakstudios.com/">Home</a></li>
					<li><a href="http://twistedoakstudios.com/portfolio">Portfolio</a></li>
				</ul>
			</nav>
		</div>
		
		<div class="eightcol" id="contact">
			<p>Twisted Oak Studios<br>
				6082 Shirley Street<br>
				Halifax, NS, Canada B3H 2M8</p>
			
			<p>001-902-237-7326<br>
			<a href="mailto:contact@twistedoakstudios.com">contact@twistedoakstudios.com</a></p>
		</div>
		
		<div class="twelvecol">
			<footer>
				<small>©2012
					<script>
						var d=new Date(); 
						yr=d.getFullYear();
						if (yr!=2012)
						document.write("- "+yr);
					</script> Twisted Oak Studios Ltd. -- All Rights Reserved -- All images and logos are property of their respective owners.
				</small>
			</footer>
		</div>
		
		
	</div><!-- .row -->
</div><!-- .container -->
<!-- END footer stuff-->

<!-- jQuery and scrolly script for contact link -->
<script src="Post261_constructive-criticism-of-the-reactive-extensions-api_files/jquery.js"></script>
  <script>window.jQuery || document.write('<script src="../js/libs/jquery-1.6.2.min.js"><\/script>')</script>

<script src="Post261_constructive-criticism-of-the-reactive-extensions-api_files/scrolly.js"></script>


  <!-- Don't forget Analytics! -->



  <!-- Prompt IE 6 users to install Chrome Frame. Remove this if you want to support IE 6.
       chromium.org/developers/how-tos/chrome-frame-getting-started -->
  <!--[if lt IE 7 ]>
    <script src="//ajax.googleapis.com/ajax/libs/chrome-frame/1.0.3/CFInstall.min.js"></script>
    <script>window.attachEvent('onload',function(){CFInstall.check({mode:'overlay'})})</script>
  <![endif]-->
  

<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-31441525-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script></body></html>