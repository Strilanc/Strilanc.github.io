<!DOCTYPE html>
<!-- paulirish.com/2008/conditional-stylesheets-vs-css-hacks-answer-neither/ -->
<!--[if lt IE 7]> <html class="no-js ie6 oldie" lang="en"> <![endif]-->
<!--[if IE 7]>    <html class="no-js ie7 oldie" lang="en"> <![endif]-->
<!--[if IE 8]>    <html class="no-js ie8 oldie" lang="en"> <![endif]-->
<!-- Consider adding an manifest.appcache: h5bp.com/d/Offline -->
<!--[if gt IE 8]><!-->
<html class=" js flexbox canvas canvastext webgl no-touch geolocation postmessage no-websqldatabase indexeddb hashchange history draganddrop websockets rgba hsla multiplebgs backgroundsize borderimage borderradius boxshadow textshadow opacity cssanimations csscolumns cssgradients no-cssreflections csstransforms csstransforms3d csstransitions fontface generatedcontent video audio localstorage sessionstorage webworkers applicationcache svg inlinesvg smil svgclippaths" xmlns="http://www.w3.org/1999/xhtml" xmlns:og="http://ogp.me/ns#" xmlns:fb="https://www.facebook.com/2008/fbml" lang="en"><script>var urchinTracker=function(){},_gaq={push:function(){try {if(arguments[0][0]=='_link')window.location.href=arguments[0][1]}catch(er){}}},_gat={_createTracker:function(){}, _getTracker:function(){return{__noSuchMethod__:function(){},_link:function(o){if(o)location.href=o;},_linkByPost:function(){return true;},_getLinkerUrl:function(o){return o;},_trackEvent:function(){}}}};</script><!--<![endif]--><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
  <meta charset="utf-8">
   <!-- blog feed link -->
  <link href="http://twistedoakstudios.com/blog/?feed=rss" rel="alternate" type="application/rss+xml" title="Twisted Oak Studios Blog">

  <!-- Use the .htaccess and remove these lines to avoid edge case issues.
       More info: h5bp.com/b/378 -->
  <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">

  <title>Twisted Oak Studios | Unity3D Consulting | Technical Magic</title>
  <meta name="description" content="As a lean co-operative team of seasoned developers, Twisted Oak is able to offer efficient, flexible remote and on-the-floor development and consulting without any middle-man or excessive administrivia.">
  <meta name="author" content="/humans.txt">

  <meta name="viewport" content="width=device-width,initial-scale=1">

  <link rel="shortcut icon" href="http://twistedoakstudios.com/blog/favicon.ico">
  <link rel="apple-touch-icon-precomposed" href="http://twistedoakstudios.com/blog/apple-touch-icon-precomposed.png">

  	<!-- The 1140px Grid - http://cssgrid.net/ -->
	<link rel="stylesheet" href="Unfathomable%20Bugs%20%236%20-%20Pretend%20Precision_files/1140.css">
    <link rel="stylesheet" href="Unfathomable%20Bugs%20%236%20-%20Pretend%20Precision_files/style.css">
    <link rel="stylesheet" href="Unfathomable%20Bugs%20%236%20-%20Pretend%20Precision_files/blogstyle.css">
<link rel="stylesheet" href="Unfathomable%20Bugs%20%236%20-%20Pretend%20Precision_files/prettify.css" media="all">
<link rel="stylesheet" href="Unfathomable%20Bugs%20%236%20-%20Pretend%20Precision_files/sunburst.css" media="all">
<script type="text/javascript" src="Unfathomable%20Bugs%20%236%20-%20Pretend%20Precision_files/prettify.js"></script>

	<!-- Webfonts! -->
	<link href="Unfathomable%20Bugs%20%236%20-%20Pretend%20Precision_files/css.css" rel="stylesheet" type="text/css">

	<!-- Open Graph -->
	<meta property="og:title" content="Twisted Oak Studios">
	<meta property="og:type" content="company">
	<meta property="og:url" content="http://www.twistedoakstudios.com/">
	<meta property="og:image" content="http://www.twistedoakstudios.com/images/logo.png">
	<meta property="og:description" content="As a lean co-operative team of seasoned developers, Twisted Oak is able to offer efficient, flexible remote and on-the-floor development and consulting without any middle-man or excessive administrivia.">
  
  <script src="Unfathomable%20Bugs%20%236%20-%20Pretend%20Precision_files/modernizr-2.js"></script>
</head>
<body class=" customize-support" onload="prettyPrint()">
<!-- begin header -->
<div class="container header-container">
	<div class="row">
		<header>
			<div class="threecol">
				<a href="#"><img class="logo" src="Unfathomable%20Bugs%20%236%20-%20Pretend%20Precision_files/logo.png"></a>
			</div><!-- .threecol -->
		
			<div class="fourcol navcol">
				<nav>
					<ul class="primary-nav clearfix">
						<li><a href="http://twistedoakstudios.com/">Home</a></li>
						<li><a href="http://twistedoakstudios.com/portfolio/">Portfolio</a></li>
						<li><a href="http://twistedoakstudios.com/labs/">Labs</a></li>
						<li><a class="scroll" href="#contact">Contact</a></li>
						<li><a href="http://twistedoakstudios.com/blog/">Blog</a></li>
					</ul>
				</nav>
			</div>    

    	</header>
	</div><!-- .row -->
</div><!-- .container -->


	<div id="main">
<span class="blog">
<div class="container home-container" id="home">
	<div class="row">
    <p class="big-callout">We're hiring! Experience with Game Dev, Unity3D, Graphics, Signal Processing, or Networking? Eligible to work in Canada? 
      <a href="http://www.twistedoakstudios.com/jobs.php">Check it out</a>!

    </p>
		<section>
			
			<div class="ninecol">


<h2><a href="http://twistedoakstudios.com/blog/Post4428_unfathomable-bugs-6-pretend-precision" rel="bookmark" title="Permanent Link to Unfathomable Bugs #6: Pretend Precision">Unfathomable Bugs #6: Pretend Precision</a></h2>
<div class="meta">posted by Craig Gidney on June 18, 2013</div>

<p>Today’s bug comes courtesy of Apple. Thank you, Apple, this series 
wouldn’t exist without the generous support of entities like you.</p>
<p>—</p>
<p>It’s Friday evening. Me and my coworker Jazz are sitting at my desk. 
Our secure telephony client written in Objective-C is failing to 
initiating calls and we don’t know why. We catch some minor things, 
until Jazz notices a specific reproducible problem: the client is 
sending a <a href="http://en.wikipedia.org/wiki/Json">JSON</a>-encoded session id that’s slightly off. It’s almost correct, except for the last few digits.</p>
<p>I figure the bug has to be in the JSON serialization code. It doesn’t
 matter that I’ve previously stepped over the serialization code <em>line by line</em>
 in the debugger, and confirmed its correctness by checking the raw 
values against the corresponding JSON. It doesn’t matter that we’re not 
actually doing anything fancy, just calling the built-in JSON methods. 
There’s simply <em>nothing else</em> that touches the session id: we never generate ids client side, and we never do arithmetic on them.</p>
<p>I must be missing something stupid.</p>
<h3>Serial Confusion</h3>
<p>I decide to start from the simplest possible parsing code that works, using only actual data received from the server, and then <em>slowly</em>
 add details until the bug appears. This is a good approach to take when
 a bug renews your fear that computer gnomes might really exist.</p>
<p>I make a tiny test that simply has to work:</p>
<pre><code class="prettyprint"><span class="typ">NSString</span><span class="pun">*</span><span class="pln"> json </span><span class="pun">=</span><span class="pln"> </span><span class="pun">@</span><span class="str">"{\"sessionId\":6032314514195021674}"</span><span class="pun">;</span><span class="pln">
    
</span><span class="typ">NSData</span><span class="pun">*</span><span class="pln"> jsonData </span><span class="pun">=</span><span class="pln"> </span><span class="pun">[</span><span class="pln">json dataUsingEncoding</span><span class="pun">:</span><span class="pln">NSUTF8StringEncoding</span><span class="pun">];</span><span class="pln">
</span><span class="typ">NSError</span><span class="pun">*</span><span class="pln"> err</span><span class="pun">;</span><span class="pln">
</span><span class="typ">NSDictionary</span><span class="pun">*</span><span class="pln"> obj </span><span class="pun">=</span><span class="pln"> </span><span class="pun">[</span><span class="typ">NSJSONSerialization</span><span class="pln"> </span><span class="typ">JSONObjectWithData</span><span class="pun">:</span><span class="pln">jsonData options</span><span class="pun">:</span><span class="lit">0</span><span class="pln"> error</span><span class="pun">:&amp;</span><span class="pln">err</span><span class="pun">];</span><span class="pln">
    
</span><span class="typ">NSNumber</span><span class="pun">*</span><span class="pln"> sessionId </span><span class="pun">=</span><span class="pln"> </span><span class="pun">[</span><span class="pln">obj objectForKey</span><span class="pun">:@</span><span class="str">"sessionId"</span><span class="pun">];</span><span class="pln">
test</span><span class="pun">([</span><span class="pln">sessionId isEqualToNumber</span><span class="pun">:@</span><span class="lit">6032314514195021674</span><span class="pun">]);</span><span class="pln">
</span><strong><span style="background-color: #008000;"><span class="pln">PASS</span></span></strong></code></pre>
<p>See? It works. The parsed session id equals the correct value. Good. It would have been really inconvenient if that test failed.</p>
<p>I need to add a tiny detail now. We actually store the int64_t value 
of the NSNumber instead of the NSNumber itself. That value is accessed 
by using ‘longLongValue’.</p>
<p>I test that longLongValue also returns the right value:</p>
<pre><code class="prettyprint"><span class="pun">...</span><span class="pln">

test</span><span class="pun">([</span><span class="pln">sessionId isEqualToNumber</span><span class="pun">:@</span><span class="lit">6032314514195021674</span><span class="pun">]);</span><span class="pln">
</span><strong><span style="background-color: #008000;"><span class="pln">PASS</span></span></strong><span class="pln">
test</span><span class="pun">([</span><span class="pln">sessionId longLongValue</span><span class="pun">]</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> </span><span class="lit">6032314514195021674</span><span class="pun">);</span><span class="pln">
</span><strong><span style="background-color: #800000;"><span class="pln">FAIL</span><span class="pun">:</span><span class="pln"> </span><span class="lit">6032314514195021824</span><span class="pln"> </span><span class="pun">!=</span><span class="pln"> </span><span class="lit">6032314514195021674</span></span></strong></code></pre>
<p>Wait… what? The wrong long long came out.</p>
<p>Long longs are guaranteed to have at least 64 bits, and this 
particular session id should fit into a 64 bit integer, so there should 
be no rounding or other tom-foolery. Maybe there’s some issue with the 
longLongValue method, or storing such large values in an NSNumber?</p>
<p>I test if an NSNumber literal has the same issue:</p>
<pre><code class="prettyprint"><span class="pun">...</span><span class="pln">

test</span><span class="pun">([</span><span class="pln">sessionId isEqualToNumber</span><span class="pun">:@</span><span class="lit">6032314514195021674</span><span class="pun">]);</span><span class="pln">
</span><strong><span style="background-color: #008000;"><span class="pln">PASS</span></span></strong><span class="pln">
test</span><span class="pun">([</span><span class="pln">sessionId longLongValue</span><span class="pun">]</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> </span><span class="lit">6032314514195021674</span><span class="pun">);</span><span class="pln">
</span><strong><span style="background-color: #800000;"><span class="pln">FAIL</span><span class="pun">:</span><span class="pln"> </span><span class="lit">6032314514195021824</span><span class="pln"> </span><span class="pun">!=</span><span class="pln"> </span><span class="lit">6032314514195021674</span></span></strong><span class="pln">
test</span><span class="pun">([@</span><span class="lit">6032314514195021674</span><span class="pln"> longLongValue</span><span class="pun">]</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> </span><span class="lit">6032314514195021674</span><span class="pun">);</span><span class="pln">
</span><strong><span style="background-color: #008000;"><span class="pln">PASS</span></span></strong></code></pre>
<p>WHAT? The long long I pulled out of the parsed NSNumber is not equal to the value I pulled out of an <em>equal</em> literal NSNumber.</p>
<p>I’m really confused. Equal things are supposed to give equal results 
when run through a function. That’s like… a fundamental part of being 
equal.</p>
<p>Maybe I’m supposed to be accessing this value in a different way? I 
start trying things. Using unsignedLongLongValue… same problem. Using 
decimalValue… error? Weird. Using description…:</p>
<pre><code class="prettyprint"><span class="pun">...</span><span class="pln">

test</span><span class="pun">([</span><span class="pln">sessionId isEqualToNumber</span><span class="pun">:@</span><span class="lit">6032314514195021674</span><span class="pun">]);</span><span class="pln">
</span><strong><span style="background-color: #008000;"><span class="pln">PASS</span></span></strong><span class="pln">
test</span><span class="pun">([</span><span class="pln">sessionId longLongValue</span><span class="pun">]</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> </span><span class="lit">6032314514195021674</span><span class="pun">);</span><span class="pln">
</span><strong><span style="background-color: #800000;"><span class="pln">FAIL</span><span class="pun">:</span><span class="pln"> </span><span class="lit">6032314514195021824</span><span class="pln"> </span><span class="pun">!=</span><span class="pln"> </span><span class="lit">6032314514195021674</span></span></strong><span class="pln">
test</span><span class="pun">([@</span><span class="lit">6032314514195021674</span><span class="pln"> longLongValue</span><span class="pun">]</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> </span><span class="lit">6032314514195021674</span><span class="pun">);</span><span class="pln">
</span><strong><span style="background-color: #008000;"><span class="pln">PASS</span></span></strong><span class="pln">
test</span><span class="pun">([[</span><span class="pln">sessionId description</span><span class="pun">]</span><span class="pln"> longLongValue</span><span class="pun">]</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> </span><span class="lit">6032314514195021674</span><span class="pun">);</span><span class="pln">
</span><strong><span style="background-color: #008000;"><span class="pln">PASS</span></span></strong></code></pre>
<p>YOU HAVE GOT TO BE KIDDING. The description of the session id has 
more precision, with respect to the result of longLongValue, than the 
session id itself!</p>
<p>This is pretty weird, but at least it explains why I thought the code
 was correct when I stepped through it. When I logged values or looked 
at them in the debugger, I was seeing their descriptions. I assumed that
 the descriptions accurately reflected the values. Apparently that was a
 bad idea. Still… what’s going on under the hood, to make all of this 
happen?</p>
<h3>Seeing Double</h3>
<p>If I was coding in Javascript (the language JSON is derived from), 
the reason for the last few digits changing would be obvious: <a href="http://stackoverflow.com/a/5353473/52239">all numbers are doubles</a> in JavaScript. Doubles can’t represent all 64 bit integers. My test session id (6032314514195021<strong>674</strong>)
 is one of those unrepresentable-as-double integers. Casting it to a 
double and back rounds it to, you guessed it, the extracted long long 
value (6032314514195021<strong>824</strong>).</p>
<p>Of course, I’m coding in Objective-C, not JavaScript. I am parsing data in JavaScript Object Notation, but the <a href="http://www.ietf.org/rfc/rfc4627.txt?number=4627">RFC that describes the JSON format</a>
 makes no mention of interpreting numbers as doubles. The closest thing I
 found is in Section 4: “An implementation may set limits on the range 
of numbers.”. Whoever implemented the JSON parsing in Objective-C must 
have chosen to save time by parsing all numbers as if they were doubles,
 even if a particular value couldn’t be represented as a double but 
could be represented by another common numeric type in Objective-C.</p>
<p>The decision to treat all numbers as doubles is questionable, and 
inconvenient for me since the python and Java code I’m supposed to be 
interacting with both handle 64-bit numbers in JSON just fine, but it’s 
not wrong.</p>
<p>What <em>is</em> wrong is saying the two NSNumbers are equal when they don’t contain the same value.</p>
<h3>Questionable Equality</h3>
<p>Remember from earlier, that the parsed session id was considered 
equal to an NSNumber literal that ended up having a different 
longLongValue. My best guess as to why this happens is that a comparison
 between an NSNumber containing a long long and an NSNumber containing a
 double just secretly throws away precision on the long long before 
doing the comparison, by casting to double. I decided to test this, to 
be sure:</p>
<pre><code class="prettyprint"><span class="pln">
</span><span class="typ">NSNumber</span><span class="pun">*</span><span class="pln"> d </span><span class="pun">=</span><span class="pln"> </span><span class="pun">@</span><span class="lit">6032314514195021674.0</span><span class="pun">;</span><span class="pln"> </span><span class="com">// double</span><span class="pln">
</span><span class="typ">NSNumber</span><span class="pun">*</span><span class="pln"> n </span><span class="pun">=</span><span class="pln"> </span><span class="pun">@</span><span class="lit">6032314514195021674</span><span class="pun">;</span><span class="pln"> </span><span class="com">// long long</span><span class="pln">

test</span><span class="pun">([</span><span class="pln">d isEqualToNumber</span><span class="pun">:</span><span class="pln">n</span><span class="pun">]);</span><span class="pln">
</span><strong><span style="background-color: #008000;"><span class="pln">PASS</span></span></strong><span class="pln">
test</span><span class="pun">([</span><span class="pln">d longLongValue</span><span class="pun">]</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> </span><span class="pun">[</span><span class="pln">n longLongValue</span><span class="pun">]);</span><span class="pln">
</span><strong><span style="background-color: #800000;"><span class="pln">FAIL</span><span class="pun">:</span><span class="pln"> </span><span class="lit">6032314514195021824</span><span class="pln"> </span><span class="pun">!=</span><span class="pln"> </span><span class="lit">6032314514195021674</span></span></strong><span class="pln">
test</span><span class="pun">([[</span><span class="pln">d description</span><span class="pun">]</span><span class="pln"> isEqualToString</span><span class="pun">:[</span><span class="pln">n description</span><span class="pun">]]);</span><span class="pln">
</span><strong><span style="background-color: #800000;"><span class="pln">FAIL</span><span class="pun">:</span><span class="pln"> </span><span class="str">"6.032314514195022e+18"</span><span class="pln"> </span><span class="pun">!=</span><span class="pln"> </span><span class="str">"6032314514195021674"</span></span></strong>
</code></pre>
<p>Ugh.</p>
<p>Throwing away precision before checking for equality is a <em>highly</em> questionable decision on Apple’s part. It’s as if <code>0.3 == 0</code> evaluated to <code>true</code> because <code>(int)0.3 == (int)0</code>. Comparing a float to an integer might be <a href="http://twistedoakstudios.com/blog/Post3044_my-bug-my-bad-2-sunk-by-float">hard to do correctly</a>, but that doesn’t mean you can just pretend a long long will fit into a double!</p>
<p><em>Side note</em>: In many languages, the expression <code>6032314514195021672 == 6032314514195021674.0</code>
 will return true, because 64-bit integers are automatically promoted to
 doubles. I think that implicitly promoting 64-bit integers to doubles 
is a mistake (because it loses precision), but it’s worse with NSNumber 
because the types aren’t available. A static verifier can detect 
comparing an int64_t to a double very easily, but if you tried to do the
 same thing with NSNumbers you’d be swamped by false positives because 
it’s difficult to prove that an NSNumber can’t be a double or an 
int64_t.</p>
<p>Moving on from the throwing-away-precision-when-comparing issue, 
there’s one interesting difference highlighted by the above test. The 
NSNumber created from the double literal has a description whose 
precision matches its value. That contradicts what I saw with the 
NSNumber parsed from JSON.</p>
<h3>Other Numbers</h3>
<p>It’s important to understand that objective C has interfaces, instead
 of classes. Even basic types like NSNumber may have multiple 
implementations. There might be an NSNumber for doubles, an NSNumber for
 ints, and maybe lots of other specialized ones. Not that you should 
have to care, because they all conveniently expose the same interface: 
NSNumber.</p>
<p>With that in mind, I think the NSNumber returned from the JSON parser
 is a specialized NSNumber. One modified to keep a copy of the JSON it 
was parsed from as its description. This would be useful for uses cases 
like modifying JSON without losing information in the parts you didn’t 
touch.</p>
<p>Putting it all together, I have a plausible/questionable reason for 
each part to work the way it does and I understand how they combined to 
trick me for so long:</p>
<ul>
<li> Numbers parsed from JSON are all treated as having 
double-precision; probably because doing that saved on expensive 
development time.
</li><li> Numbers parsed from JSON use the text they were parsed from as
 their description even if that description has extra precision; 
probably to allow better round-tripping of data.
</li><li> NSNumbers that contain long longs have their values rounded 
when being compared to NSNumbers containing doubles; probably because it
 was easier than doing it correctly, and that’s what == does in C.
</li><li> The above three combined mean a number parsed from JSON will 
acts as if it has full precision, when printed out or compared to the 
expected value, but it really doesn’t.
</li></ul>
<p>Tricky. <em>Complicated</em> tricky.</p>
<h3>Summary</h3>
<p>Objective-C lies about how much precision NSNumbers parsed from JSON 
have. If you print one out, you see the exact integer value that was 
parsed. If you compare one to an NSNumber containing the expected value,
 they’re equal. If you actually try to access the integer value, it’s 
been rounded to the nearest representable double.</p>
<p>You can work around the issue by using the numeric value of the description:</p>
<p><code class="prettyprint"><span class="com">// broken:</span><br><span class="pln"> </span><span class="typ">int64_t</span><span class="pln"> roundedValue </span><span class="pun">=</span><span class="pln"> </span><span class="pun">[</span><span class="pln">lyingValueParsedFromJson longLongValue</span><span class="pun">]</span><br><span class="pln"> </span><span class="com">// "fixed":</span><br><span class="pln"> </span><span class="typ">int64_t</span><span class="pln"> actualValue </span><span class="pun">=</span><span class="pln"> </span><span class="pun">[[</span><span class="pln">lyingValueParsedFromJson description</span><span class="pun">]</span><span class="pln"> longLongValue</span><span class="pun">]</span></code></p>
<p>Make sure you leave a comment explaining that workaround, or maintainers will face-palm for the wrong reason.</p>
<p>—</p>
<h3>Discuss on <a href="http://www.reddit.com/r/programming/comments/1gkjgo/unfathomable_bug_pretend_precision/">Reddit</a></h3>
<p>—</p>

<blockquote><p>
<span style="color:#4A9EC2"><em><br>
Twisted Oak Studios offers consulting and development on high-tech interactive projects. Check out our <a href="http://twistedoakstudios.com/portfolio/">portfolio</a>, or <a href="mailto:contact@twistedoakstudios.com">Give us a shout</a> if you have anything you think some really rad engineers should help you with.<br>
</em></span>
</p></blockquote>
<h2 class="endofpage">Older Posts</h2>
<p></p><ul>
     <li><a href="http://twistedoakstudios.com/blog/Post5365_searching-a-sorted-matrix-faster" rel="bookmark" title="Permanent Link to Searching a Sorted Matrix Faster">Searching a Sorted Matrix Faster</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post5273_how-to-read-nested-ternary-operators" rel="bookmark" title="Permanent Link to How to Read Nested Ternary Operators">How to Read Nested Ternary Operators</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post5204_making-sublime-text-2-jump-to-the-correct-line-with-unity-on-os-x" rel="bookmark" title="Permanent Link to Making Sublime Text 2 Jump to the Correct Line with Unity on OS X">Making Sublime Text 2 Jump to the Correct Line with Unity on OS X</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post5096_my-bug-my-bad-4-reading-concurrently" rel="bookmark" title="Permanent Link to My Bug, My Bad #4: Reading Concurrently">My Bug, My Bad #4: Reading Concurrently</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post5018_whole-api-testing-with-reflection" rel="bookmark" title="Permanent Link to Whole API Testing with Reflection">Whole API Testing with Reflection</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post4708_optimizing-a-parser-combinator-into-a-memcpy" rel="bookmark" title="Permanent Link to Optimizing a Parser Combinator into a memcpy">Optimizing a Parser Combinator into a memcpy</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post4872_dont-treat-paths-like-strings" rel="bookmark" title="Permanent Link to Don’t Treat Paths Like Strings">Don’t Treat Paths Like Strings</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post4706_breaking-a-toy-hash-function" rel="bookmark" title="Permanent Link to Breaking a Toy Hash Function">Breaking a Toy Hash Function</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post4425_counting-iterators-lazily" rel="bookmark" title="Permanent Link to Counting Iterators Lazily">Counting Iterators Lazily</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post4281_my-bug-my-bad-3-accidentally-attacking-warcraft-3" rel="bookmark" title="Permanent Link to My Bug, My Bad #3: Accidentally Attacking WarCraft 3">My Bug, My Bad #3: Accidentally Attacking WarCraft 3</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post4130_collapsing-types-vs-monads-followup" rel="bookmark" title="Permanent Link to Collapsing Types vs Monads (followup)">Collapsing Types vs Monads (followup)</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post4008_collapsing-futures-easy-to-use-hard-to-represent" rel="bookmark" title="Permanent Link to Collapsing Futures: Easy to Use, Hard to Represent">Collapsing Futures: Easy to Use, Hard to Represent</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post3858_eventual-exceptions-vs-programming-in-a-minimal-functional-style" rel="bookmark" title="Permanent Link to Eventual Exceptions vs Programming in a Minimal Functional Style">Eventual Exceptions vs Programming in a Minimal Functional Style</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post3769_the-mystery-of-flunf" rel="bookmark" title="Permanent Link to The Mystery of Flunf">The Mystery of Flunf</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post3724_explain-it-like-im-five-the-socialist-millionaire-problem-and-secure-multi-party-computation" rel="bookmark" title="Permanent Link to Explain it like I’m Five: The Socialist Millionaire Problem and Secure Multi-Party Computation">Explain it like I’m Five: The Socialist Millionaire Problem and Secure Multi-Party Computation</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post3631_computer-science-blows-my-mind" rel="bookmark" title="Permanent Link to Computer Science Blows My Mind">Computer Science Blows My Mind</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post3484_a-visit-to-execution-labs-in-montreal" rel="bookmark" title="Permanent Link to A visit to Execution Labs in Montréal">A visit to Execution Labs in Montréal</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post3573_transmuting-dice-conserving-entropy" rel="bookmark" title="Permanent Link to Transmuting Dice, Conserving Entropy">Transmuting Dice, Conserving Entropy</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post3516_rule-of-thumb-ask-for-the-clock" rel="bookmark" title="Permanent Link to Rule of Thumb: Ask for the Clock">Rule of Thumb: Ask for the Clock</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post3477_rule-of-thumb-use-purposefully-weakened-methods" rel="bookmark" title="Permanent Link to Rule of Thumb: Use Purposefully Weakened Methods">Rule of Thumb: Use Purposefully Weakened Methods</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post3376_rule-of-thumb-preconditions-should-be-checked-explicitly" rel="bookmark" title="Permanent Link to Rule of thumb: Preconditions Should be Checked Explicitly">Rule of thumb: Preconditions Should be Checked Explicitly</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post3280_intersecting-linked-lists-faster" rel="bookmark" title="Permanent Link to Intersecting Linked Lists Faster">Intersecting Linked Lists Faster</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post3138_mouse-path-smoothing-for-jack-lumber" rel="bookmark" title="Permanent Link to Mouse Path Smoothing for Jack Lumber">Mouse Path Smoothing for Jack Lumber</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post3044_my-bug-my-bad-2-sunk-by-float" rel="bookmark" title="Permanent Link to My Bug, My Bad #2: Sunk by Float">My Bug, My Bad #2: Sunk by Float</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post2852_repeat-yourself-differently" rel="bookmark" title="Permanent Link to Repeat Yourself Differently">Repeat Yourself Differently</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post2644_grovers-quantum-search-algorithm" rel="bookmark" title="Permanent Link to Grover’s Quantum Search Algorithm">Grover’s Quantum Search Algorithm</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post2766_followup-to-non-nullable-types-vs-c" rel="bookmark" title="Permanent Link to Followup to Non-Nullable Types vs C#">Followup to Non-Nullable Types vs C#</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post2540_optimizing-just-in-time-with-expression-trees" rel="bookmark" title="Permanent Link to Optimizing Just in Time with Expression Trees">Optimizing Just in Time with Expression Trees</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post2353_when-one-way-latency-doesnt-matter" rel="bookmark" title="Permanent Link to When One-Way Latency Doesn’t Matter">When One-Way Latency Doesn’t Matter</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post2194_determining-exactly-ifwhenwhere-a-moving-line-intersected-a-moving-point" rel="bookmark" title="Permanent Link to Determining exactly if/when/where a moving line intersected a moving point">Determining exactly if/when/where a moving line intersected a moving point</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post2061_emulating-actors-in-c-with-asyncawait" rel="bookmark" title="Permanent Link to Emulating Actors in C# with Async/Await">Emulating Actors in C# with Async/Await</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post2096_making-an-immutable-queue-with-guaranteed-constant-time-operations" rel="bookmark" title="Permanent Link to Making an immutable queue with guaranteed constant time operations">Making an immutable queue with guaranteed constant time operations</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post399_improving-checked-exceptions" rel="bookmark" title="Permanent Link to Improving Checked Exceptions">Improving Checked Exceptions</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post1941_perishable-collections-the-benefits-of-removal-by-lifetime" rel="bookmark" title="Permanent Link to Perishable Collections: The Benefits of Removal-by-Lifetime">Perishable Collections: The Benefits of Removal-by-Lifetime</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post1823_decoupling-shared-control" rel="bookmark" title="Permanent Link to Decoupling shared control">Decoupling shared control</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post1694_decoupling-inlined-ui-code" rel="bookmark" title="Permanent Link to Decoupling inlined UI code">Decoupling inlined UI code</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post1585_linq-to-collections-beyond-ienumerablet" rel="bookmark" title="Permanent Link to Linq to Collections: Beyond IEnumerable&lt;T&gt;">Linq to Collections: Beyond IEnumerable&lt;T&gt;</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post1295_publish-your-net-library-as-a-nuget-package" rel="bookmark" title="Permanent Link to Publish your .Net library as a NuGet package">Publish your .Net library as a NuGet package</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post1130_when-null-is-not-enough-an-option-type-for-c" rel="bookmark" title="Permanent Link to When null is not enough: an option type for C#">When null is not enough: an option type for C#</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post1473_unfathomable-bugs-5-readonly-or-not" rel="bookmark" title="Permanent Link to Unfathomable Bugs #5: Readonly or not">Unfathomable Bugs #5: Readonly or not</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post667_minkowski-sums-examples" rel="bookmark" title="Permanent Link to Minkowski sums: examples">Minkowski sums: examples</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post1080_my-bug-my-bad-1-fractal-spheres" rel="bookmark" title="Permanent Link to My Bug, My Bad #1: Fractal Spheres">My Bug, My Bad #1: Fractal Spheres</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post1007_working-around-the-brittle-ui-virtualization-in-windows-8" rel="bookmark" title="Permanent Link to Working around the brittle UI Virtualization in Windows 8">Working around the brittle UI Virtualization in Windows 8</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post938_encapsulating-angles" rel="bookmark" title="Permanent Link to Encapsulating Angles">Encapsulating Angles</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post925_unfathomable-bugs-4-keys-that-arent" rel="bookmark" title="Permanent Link to Unfathomable Bugs #4: Keys that aren’t">Unfathomable Bugs #4: Keys that aren’t</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post867_how-would-i-even-use-a-monad-in-c" rel="bookmark" title="Permanent Link to How would I even use a monad (in C#)?">How would I even use a monad (in C#)?</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post822_useful-methods-1-observable-wheneach" rel="bookmark" title="Permanent Link to Useful/Interesting Methods #1: Observable.WhenEach">Useful/Interesting Methods #1: Observable.WhenEach</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post818_unfathomable-bugs-3-stringing-you-along" rel="bookmark" title="Permanent Link to Unfathomable Bugs #3: Stringing you along">Unfathomable Bugs #3: Stringing you along</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post774_anonymous-implementation-classes-a-design-pattern-for-c" rel="bookmark" title="Permanent Link to Anonymous Implementation Classes – A Design Pattern for C#">Anonymous Implementation Classes – A Design Pattern for C#</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post532_tasks-for-action-script-3" rel="bookmark" title="Permanent Link to Tasks for ActionScript 3 – Improving on Event-Driven Programming">Tasks for ActionScript 3 – Improving on Event-Driven Programming</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post554_minkowski-sums-and-differences" rel="bookmark" title="Permanent Link to Minkowski sums and differences">Minkowski sums and differences</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post330_non-nullable-types-vs-c-fixing-the-billion-dollar-mistake" rel="bookmark" title="Permanent Link to Non-Nullable Types vs C#: Fixing the Billion Dollar Mistake">Non-Nullable Types vs C#: Fixing the Billion Dollar Mistake</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post384_unfathomable-bugs-2-slashing-out" rel="bookmark" title="Permanent Link to Unfathomable Bugs #2: Slashing Out">Unfathomable Bugs #2: Slashing Out</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post404_script-templates-and-base-classes" rel="bookmark" title="Permanent Link to Script templates and base classes">Script templates and base classes</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post373_unity-font-extraction" rel="bookmark" title="Permanent Link to Unity font extraction">Unity font extraction</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post341_abusing-phantom-types-to-encode-list-lengths-into-their-type" rel="bookmark" title="Permanent Link to Abusing “Phantom Types” to Encode List Lengths Into Their Type">Abusing “Phantom Types” to Encode List Lengths Into Their Type</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post261_constructive-criticism-of-the-reactive-extensions-api" rel="bookmark" title="Permanent Link to Constructive Criticism of the Reactive Extensions API">Constructive Criticism of the Reactive Extensions API</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post241_quaternions-part-3-2" rel="bookmark" title="Permanent Link to Quaternions part 3">Quaternions part 3</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post204_quaternions-part-2" rel="bookmark" title="Permanent Link to Quaternions part 2">Quaternions part 2</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post144_quaternions-part-1" rel="bookmark" title="Permanent Link to Quaternions part 1">Quaternions part 1</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post157_unfathomable-bugs-1-you-can-have-things-you-can-have-things-in-things-you-can-have" rel="bookmark" title="Permanent Link to Unfathomable Bugs #1: You can have things! You can have things IN things! You can have …">Unfathomable Bugs #1: You can have things! You can have things IN things! You can have …</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post83_coroutines-more-than-you-want-to-know" rel="bookmark" title="Permanent Link to Coroutines – More than you want to know">Coroutines – More than you want to know</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post74_asset-bundle-helper" rel="bookmark" title="Permanent Link to Asset Bundle Helper">Asset Bundle Helper</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post60_the-visual-studio-goes-away" rel="bookmark" title="Permanent Link to The Visual Studio goes away">The Visual Studio goes away</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post57_nets-time-traveling-stopwatch" rel="bookmark" title="Permanent Link to .Net’s time traveling StopWatch">.Net’s time traveling StopWatch</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post29_introducing-catalyst" rel="bookmark" title="Permanent Link to Introducing Catalyst">Introducing Catalyst</a></li>
  </ul>
<p></p>


			</div><!-- #content -->
			</section>

			</div>
		</div><!-- #container -->


</span></div><!-- .container -->

 <div id="upprev_box" style="right: -400px;">
	<h6>
		More interesting posts <span class="num"> (3 of 10 articles)</span>
	</h6>
	<div class="upprev_excerpt">
		<p>
			<a href="http://twistedoakstudios.com/blog/Post4281_my-bug-my-bad-3-accidentally-attacking-warcraft-3" rel="prev">My Bug, My Bad #3: Accidentally Attacking WarCraft 3</a>
		</p>
	</div>
	
		<p>
Or check out our <a href="http://twistedoakstudios.com/portfolio">Portfolio</a>.		</p><button id="upprev_close" type="button">Close</button>
</div><!-- #upprev_box -->
<link rel="stylesheet" id="al2fb_style-css" href="Unfathomable%20Bugs%20%236%20-%20Pretend%20Precision_files/add-link-to-facebook.css" type="text/css" media="all">
<link rel="stylesheet" id="admin-bar-css" href="Unfathomable%20Bugs%20%236%20-%20Pretend%20Precision_files/admin-bar.css" type="text/css" media="all">
<link rel="stylesheet" id="upprev-css-css" href="Unfathomable%20Bugs%20%236%20-%20Pretend%20Precision_files/upprev.css" type="text/css" media="all">
<link rel="stylesheet" id="wp-quicklatex-format-css" href="Unfathomable%20Bugs%20%236%20-%20Pretend%20Precision_files/quicklatex-format.css" type="text/css" media="all">
<script type="text/javascript" src="Unfathomable%20Bugs%20%236%20-%20Pretend%20Precision_files/admin-bar.js"></script>
<script type="text/javascript" src="Unfathomable%20Bugs%20%236%20-%20Pretend%20Precision_files/jquery_002.js"></script>
<script type="text/javascript" src="Unfathomable%20Bugs%20%236%20-%20Pretend%20Precision_files/upprev_js.php"></script>
<script type="text/javascript" src="Unfathomable%20Bugs%20%236%20-%20Pretend%20Precision_files/comment-reply.js"></script>
	<script type="text/javascript">
		(function() {
			var request, b = document.body, c = 'className', cs = 'customize-support', rcs = new RegExp('(^|\\s+)(no-)?'+cs+'(\\s+|$)');

			request = true;

			b[c] = b[c].replace( rcs, ' ' );
			b[c] += ( window.postMessage && request ? ' ' : ' no-' ) + cs;
		}());
	</script>
			

		 
<!-- BEGIN footer-type stuff -->
<div class="container footer-container">
	<div class="row">
		
		<div class="fourcol last"><!-- .last b/c it's floated right -->
      <!-- home portfolio used to be here -->
		</div>

		<div class="eightcol" id="contact">
			<p>Twisted Oak Studios<br>
				138-1657 Barrington St.<br>
				Halifax, NS, Canada B3J 2A1</p>
			
			<p>001-902-237-7326<br>
			<a href="mailto:contact@twistedoakstudios.com">contact@twistedoakstudios.com</a></p>
		</div>

		<div class="twelvecol">
			<footer>
				<small>©2012
					<script>
						var d=new Date(); 
						yr=d.getFullYear();
						if (yr!=2012)
						document.write("- "+yr);
					</script>- 2013 Twisted Oak Studios Ltd. -- All Rights Reserved -- All images and logos are property of their respective owners.
				</small>
			</footer>
		</div>
		
		
	</div><!-- .row -->
</div><!-- .container -->
<!-- END footer stuff-->

<!-- jQuery and scrolly script for contact link -->
<script src="Unfathomable%20Bugs%20%236%20-%20Pretend%20Precision_files/jquery.js"></script>
  <script>window.jQuery || document.write('<script src="../js/libs/jquery-1.6.2.min.js"><\/script>')</script>

<script src="Unfathomable%20Bugs%20%236%20-%20Pretend%20Precision_files/scrolly.js"></script>


  <!-- Don't forget Analytics! -->



  <!-- Prompt IE 6 users to install Chrome Frame. Remove this if you want to support IE 6.
       chromium.org/developers/how-tos/chrome-frame-getting-started -->
  <!--[if lt IE 7 ]>
    <script src="//ajax.googleapis.com/ajax/libs/chrome-frame/1.0.3/CFInstall.min.js"></script>
    <script>window.attachEvent('onload',function(){CFInstall.check({mode:'overlay'})})</script>
  <![endif]-->
  


<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-31441525-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>
<div id="wpadminbar" class="nojq " role="navigation">
			<a class="screen-reader-shortcut" href="#wp-toolbar" tabindex="1">Skip to toolbar</a>
			<div class="quicklinks" id="wp-toolbar" role="navigation" aria-label="Top navigation toolbar." tabindex="0">
				<ul id="wp-admin-bar-root-default" class="ab-top-menu">
		<li id="wp-admin-bar-wp-logo" class="menupop"><a class="ab-item" aria-haspopup="true" href="http://twistedoakstudios.com/blog/wp-admin/about.php" title="About WordPress"><span class="ab-icon"></span></a><div class="ab-sub-wrapper"><ul id="wp-admin-bar-wp-logo-default" class="ab-submenu">
		<li id="wp-admin-bar-about"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/about.php">About WordPress</a>		</li></ul><ul id="wp-admin-bar-wp-logo-external" class="ab-sub-secondary ab-submenu">
		<li id="wp-admin-bar-wporg"><a class="ab-item" href="http://wordpress.org/">WordPress.org</a>		</li>
		<li id="wp-admin-bar-documentation"><a class="ab-item" href="http://codex.wordpress.org/">Documentation</a>		</li>
		<li id="wp-admin-bar-support-forums"><a class="ab-item" href="http://wordpress.org/support/">Support Forums</a>		</li>
		<li id="wp-admin-bar-feedback"><a class="ab-item" href="http://wordpress.org/support/forum/requests-and-feedback">Feedback</a>		</li></ul></div>		</li>
		<li id="wp-admin-bar-site-name" class="menupop"><a class="ab-item" aria-haspopup="true" href="http://twistedoakstudios.com/blog/wp-admin/">twistedoakstudios.com</a><div class="ab-sub-wrapper"><ul id="wp-admin-bar-site-name-default" class="ab-submenu">
		<li id="wp-admin-bar-dashboard"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/">Dashboard</a>		</li></ul><ul id="wp-admin-bar-appearance" class="ab-submenu">
		<li id="wp-admin-bar-themes"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/themes.php">Themes</a>		</li>
		<li id="wp-admin-bar-customize" class="hide-if-no-customize"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/customize.php?url=http%3A%2F%2Ftwistedoakstudios.com%2Fblog%2FPost4428_unfathomable-bugs-6-pretend-precision">Customize</a>		</li></ul></div>		</li>
		<li id="wp-admin-bar-updates"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/update-core.php" title="3 Plugin Updates, 1 Theme Update"><span class="ab-icon"></span><span class="ab-label">4</span><span class="screen-reader-text">3 Plugin Updates, 1 Theme Update</span></a>		</li>
		<li id="wp-admin-bar-comments"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/edit-comments.php" title="0 comments awaiting moderation"><span class="ab-icon"></span><span id="ab-awaiting-mod" class="ab-label awaiting-mod pending-count count-0">0</span></a>		</li>
		<li id="wp-admin-bar-new-content" class="menupop"><a class="ab-item" aria-haspopup="true" href="http://twistedoakstudios.com/blog/wp-admin/post-new.php" title="Add New"><span class="ab-icon"></span><span class="ab-label">New</span></a><div class="ab-sub-wrapper"><ul id="wp-admin-bar-new-content-default" class="ab-submenu">
		<li id="wp-admin-bar-new-post"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/post-new.php">Post</a>		</li>
		<li id="wp-admin-bar-new-media"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/media-new.php">Media</a>		</li>
		<li id="wp-admin-bar-new-link"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/link-add.php">Link</a>		</li>
		<li id="wp-admin-bar-new-page"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/post-new.php?post_type=page">Page</a>		</li>
		<li id="wp-admin-bar-new-user"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/user-new.php">User</a>		</li></ul></div>		</li>
		<li id="wp-admin-bar-edit"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/post.php?post=4428&amp;action=edit">Edit Post</a>		</li></ul><ul id="wp-admin-bar-top-secondary" class="ab-top-secondary ab-top-menu">
		<li id="wp-admin-bar-search" class="admin-bar-search"><div class="ab-item ab-empty-item" tabindex="-1"><form action="http://twistedoakstudios.com/blog/" method="get" id="adminbarsearch"><input class="adminbar-input" name="s" id="adminbar-search" maxlength="150" type="text"><input class="adminbar-button" value="Search" type="submit"></form></div>		</li>
		<li id="wp-admin-bar-my-account" class="menupop with-avatar"><a class="ab-item" aria-haspopup="true" href="http://twistedoakstudios.com/blog/wp-admin/profile.php" title="My Account">Howdy, Craig Gidney<img alt="" src="Unfathomable%20Bugs%20%236%20-%20Pretend%20Precision_files/31a6ce579f8f9f9d528715d1e941726e.png" class="avatar avatar-16 photo" height="16" width="16"></a><div class="ab-sub-wrapper"><ul id="wp-admin-bar-user-actions" class="ab-submenu">
		<li id="wp-admin-bar-user-info"><a class="ab-item" tabindex="-1" href="http://twistedoakstudios.com/blog/wp-admin/profile.php"><img alt="" src="Unfathomable%20Bugs%20%236%20-%20Pretend%20Precision_files/31a6ce579f8f9f9d528715d1e941726e_002.png" class="avatar avatar-64 photo" height="64" width="64"><span class="display-name">Craig Gidney</span><span class="username">craig</span></a>		</li>
		<li id="wp-admin-bar-edit-profile"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/profile.php">Edit My Profile</a>		</li>
		<li id="wp-admin-bar-logout"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-login.php?action=logout&amp;_wpnonce=535624defb">Log Out</a>		</li></ul></div>		</li></ul>			</div>
			<a class="screen-reader-shortcut" href="http://twistedoakstudios.com/blog/wp-login.php?action=logout&amp;_wpnonce=535624defb">Log Out</a>
		</div></body></html>