<!DOCTYPE html>
<!-- paulirish.com/2008/conditional-stylesheets-vs-css-hacks-answer-neither/ -->
<!--[if lt IE 7]> <html class="no-js ie6 oldie" lang="en"> <![endif]-->
<!--[if IE 7]>    <html class="no-js ie7 oldie" lang="en"> <![endif]-->
<!--[if IE 8]>    <html class="no-js ie8 oldie" lang="en"> <![endif]-->
<!-- Consider adding an manifest.appcache: h5bp.com/d/Offline -->
<!--[if gt IE 8]><!-->
<html class=" js flexbox canvas canvastext webgl no-touch geolocation postmessage no-websqldatabase indexeddb hashchange history draganddrop websockets rgba hsla multiplebgs backgroundsize borderimage borderradius boxshadow textshadow opacity cssanimations csscolumns cssgradients no-cssreflections csstransforms csstransforms3d csstransitions fontface generatedcontent video audio localstorage sessionstorage webworkers applicationcache svg inlinesvg smil svgclippaths" xmlns="http://www.w3.org/1999/xhtml" xmlns:og="http://ogp.me/ns#" xmlns:fb="https://www.facebook.com/2008/fbml" lang="en"><script src="Collection%20Equality%20is%20Hard%20_%20Twisted%20Oak%20Studios%20Blog_files/Post8565_collection-equality-is-hard.htm" async=""></script><script id="bug.surrogate.1">var urchinTracker=function(){},_gaq={push:function(){try {if(arguments[0][0]=='_link')window.location.href=arguments[0][1]}catch(er){}}},_gat={_createTracker:function(){}, _getTracker:function(){return{__noSuchMethod__:function(){},_link:function(o){if(o)location.href=o;},_linkByPost:function(){return true;},_getLinkerUrl:function(o){return o;},_trackEvent:function(){}}}};</script><!--<![endif]--><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
  <meta charset="utf-8">
   <!-- blog feed link -->
  <link href="http://twistedoakstudios.com/blog/?feed=rss" rel="alternate" type="application/rss+xml" title="Twisted Oak Studios Blog">

  <!-- Use the .htaccess and remove these lines to avoid edge case issues.
       More info: h5bp.com/b/378 -->
  <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">

<title>Collection Equality is Hard | Twisted Oak Studios Blog</title>

  <meta name="description" content="As a lean co-operative team of seasoned developers, Twisted Oak is able to offer efficient, flexible remote and on-the-floor development and consulting without any middle-man or excessive administrivia.">
  <meta name="author" content="/humans.txt">

  <meta name="viewport" content="width=device-width,initial-scale=1">

  <link rel="shortcut icon" href="http://twistedoakstudios.com/blog/favicon.ico">
  <link rel="apple-touch-icon-precomposed" href="http://twistedoakstudios.com/blog/apple-touch-icon-precomposed.png">

  	<!-- The 1140px Grid - http://cssgrid.net/ -->
	<link rel="stylesheet" href="Collection%20Equality%20is%20Hard%20_%20Twisted%20Oak%20Studios%20Blog_files/1140.css">
    <link rel="stylesheet" href="Collection%20Equality%20is%20Hard%20_%20Twisted%20Oak%20Studios%20Blog_files/style.css">
    <link rel="stylesheet" href="Collection%20Equality%20is%20Hard%20_%20Twisted%20Oak%20Studios%20Blog_files/blogstyle.css">
<link rel="stylesheet" href="Collection%20Equality%20is%20Hard%20_%20Twisted%20Oak%20Studios%20Blog_files/prettify.css" media="all">
<link rel="stylesheet" href="Collection%20Equality%20is%20Hard%20_%20Twisted%20Oak%20Studios%20Blog_files/sunburst.css" media="all">
<script type="text/javascript" src="Collection%20Equality%20is%20Hard%20_%20Twisted%20Oak%20Studios%20Blog_files/prettify.js"></script>

	<!-- Webfonts! -->
	<link href="Collection%20Equality%20is%20Hard%20_%20Twisted%20Oak%20Studios%20Blog_files/css.css" rel="stylesheet" type="text/css">

	<!-- Open Graph -->
	<meta property="og:title" content="Twisted Oak Studios">
	<meta property="og:type" content="company">
	<meta property="og:url" content="http://www.twistedoakstudios.com/">
	<meta property="og:image" content="http://www.twistedoakstudios.com/images/logo.png">
	<meta property="og:description" content="As a lean co-operative team of seasoned developers, Twisted Oak is able to offer efficient, flexible remote and on-the-floor development and consulting without any middle-man or excessive administrivia.">
  
  <script src="Collection%20Equality%20is%20Hard%20_%20Twisted%20Oak%20Studios%20Blog_files/modernizr-2.js"></script>
<script src="Collection%20Equality%20is%20Hard%20_%20Twisted%20Oak%20Studios%20Blog_files/embed.js" async="" type="text/javascript"></script></head>
<body class=" customize-support" onload="prettyPrint()">
<!-- begin header -->
<div class="container header-container">
	<div class="row">
		<header>
			<div class="threecol">
				<a href="http://twistedoakstudios.com/"><img class="logo" src="Collection%20Equality%20is%20Hard%20_%20Twisted%20Oak%20Studios%20Blog_files/logo.png"></a>
			</div><!-- .threecol -->
		
			<div class="fourcol navcol">
				<nav>
					<ul class="primary-nav clearfix">
						<li><a href="http://twistedoakstudios.com/">Home</a></li>
						<li><a href="http://twistedoakstudios.com/portfolio/">Portfolio</a></li>
						<li><a href="http://twistedoakstudios.com/labs/">Labs</a></li>
						<li><a class="scroll" href="#contact">Contact</a></li>
						<li><a href="http://twistedoakstudios.com/blog/">Blog</a></li>
					</ul>
				</nav>
			</div>    

    	</header>
	</div><!-- .row -->
</div><!-- .container -->


	<div id="main">
<span class="blog">
<div class="container home-container" id="home">
	<div class="row">
    <p class="big-callout">
    <!--We're hiring! Experience with Game Dev, Unity3D, Graphics, Signal Processing, or Networking? Eligible to work in Canada? 
      <a href="http://www.twistedoakstudios.com/jobs.php">Check it out</a>!
-->
		</p><section>
			
			<div class="ninecol">


<h2><a href="http://twistedoakstudios.com/blog/Post8565_collection-equality-is-hard" rel="bookmark" title="Permanent Link to Collection Equality is Hard">Collection Equality is Hard</a></h2>
<div class="meta">posted by Craig Gidney on December 31, 2013</div>

<p>In this post: dealing with the corner cases inherent in checking if collections are equivalent.</p>
<h3>Collection Equality</h3>
<p>One of Objective-C’s features that I really like, but forgot to mention in <a href="http://twistedoakstudios.com/blog/Post8237_a-years-worth-of-opinions-about-objective-c">A Year’s Worth of Opinions about Objective-C</a>,
 is the built-in support for equating collections by value. When I’m 
working in C#, and I want to determine if two dictionaries have the same
 keys mapped to the same values, I have to write/find my own method to 
do so. In Objective-C I just write <code>[dict1 isEqual:dict2]</code> 
and it works (for the most part). It even works when there are other 
sorts of collections in the dictionaries, like arrays and sets and 
perhaps things that aren’t even implemented yet, because they also know 
how to determine equality.</p>
<p>But Obj-C’s collection equality, like most implementations of the 
concept, is not perfect. It falls apart in two cases: when collections 
are redundantly nested, and when collections are recursively nested.</p>
<p>Let’s start with the redundant case.</p>
<h3>Unifying Redundant Collections</h3>
<p>Imagine you’re implementing <a href="http://www.drdobbs.com/jvm/an-algorithm-for-compressing-space-and-t/184406478">Hashlife</a>.
 You decide to represent each node of your quad tree as an array 
containing the four child nodes. Hashlife makes sure that nodes covering
 areas with equal contents are actually the same node. They literally 
reference the same array, allowing exponential savings on the size of 
the board representation in memory (depending on how repetitive the 
simulation is).</p>
<p>Basically, Hashlife’s quad tree tends to have a lot of ways to get 
from the root to a particular node. A naive traversal of the tree will 
hit nodes many times. That’s what I mean when I say they are redundantly
 nested.</p>
<p>What would happen if you took two Hashlife quad trees and checked if 
they were equal? Well, Obj-C determines if arrays are equal by checking 
if they have the same length then recursively checking if their 
corresponding items are equal. In the case of Hashlife quad trees, that 
corresponds to doing a depth first traversal of the two trees, looking 
for discrepancies. The traversal does not avoid redundant paths to the 
same node, and so can end up spending exponentially more time than 
necessary to recheck things it’s already checked.</p>
<p>That’s a practical example of how this issue might crop up. Let’s 
consider a simpler example. How long will it take to run the following 
code? How long <em>should</em> it take?</p>
<pre><code class="prettyprint"><span class="com">// at the bottom: lots of "hi"</span><span class="pln">
</span><span class="typ">NSArray</span><span class="pun">*</span><span class="pln"> a </span><span class="pun">=</span><span class="pln"> </span><span class="pun">@[@</span><span class="str">"hi"</span><span class="pun">].</span><span class="pln">mutableCopy</span><span class="pun">;</span><span class="pln">
</span><span class="typ">NSArray</span><span class="pun">*</span><span class="pln"> b </span><span class="pun">=</span><span class="pln"> </span><span class="pun">@[@</span><span class="str">"hi"</span><span class="pun">].</span><span class="pln">mutableCopy</span><span class="pun">;</span><span class="pln">

</span><span class="com">// nest it fifty levels deep, with branching factor 2</span><span class="pln">
</span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">int</span><span class="pln"> i </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"> i </span><span class="pun">&lt;</span><span class="pln"> </span><span class="lit">50</span><span class="pun">;</span><span class="pln"> i</span><span class="pun">++)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    a </span><span class="pun">=</span><span class="pln"> </span><span class="pun">@[</span><span class="pln">a</span><span class="pun">,</span><span class="pln"> a</span><span class="pun">];</span><span class="pln">
    b </span><span class="pun">=</span><span class="pln"> </span><span class="pun">@[</span><span class="pln">b</span><span class="pun">,</span><span class="pln"> b</span><span class="pun">];</span><span class="pln">
</span><span class="pun">}</span><span class="pln">

</span><span class="com">// they should be equal</span><span class="pln">
</span><span class="kwd">bool</span><span class="pln"> areEqual </span><span class="pun">=</span><span class="pln"> </span><span class="pun">[</span><span class="pln">a isEqual</span><span class="pun">:</span><span class="pln">b</span><span class="pun">];</span><span class="pln">
</span><span class="typ">NSLog</span><span class="pun">(</span><span class="pln">areEqual </span><span class="pun">?</span><span class="pln"> </span><span class="pun">@</span><span class="str">"true"</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="pun">@</span><span class="str">"broken"</span><span class="pun">);</span><span class="pln"> </span><span class="com">// prints 'true'</span></code></pre>
<p>If you do try running the above code, I suggest not waiting for it to
 finish. It will take a month or three, as the naive equality algorithm 
ignores that the 2^50 paths joining up again and again suggests a 
slightly faster way to confirm the arrays have the same structure. In 
particular, the fact that <code>a[0] == a[1]</code>, <code>b[0] == b[1]</code>, and <code>[a[0] isEqual:b[0]]</code> are true implies <code>[a[1] isEqual:b[1]]</code>
 is true. Taking advantage of that fact would cut the number of 
recursive calls at each level from 2 to 1, saving fifty compounding 
factors of 2 on the running time.</p>
<p>This raises the question: is there an algorithm that can catch this 
sort of redundancy? What about more complicated cases, where the 
redundant arrays are scattered across multiple levels?</p>
<p>The problem we're trying to solve is a classic in computer science, known as <a href="https://en.wikipedia.org/wiki/Unification_%28computer_science%29">unification</a>.
 The input to a unification problem is two arrays that contain 
variables, values, and nested arrays. The solution is an assignment of 
values to the variables that causes the two inputs to be the same.</p>
<p>Here's an example unification problem: find a variable assignment for A,B,C,D that satisfies <code>(A, B, C, D) = (B, "hey", (3, D), 4)</code>. In this case the solution is <code>A=B="hey", C=(3,4), D=4</code>.</p>
<p>Sometimes actually writing out the solution to a unification problem 
can be extremely expensive. For example, the solution to the unification
 problem corresponding to our 50-levels-of-double-nesting arrays would 
be over 2^50 characters long. Fortunately we can output the solution in a
 different form, as a series of rewrite rules for each variable that 
eventually result in the full solution if followed. (It's important that
 the rewrite rules not contain any cycles.)</p>
<p>For reference, the 50-levels-of-double-nesting problem looks something like this:</p>
<pre><code class="prettyprint"><span class="pun">(</span><span class="pln">A0</span><span class="pun">,</span><span class="pln"> A0</span><span class="pun">,</span><span class="pln">   B0</span><span class="pun">,</span><span class="pln">   A1</span><span class="pun">,</span><span class="pln"> A1</span><span class="pun">,</span><span class="pln">      B1</span><span class="pun">,</span><span class="pln">      </span><span class="pun">...,</span><span class="pln"> A49</span><span class="pun">,</span><span class="pln"> A50</span><span class="pun">,</span><span class="pln">       B50</span><span class="pun">)</span><span class="pln">
</span><span class="pun">=</span><span class="pln">
</span><span class="pun">(</span><span class="pln">B0</span><span class="pun">,</span><span class="pln"> </span><span class="str">"hi"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"hi"</span><span class="pun">,</span><span class="pln"> B1</span><span class="pun">,</span><span class="pln"> </span><span class="pun">(</span><span class="pln">A0</span><span class="pun">,</span><span class="pln">A0</span><span class="pun">),</span><span class="pln"> </span><span class="pun">(</span><span class="pln">B0</span><span class="pun">,</span><span class="pln">B0</span><span class="pun">),</span><span class="pln"> </span><span class="pun">...,</span><span class="pln"> B49</span><span class="pun">,</span><span class="pln"> </span><span class="pun">(</span><span class="pln">A49</span><span class="pun">,</span><span class="pln">A49</span><span class="pun">),</span><span class="pln"> </span><span class="pun">(</span><span class="pln">B49</span><span class="pun">,</span><span class="pln">B49</span><span class="pun">))</span></code></pre>
<p>and the solution, in terms of rewrites, follows this pattern:</p>
<pre><code class="prettyprint"><span class="pln">A0</span><span class="pun">=</span><span class="pln">B0 </span><span class="pun">-&gt;</span><span class="pln"> </span><span class="str">"hi"</span><span class="pln">
A1</span><span class="pun">=</span><span class="pln">B1 </span><span class="pun">-&gt;</span><span class="pln"> </span><span class="pun">(</span><span class="pln">A0</span><span class="pun">,</span><span class="pln"> A0</span><span class="pun">)</span><span class="pln">
</span><span class="pun">...</span><span class="pln">
A50</span><span class="pun">=</span><span class="pln">B50 </span><span class="pun">-&gt;</span><span class="pln"> </span><span class="pun">(</span><span class="pln">A49</span><span class="pun">,</span><span class="pln"> A49</span><span class="pun">)</span></code></pre>
<p>Assuming you're satisfied with the algorithm returning only the 
rewrite rules, and we are, unification can be solved in linear time. 
(This is really surprising to me, because unification feels so much like
 <a href="http://en.wikipedia.org/wiki/Disjoint-set_data_structure">union-find</a> which just barely doesn't have a linear time algorithm. Before I was convinced that it worked I had to <a href="http://ac.els-cdn.com/0022000086900036/1-s2.0-0022000086900036-main.pdf?_tid=15eeefa4-726f-11e3-b0b5-00000aab0f02&amp;acdnat=1388530898_90d15a7e34ec7f69e8a1a3cf1b37b5f8">look it up</a> and prove it for myself.)</p>
<p>Anyways, we can translate our collection equality problem into a 
unification problem and thereby solve it in linear time even when 
there's a lot of redundant nesting. To create the unification problem we
 do a traversal of the collections and their sub-collections (avoiding 
re-traversing when we've already seen a collection), building up 
constraints as we go. Everything we encounter must be equal to the 
corresponding item or collection on the other side. Our collections are 
equal if and only if the unification problem has a solution.</p>
<p>I don't really want to go too deep into the details of the mapping 
between the two problems. Suffice it to say that it's feasible for 
collection equality to be implemented in terms of unification algorithms
 that don't fall apart under redundant nesting. The resulting algorithm 
will even still be linear time. The main downside of using the more 
general algorithm is that the typical case, no redundant nesting, 
becomes less efficient. Also, there would need to be a protocol for 
building up the overall unification problem (so we can work across 
unknown collection types).</p>
<p>Because it's based on a well understood algorithm that runs in linear
 time, I don't think ensuring good performance for redundantly nested 
collections is too crazy. Recursive collections, on the other hand...</p>
<h3>Graphing Recursive Collections</h3>
<p>A recursive collection is a collection that contains itself, either 
directly or indirectly (e.g. by containing a collection that contains 
the original collection). Recursive collections break a lot of naive 
methods. For example, asking for a description of a recursive collection
 often leads to a crash as the program tries to create a string nested 
to infinity.</p>
<p>If even <em>describing</em> recursive collections doesn't work, what chance do we have of <em>comparing them</em>?
 Well, sometimes you'll get lucky and the comparison will short-circuit 
due to two compared collections or their items being equal by reference 
(i.e. same pointers, same collection, trivially equal). But that's not 
always the case:</p>
<pre><code class="prettyprint"><span class="com">// two arrays</span><span class="pln">
</span><span class="typ">NSMutableArray</span><span class="pun">*</span><span class="pln"> a </span><span class="pun">=</span><span class="pln"> </span><span class="pun">[</span><span class="typ">NSMutableArray</span><span class="pln"> </span><span class="kwd">new</span><span class="pun">];</span><span class="pln">
</span><span class="typ">NSMutableArray</span><span class="pun">*</span><span class="pln"> b </span><span class="pun">=</span><span class="pln"> </span><span class="pun">[</span><span class="typ">NSMutableArray</span><span class="pln"> </span><span class="kwd">new</span><span class="pun">];</span><span class="pln">

</span><span class="com">// containing each other</span><span class="pln">
</span><span class="pun">[</span><span class="pln">a addObject</span><span class="pun">:</span><span class="pln">b</span><span class="pun">];</span><span class="pln">
</span><span class="pun">[</span><span class="pln">b addObject</span><span class="pun">:</span><span class="pln">a</span><span class="pun">];</span><span class="pln">

</span><span class="com">// have the same structure, so should be equal</span><span class="pln">
</span><span class="kwd">bool</span><span class="pln"> areEqual </span><span class="pun">=</span><span class="pln"> </span><span class="pun">[</span><span class="pln">a isEqual</span><span class="pun">:</span><span class="pln">b</span><span class="pun">];</span><span class="pln"> </span><span class="com">// *CRUNCH*</span><span class="pln">
</span><span class="typ">NSLog</span><span class="pun">(</span><span class="pln">areEqual </span><span class="pun">?</span><span class="pln"> </span><span class="pun">@</span><span class="str">"true"</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="pun">@</span><span class="str">"broken"</span><span class="pun">);</span></code></pre>
<p>If you run the above code your program will crash. The arrays have 
the same structure, so I would consider them to be equal, but their 
cyclic nature is causing the naive algorithm to get stuck in a loop 
recursing deeper and deeper until it overflows the stack.</p>
<p>Unification won't help us here. The constraint <code>A = (A)</code> is not considered solvable, because the resulting rewrite rule <code>A -&gt; (A)</code>
 makes a variable depend on itself. If we tried unification, we'd 
determine that the arrays are not equal (which is wrong). We have a more
 general problem now: <a href="https://en.wikipedia.org/wiki/Graph_isomorphism_problem">graph isomorphism</a>.</p>
<p>An algorithm that solves the graph isomorphism problem takes two 
graphs and determines if they are "the same". That is to say: is it 
possible to relabel the nodes of one of the graphs so that it becomes 
the other graph. We can translate our collection equality problem into a
 graph isomorphism problem by making each collection into a node, and 
whenever a collection contains a collection you insert an edge from the 
parent collection's node to the child collection's node. We'd need a bit
 of trickery to turn non-collection items into non-interchangeable leaf 
widgets, but again let's skip over the details to focus on the high 
level things like the running time.</p>
<p>How long does it take to determine if two graphs are isomorphic? 
That's actually a really interesting question that no one knows the 
answer to. Graph isomorphism is one of the few problems currently in 
limbo between P and NP-Complete. There's no known polynomial time 
algorithm, but it seems like there could be one. Suffice it to say that 
the problem <a href="https://complexityzoo.uwaterloo.ca/Complexity_Zoo:G#gi">is its own complexity class</a>. The best algorithms we have <em>tend</em> to run quickly, but contain exponential worst cases.</p>
<p>So it's possible to make collection equality work in the fully 
general case, where collections reference themselves in cycles, by 
translating the equality check into a graph isomorphism problem. The 
problem is that we can't be sure the check won't take an amount of time 
exponential in the size of the collections, and that's a really nasty 
edge case to leave in.</p>
<p>Maybe it's simpler to just not handle this case.</p>
<h3>Summary</h3>
<p>When collections are nested deeply and tend to be repeated, the naive
 comparison algorithm degenerates to taking exponential time. A 
unification-based algorithm would continue to work in linear time.</p>
<p>When collections can indirectly contain themselves, the naive 
comparison algorithm crashes and unification-based algorithms give false
 negatives. A graph-isomorphism-based algorithm will return the correct 
answer, but it's not known if this can be done in polynomial time or 
not.</p>
<p>Collection equality seems simple, but hides hard computer science problems underneath.</p>
<p>---</p>
<h3><a href="http://www.reddit.com/r/programming/comments/1u4kwa/collection_equality_is_hard/">Discuss on Reddit</a></h3>
<p>---</p>
<h3>My Twitter: <a href="https://twitter.com/CraigGidney">@CraigGidney</a></h3>
<p>---</p>

<blockquote><p>


</p><div id="disqus_thread"><iframe verticalscrolling="no" horizontalscrolling="no" src="Collection%20Equality%20is%20Hard%20_%20Twisted%20Oak%20Studios%20Blog_files/a.htm" style="width: 100% ! important; border: medium none ! important; overflow: hidden ! important; height: 346px ! important;" role="complementary" allowtransparency="true" data-disqus-uid="2" id="dsq-2" scrolling="no" width="100%" frameborder="0"></iframe><iframe style="width: 797px ! important; border: medium none ! important; overflow: hidden ! important; top: 0px ! important; min-width: 797px ! important; max-width: 797px ! important; position: fixed ! important; height: 29px ! important; min-height: 29px ! important; max-height: 29px ! important; display: none ! important;" role="alert" allowtransparency="true" data-disqus-uid="indicator-north" id="dsq-indicator-north" scrolling="no" frameborder="0"></iframe><iframe style="width: 797px ! important; border: medium none ! important; overflow: hidden ! important; bottom: 0px ! important; min-width: 797px ! important; max-width: 797px ! important; position: fixed ! important; height: 29px ! important; min-height: 29px ! important; max-height: 29px ! important; display: none ! important;" role="alert" allowtransparency="true" data-disqus-uid="indicator-south" id="dsq-indicator-south" scrolling="no" frameborder="0"></iframe></div>

<script type="text/javascript">
/* <![CDATA[ */
    var disqus_url = 'http://twistedoakstudios.com/blog/Post8565_collection-equality-is-hard';
    var disqus_identifier = '8565 http://twistedoakstudios.com/blog/?p=8565';
    var disqus_container_id = 'disqus_thread';
    var disqus_domain = 'disqus.com';
    var disqus_shortname = 'twistedoakstudios';
    var disqus_title = "Collection Equality is Hard";
        var disqus_config = function () {
        var config = this; // Access to the config object
        config.language = '';

        /*
           All currently supported events:
            * preData — fires just before we request for initial data
            * preInit - fires after we get initial data but before we load any dependencies
            * onInit  - fires when all dependencies are resolved but before dtpl template is rendered
            * afterRender - fires when template is rendered but before we show it
            * onReady - everything is done
         */

        config.callbacks.preData.push(function() {
            // clear out the container (its filled for SEO/legacy purposes)
            document.getElementById(disqus_container_id).innerHTML = '';
        });
                config.callbacks.onReady.push(function() {
            // sync comments in the background so we don't block the page
            var script = document.createElement('script');
            script.async = true;
            script.src = '?cf_action=sync_comments&post_id=8565';

            var firstScript = document.getElementsByTagName( "script" )[0];
            firstScript.parentNode.insertBefore(script, firstScript);
        });
                    };
/* ]]> */
</script>

<script type="text/javascript">
/* <![CDATA[ */
    var DsqLocal = {
        'trackbacks': [
        ],
        'trackback_url': "http:\/\/twistedoakstudios.com\/blog\/Post8565_collection-equality-is-hard\/trackback"    };
/* ]]> */
</script>

<script type="text/javascript">
/* <![CDATA[ */
(function() {
    var dsq = document.createElement('script'); dsq.type = 'text/javascript';
    dsq.async = true;
    dsq.src = '//' + disqus_shortname + '.' + 'disqus.com' + '/embed.js?pname=wordpress&pver=2.74';
    (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
})();
/* ]]> */
</script>

<h3>
<spacer>
</spacer></h3>

<span style="color:#4A9EC2"><em><br>
Twisted Oak Studios offers consulting and development on high-tech interactive projects. Check out our <a href="http://twistedoakstudios.com/portfolio/">portfolio</a>, or <a href="mailto:contact@twistedoakstudios.com">Give us a shout</a> if you have anything you think some really rad engineers should help you with.<br>
</em></span>
<p></p></blockquote>

<h2 class="endofpage">Archive</h2>
<p></p><ul>
     <li><a href="http://twistedoakstudios.com/blog/Post8565_collection-equality-is-hard" rel="bookmark" title="Permanent Link to Collection Equality is Hard">Collection Equality is Hard</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post8424_deadlocks-in-practice-dont-hold-locks-while-notifying" rel="bookmark" title="Permanent Link to Deadlocks in Practice: Don’t Hold Locks While Notifying">Deadlocks in Practice: Don’t Hold Locks While Notifying</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post8355_brute-force-parallelization" rel="bookmark" title="Permanent Link to Brute Force Parallelization">Brute Force Parallelization</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post8237_a-years-worth-of-opinions-about-objective-c" rel="bookmark" title="Permanent Link to A Year’s Worth of Opinions about Objective-C">A Year’s Worth of Opinions about Objective-C</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post8147_referencing-substrings-faster-without-leaking-memory" rel="bookmark" title="Permanent Link to Referencing Substrings Faster, without Leaking Memory">Referencing Substrings Faster, without Leaking Memory</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post8000_not-crying-over-old-code" rel="bookmark" title="Permanent Link to Not Crying Over Old Code">Not Crying Over Old Code</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post7878_exploring-universal-ternary-gates" rel="bookmark" title="Permanent Link to Exploring Universal Ternary Gates">Exploring Universal Ternary Gates</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post7748_impractical-experiments-2-securing-peer-to-peer-fog-of-war-against-map-hacks" rel="bookmark" title="Permanent Link to Impractical Experiments #2: Securing Peer to Peer Fog of War against Map Hacks">Impractical Experiments #2: Securing Peer to Peer Fog of War against Map Hacks</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post7694_achieving-exponential-slowdown-by-enumerating-twice" rel="bookmark" title="Permanent Link to Achieving Exponential Slowdown by Enumerating Twice">Achieving Exponential Slowdown by Enumerating Twice</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post7525_using-immortality-to-kill-accidental-callback-cycles" rel="bookmark" title="Permanent Link to Using Immortality to Kill Accidental Callback Cycles">Using Immortality to Kill Accidental Callback Cycles</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post7391_cancellation-tokens-and-collapsing-futures-for-objective-c" rel="bookmark" title="Permanent Link to Cancellation Tokens (and Collapsing Futures) for Objective-C">Cancellation Tokens (and Collapsing Futures) for Objective-C</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post7254_visualizing-the-eigenvectors-of-a-rotation" rel="bookmark" title="Permanent Link to Visualizing the Eigenvectors of a Rotation">Visualizing the Eigenvectors of a Rotation</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post7149_collapsing-futures-in-objective-c" rel="bookmark" title="Permanent Link to Collapsing Futures in Objective-C">Collapsing Futures in Objective-C</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post7052_bug-hunting-1-garbled-audio-from-end-to-end" rel="bookmark" title="Permanent Link to Bug Hunting #1: Garbled Audio from End to End">Bug Hunting #1: Garbled Audio from End to End</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post6871_impractical-experiments-1-representing-numbers-as-polynomials" rel="bookmark" title="Permanent Link to Impractical Experiments #1: Representing Numbers as Polynomials">Impractical Experiments #1: Representing Numbers as Polynomials</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post6536_implementing-quantum-pseudo-telepathy" rel="bookmark" title="Permanent Link to Implementing Quantum Pseudo-Telepathy">Implementing Quantum Pseudo-Telepathy</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post6422_turn-on-your-damn-warnings" rel="bookmark" title="Permanent Link to Turn On Your Damn Warnings">Turn On Your Damn Warnings</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post5953_big-o-made-trivial" rel="bookmark" title="Permanent Link to Big-O Made Trivial">Big-O Made Trivial</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post5268_unfathomable-bugs-7-the-broken-oven" rel="bookmark" title="Permanent Link to Unfathomable Bugs #7: The Broken Oven">Unfathomable Bugs #7: The Broken Oven</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post5623_solomonoffs-mad-scientist" rel="bookmark" title="Permanent Link to Solomonoff’s Mad Scientist">Solomonoff’s Mad Scientist</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post5753_yearly-blogging-roundup-1" rel="bookmark" title="Permanent Link to Yearly Blogging Roundup #1">Yearly Blogging Roundup #1</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post5485_what-isnt-a-monad" rel="bookmark" title="Permanent Link to What isn’t a Monad">What isn’t a Monad</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post5365_searching-a-sorted-matrix-faster" rel="bookmark" title="Permanent Link to Searching a Sorted Matrix Faster">Searching a Sorted Matrix Faster</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post5273_how-to-read-nested-ternary-operators" rel="bookmark" title="Permanent Link to How to Read Nested Ternary Operators">How to Read Nested Ternary Operators</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post5204_making-sublime-text-2-jump-to-the-correct-line-with-unity-on-os-x" rel="bookmark" title="Permanent Link to Making Sublime Text 2 Jump to the Correct Line with Unity on OS X">Making Sublime Text 2 Jump to the Correct Line with Unity on OS X</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post5096_my-bug-my-bad-4-reading-concurrently" rel="bookmark" title="Permanent Link to My Bug, My Bad #4: Reading Concurrently">My Bug, My Bad #4: Reading Concurrently</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post5018_whole-api-testing-with-reflection" rel="bookmark" title="Permanent Link to Whole API Testing with Reflection">Whole API Testing with Reflection</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post4708_optimizing-a-parser-combinator-into-a-memcpy" rel="bookmark" title="Permanent Link to Optimizing a Parser Combinator into a memcpy">Optimizing a Parser Combinator into a memcpy</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post4872_dont-treat-paths-like-strings" rel="bookmark" title="Permanent Link to Don’t Treat Paths Like Strings">Don’t Treat Paths Like Strings</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post4706_breaking-a-toy-hash-function" rel="bookmark" title="Permanent Link to Breaking a Toy Hash Function">Breaking a Toy Hash Function</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post4425_counting-iterators-lazily" rel="bookmark" title="Permanent Link to Counting Iterators Lazily">Counting Iterators Lazily</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post4428_unfathomable-bugs-6-pretend-precision" rel="bookmark" title="Permanent Link to Unfathomable Bugs #6: Pretend Precision">Unfathomable Bugs #6: Pretend Precision</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post4281_my-bug-my-bad-3-accidentally-attacking-warcraft-3" rel="bookmark" title="Permanent Link to My Bug, My Bad #3: Accidentally Attacking WarCraft 3">My Bug, My Bad #3: Accidentally Attacking WarCraft 3</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post4130_collapsing-types-vs-monads-followup" rel="bookmark" title="Permanent Link to Collapsing Types vs Monads (followup)">Collapsing Types vs Monads (followup)</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post4008_collapsing-futures-easy-to-use-hard-to-represent" rel="bookmark" title="Permanent Link to Collapsing Futures: Easy to Use, Hard to Represent">Collapsing Futures: Easy to Use, Hard to Represent</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post3858_eventual-exceptions-vs-programming-in-a-minimal-functional-style" rel="bookmark" title="Permanent Link to Eventual Exceptions vs Programming in a Minimal Functional Style">Eventual Exceptions vs Programming in a Minimal Functional Style</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post3769_the-mystery-of-flunf" rel="bookmark" title="Permanent Link to The Mystery of Flunf">The Mystery of Flunf</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post3724_explain-it-like-im-five-the-socialist-millionaire-problem-and-secure-multi-party-computation" rel="bookmark" title="Permanent Link to Explain it like I’m Five: The Socialist Millionaire Problem and Secure Multi-Party Computation">Explain it like I’m Five: The Socialist Millionaire Problem and Secure Multi-Party Computation</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post3631_computer-science-blows-my-mind" rel="bookmark" title="Permanent Link to Computer Science Blows My Mind">Computer Science Blows My Mind</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post3484_a-visit-to-execution-labs-in-montreal" rel="bookmark" title="Permanent Link to A visit to Execution Labs in Montréal">A visit to Execution Labs in Montréal</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post3573_transmuting-dice-conserving-entropy" rel="bookmark" title="Permanent Link to Transmuting Dice, Conserving Entropy">Transmuting Dice, Conserving Entropy</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post3516_rule-of-thumb-ask-for-the-clock" rel="bookmark" title="Permanent Link to Rule of Thumb: Ask for the Clock">Rule of Thumb: Ask for the Clock</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post3477_rule-of-thumb-use-purposefully-weakened-methods" rel="bookmark" title="Permanent Link to Rule of Thumb: Use Purposefully Weakened Methods">Rule of Thumb: Use Purposefully Weakened Methods</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post3376_rule-of-thumb-preconditions-should-be-checked-explicitly" rel="bookmark" title="Permanent Link to Rule of thumb: Preconditions Should be Checked Explicitly">Rule of thumb: Preconditions Should be Checked Explicitly</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post3280_intersecting-linked-lists-faster" rel="bookmark" title="Permanent Link to Intersecting Linked Lists Faster">Intersecting Linked Lists Faster</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post3138_mouse-path-smoothing-for-jack-lumber" rel="bookmark" title="Permanent Link to Mouse Path Smoothing for Jack Lumber">Mouse Path Smoothing for Jack Lumber</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post3044_my-bug-my-bad-2-sunk-by-float" rel="bookmark" title="Permanent Link to My Bug, My Bad #2: Sunk by Float">My Bug, My Bad #2: Sunk by Float</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post2852_repeat-yourself-differently" rel="bookmark" title="Permanent Link to Repeat Yourself Differently">Repeat Yourself Differently</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post2644_grovers-quantum-search-algorithm" rel="bookmark" title="Permanent Link to Grover’s Quantum Search Algorithm">Grover’s Quantum Search Algorithm</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post2766_followup-to-non-nullable-types-vs-c" rel="bookmark" title="Permanent Link to Followup to Non-Nullable Types vs C#">Followup to Non-Nullable Types vs C#</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post2540_optimizing-just-in-time-with-expression-trees" rel="bookmark" title="Permanent Link to Optimizing Just in Time with Expression Trees">Optimizing Just in Time with Expression Trees</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post2353_when-one-way-latency-doesnt-matter" rel="bookmark" title="Permanent Link to When One-Way Latency Doesn’t Matter">When One-Way Latency Doesn’t Matter</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post2194_determining-exactly-ifwhenwhere-a-moving-line-intersected-a-moving-point" rel="bookmark" title="Permanent Link to Determining exactly if/when/where a moving line intersected a moving point">Determining exactly if/when/where a moving line intersected a moving point</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post2061_emulating-actors-in-c-with-asyncawait" rel="bookmark" title="Permanent Link to Emulating Actors in C# with Async/Await">Emulating Actors in C# with Async/Await</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post2096_making-an-immutable-queue-with-guaranteed-constant-time-operations" rel="bookmark" title="Permanent Link to Making an immutable queue with guaranteed constant time operations">Making an immutable queue with guaranteed constant time operations</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post399_improving-checked-exceptions" rel="bookmark" title="Permanent Link to Improving Checked Exceptions">Improving Checked Exceptions</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post1941_perishable-collections-the-benefits-of-removal-by-lifetime" rel="bookmark" title="Permanent Link to Perishable Collections: The Benefits of Removal-by-Lifetime">Perishable Collections: The Benefits of Removal-by-Lifetime</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post1823_decoupling-shared-control" rel="bookmark" title="Permanent Link to Decoupling shared control">Decoupling shared control</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post1694_decoupling-inlined-ui-code" rel="bookmark" title="Permanent Link to Decoupling inlined UI code">Decoupling inlined UI code</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post1585_linq-to-collections-beyond-ienumerablet" rel="bookmark" title="Permanent Link to Linq to Collections: Beyond IEnumerable&lt;T&gt;">Linq to Collections: Beyond IEnumerable&lt;T&gt;</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post1295_publish-your-net-library-as-a-nuget-package" rel="bookmark" title="Permanent Link to Publish your .Net library as a NuGet package">Publish your .Net library as a NuGet package</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post1130_when-null-is-not-enough-an-option-type-for-c" rel="bookmark" title="Permanent Link to When null is not enough: an option type for C#">When null is not enough: an option type for C#</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post1473_unfathomable-bugs-5-readonly-or-not" rel="bookmark" title="Permanent Link to Unfathomable Bugs #5: Readonly or not">Unfathomable Bugs #5: Readonly or not</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post667_minkowski-sums-examples" rel="bookmark" title="Permanent Link to Minkowski sums: examples">Minkowski sums: examples</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post1080_my-bug-my-bad-1-fractal-spheres" rel="bookmark" title="Permanent Link to My Bug, My Bad #1: Fractal Spheres">My Bug, My Bad #1: Fractal Spheres</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post1007_working-around-the-brittle-ui-virtualization-in-windows-8" rel="bookmark" title="Permanent Link to Working around the brittle UI Virtualization in Windows 8">Working around the brittle UI Virtualization in Windows 8</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post938_encapsulating-angles" rel="bookmark" title="Permanent Link to Encapsulating Angles">Encapsulating Angles</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post925_unfathomable-bugs-4-keys-that-arent" rel="bookmark" title="Permanent Link to Unfathomable Bugs #4: Keys that aren’t">Unfathomable Bugs #4: Keys that aren’t</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post867_how-would-i-even-use-a-monad-in-c" rel="bookmark" title="Permanent Link to How would I even use a monad (in C#)?">How would I even use a monad (in C#)?</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post822_useful-methods-1-observable-wheneach" rel="bookmark" title="Permanent Link to Useful/Interesting Methods #1: Observable.WhenEach">Useful/Interesting Methods #1: Observable.WhenEach</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post818_unfathomable-bugs-3-stringing-you-along" rel="bookmark" title="Permanent Link to Unfathomable Bugs #3: Stringing you along">Unfathomable Bugs #3: Stringing you along</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post774_anonymous-implementation-classes-a-design-pattern-for-c" rel="bookmark" title="Permanent Link to Anonymous Implementation Classes – A Design Pattern for C#">Anonymous Implementation Classes – A Design Pattern for C#</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post532_tasks-for-action-script-3" rel="bookmark" title="Permanent Link to Tasks for ActionScript 3 – Improving on Event-Driven Programming">Tasks for ActionScript 3 – Improving on Event-Driven Programming</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post554_minkowski-sums-and-differences" rel="bookmark" title="Permanent Link to Minkowski sums and differences">Minkowski sums and differences</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post330_non-nullable-types-vs-c-fixing-the-billion-dollar-mistake" rel="bookmark" title="Permanent Link to Non-Nullable Types vs C#: Fixing the Billion Dollar Mistake">Non-Nullable Types vs C#: Fixing the Billion Dollar Mistake</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post384_unfathomable-bugs-2-slashing-out" rel="bookmark" title="Permanent Link to Unfathomable Bugs #2: Slashing Out">Unfathomable Bugs #2: Slashing Out</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post404_script-templates-and-base-classes" rel="bookmark" title="Permanent Link to Script templates and base classes">Script templates and base classes</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post373_unity-font-extraction" rel="bookmark" title="Permanent Link to Unity font extraction">Unity font extraction</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post341_abusing-phantom-types-to-encode-list-lengths-into-their-type" rel="bookmark" title="Permanent Link to Abusing “Phantom Types” to Encode List Lengths Into Their Type">Abusing “Phantom Types” to Encode List Lengths Into Their Type</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post261_constructive-criticism-of-the-reactive-extensions-api" rel="bookmark" title="Permanent Link to Constructive Criticism of the Reactive Extensions API">Constructive Criticism of the Reactive Extensions API</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post241_quaternions-part-3-2" rel="bookmark" title="Permanent Link to Quaternions part 3">Quaternions part 3</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post204_quaternions-part-2" rel="bookmark" title="Permanent Link to Quaternions part 2">Quaternions part 2</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post144_quaternions-part-1" rel="bookmark" title="Permanent Link to Quaternions part 1">Quaternions part 1</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post157_unfathomable-bugs-1-you-can-have-things-you-can-have-things-in-things-you-can-have" rel="bookmark" title="Permanent Link to Unfathomable Bugs #1: You can have things! You can have things IN things! You can have …">Unfathomable Bugs #1: You can have things! You can have things IN things! You can have …</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post83_coroutines-more-than-you-want-to-know" rel="bookmark" title="Permanent Link to Coroutines – More than you want to know">Coroutines – More than you want to know</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post74_asset-bundle-helper" rel="bookmark" title="Permanent Link to Asset Bundle Helper">Asset Bundle Helper</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post60_the-visual-studio-goes-away" rel="bookmark" title="Permanent Link to The Visual Studio goes away">The Visual Studio goes away</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post57_nets-time-traveling-stopwatch" rel="bookmark" title="Permanent Link to .Net’s time traveling StopWatch">.Net’s time traveling StopWatch</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post29_introducing-catalyst" rel="bookmark" title="Permanent Link to Introducing Catalyst">Introducing Catalyst</a></li>
  </ul>
<p></p>


			</div><!-- #content -->
			</section>

			</div>
		</div><!-- #container -->


</span></div><!-- .container -->

 <div id="upprev_box" style="right: -400px;">
	<h6>
		More interesting posts <span class="num"> (1 of 9 articles)</span>
	</h6>
	<div class="upprev_excerpt">
		<p>
			<a href="http://twistedoakstudios.com/blog/Post8147_referencing-substrings-faster-without-leaking-memory" rel="prev">Referencing Substrings Faster, without Leaking Memory</a>
		</p>
	</div>
	
		<p>
Or check out our <a href="http://twistedoakstudios.com/portfolio">Portfolio</a>.		</p><button id="upprev_close" type="button">Close</button>
</div><!-- #upprev_box -->
<link rel="stylesheet" id="al2fb_style-css" href="Collection%20Equality%20is%20Hard%20_%20Twisted%20Oak%20Studios%20Blog_files/add-link-to-facebook.css" type="text/css" media="all">
<link rel="stylesheet" id="admin-bar-css" href="Collection%20Equality%20is%20Hard%20_%20Twisted%20Oak%20Studios%20Blog_files/admin-bar.css" type="text/css" media="all">
<link rel="stylesheet" id="upprev-css-css" href="Collection%20Equality%20is%20Hard%20_%20Twisted%20Oak%20Studios%20Blog_files/upprev.css" type="text/css" media="all">
<link rel="stylesheet" id="wp-quicklatex-format-css" href="Collection%20Equality%20is%20Hard%20_%20Twisted%20Oak%20Studios%20Blog_files/quicklatex-format.css" type="text/css" media="all">
<script type="text/javascript" src="Collection%20Equality%20is%20Hard%20_%20Twisted%20Oak%20Studios%20Blog_files/admin-bar.js"></script>
<script type="text/javascript" src="Collection%20Equality%20is%20Hard%20_%20Twisted%20Oak%20Studios%20Blog_files/jquery_002.js"></script>
<script type="text/javascript" src="Collection%20Equality%20is%20Hard%20_%20Twisted%20Oak%20Studios%20Blog_files/upprev_js.php"></script>
<script type="text/javascript" src="Collection%20Equality%20is%20Hard%20_%20Twisted%20Oak%20Studios%20Blog_files/comment-reply.js"></script>
	<script type="text/javascript">
		(function() {
			var request, b = document.body, c = 'className', cs = 'customize-support', rcs = new RegExp('(^|\\s+)(no-)?'+cs+'(\\s+|$)');

			request = true;

			b[c] = b[c].replace( rcs, ' ' );
			b[c] += ( window.postMessage && request ? ' ' : ' no-' ) + cs;
		}());
	</script>
			

		 
<!-- BEGIN footer-type stuff -->
<div class="container footer-container">
	<div class="row">
		
		<div class="fourcol last"><!-- .last b/c it's floated right -->
      <!-- home portfolio used to be here -->
		</div>

		<div class="eightcol" id="contact">
			<p>Twisted Oak Studios<br>
				138-1657 Barrington St.<br>
				Halifax, NS, Canada B3J 2A1</p>
			
			<p>001-902-237-7326<br>
			<a href="mailto:contact@twistedoakstudios.com">contact@twistedoakstudios.com</a></p>
		</div>

		<div class="twelvecol">
			<footer>
				<small>©2012
					<script>
						var d=new Date(); 
						yr=d.getFullYear();
						if (yr!=2012)
						document.write("- "+yr);
					</script>- 2013 Twisted Oak Studios Ltd. -- All Rights Reserved -- All images and logos are property of their respective owners.
				</small>
			</footer>
		</div>
		
		
	</div><!-- .row -->
</div><!-- .container -->
<!-- END footer stuff-->

<!-- jQuery and scrolly script for contact link -->
<script src="Collection%20Equality%20is%20Hard%20_%20Twisted%20Oak%20Studios%20Blog_files/jquery.js"></script>
  <script>window.jQuery || document.write('<script src="../js/libs/jquery-1.6.2.min.js"><\/script>')</script>

<script src="Collection%20Equality%20is%20Hard%20_%20Twisted%20Oak%20Studios%20Blog_files/scrolly.js"></script>


  <!-- Don't forget Analytics! -->



  <!-- Prompt IE 6 users to install Chrome Frame. Remove this if you want to support IE 6.
       chromium.org/developers/how-tos/chrome-frame-getting-started -->
  <!--[if lt IE 7 ]>
    <script src="//ajax.googleapis.com/ajax/libs/chrome-frame/1.0.3/CFInstall.min.js"></script>
    <script>window.attachEvent('onload',function(){CFInstall.check({mode:'overlay'})})</script>
  <![endif]-->
  


<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-31441525-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>
<div id="wpadminbar" class="nojq " role="navigation">
			<a class="screen-reader-shortcut" href="#wp-toolbar" tabindex="1">Skip to toolbar</a>
			<div class="quicklinks" id="wp-toolbar" role="navigation" aria-label="Top navigation toolbar." tabindex="0">
				<ul id="wp-admin-bar-root-default" class="ab-top-menu">
		<li id="wp-admin-bar-wp-logo" class="menupop"><a class="ab-item" aria-haspopup="true" href="http://twistedoakstudios.com/blog/wp-admin/about.php" title="About WordPress"><span class="ab-icon"></span></a><div class="ab-sub-wrapper"><ul id="wp-admin-bar-wp-logo-default" class="ab-submenu">
		<li id="wp-admin-bar-about"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/about.php">About WordPress</a>		</li></ul><ul id="wp-admin-bar-wp-logo-external" class="ab-sub-secondary ab-submenu">
		<li id="wp-admin-bar-wporg"><a class="ab-item" href="http://wordpress.org/">WordPress.org</a>		</li>
		<li id="wp-admin-bar-documentation"><a class="ab-item" href="http://codex.wordpress.org/">Documentation</a>		</li>
		<li id="wp-admin-bar-support-forums"><a class="ab-item" href="http://wordpress.org/support/">Support Forums</a>		</li>
		<li id="wp-admin-bar-feedback"><a class="ab-item" href="http://wordpress.org/support/forum/requests-and-feedback">Feedback</a>		</li></ul></div>		</li>
		<li id="wp-admin-bar-site-name" class="menupop"><a class="ab-item" aria-haspopup="true" href="http://twistedoakstudios.com/blog/wp-admin/">Twisted Oak Studios Blog</a><div class="ab-sub-wrapper"><ul id="wp-admin-bar-site-name-default" class="ab-submenu">
		<li id="wp-admin-bar-dashboard"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/">Dashboard</a>		</li></ul><ul id="wp-admin-bar-appearance" class="ab-submenu">
		<li id="wp-admin-bar-themes"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/themes.php">Themes</a>		</li>
		<li id="wp-admin-bar-customize" class="hide-if-no-customize"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/customize.php?url=http%3A%2F%2Ftwistedoakstudios.com%2Fblog%2FPost8565_collection-equality-is-hard">Customize</a>		</li></ul></div>		</li>
		<li class="" id="wp-admin-bar-updates"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/update-core.php" title="3 Plugin Updates, 3 Theme Updates"><span class="ab-icon"></span><span class="ab-label">6</span><span class="screen-reader-text">3 Plugin Updates, 3 Theme Updates</span></a>		</li>
		<li class="" id="wp-admin-bar-comments"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/edit-comments.php" title="1 comment awaiting moderation"><span class="ab-icon"></span><span id="ab-awaiting-mod" class="ab-label awaiting-mod pending-count count-1">1</span></a>		</li>
		<li id="wp-admin-bar-new-content" class="menupop      "><a class="ab-item" aria-haspopup="true" href="http://twistedoakstudios.com/blog/wp-admin/post-new.php" title="Add New"><span class="ab-icon"></span><span class="ab-label">New</span></a><div class="ab-sub-wrapper"><ul id="wp-admin-bar-new-content-default" class="ab-submenu">
		<li id="wp-admin-bar-new-post"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/post-new.php">Post</a>		</li>
		<li id="wp-admin-bar-new-media"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/media-new.php">Media</a>		</li>
		<li id="wp-admin-bar-new-link"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/link-add.php">Link</a>		</li>
		<li id="wp-admin-bar-new-page"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/post-new.php?post_type=page">Page</a>		</li>
		<li id="wp-admin-bar-new-user"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/user-new.php">User</a>		</li></ul></div>		</li>
		<li class="" id="wp-admin-bar-edit"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/post.php?post=8565&amp;action=edit">Edit Post</a>		</li></ul><ul id="wp-admin-bar-top-secondary" class="ab-top-secondary ab-top-menu">
		<li id="wp-admin-bar-search" class="admin-bar-search"><div class="ab-item ab-empty-item" tabindex="-1"><form action="http://twistedoakstudios.com/blog/" method="get" id="adminbarsearch"><input class="adminbar-input" name="s" id="adminbar-search" maxlength="150" type="text"><input class="adminbar-button" value="Search" type="submit"></form></div>		</li>
		<li id="wp-admin-bar-my-account" class="menupop with-avatar"><a class="ab-item" aria-haspopup="true" href="http://twistedoakstudios.com/blog/wp-admin/profile.php" title="My Account">Howdy, Craig Gidney<img alt="" src="Collection%20Equality%20is%20Hard%20_%20Twisted%20Oak%20Studios%20Blog_files/31a6ce579f8f9f9d528715d1e941726e.png" class="avatar avatar-16 photo" width="16" height="16"></a><div class="ab-sub-wrapper"><ul id="wp-admin-bar-user-actions" class="ab-submenu">
		<li id="wp-admin-bar-user-info"><a class="ab-item" tabindex="-1" href="http://twistedoakstudios.com/blog/wp-admin/profile.php"><img alt="" src="Collection%20Equality%20is%20Hard%20_%20Twisted%20Oak%20Studios%20Blog_files/31a6ce579f8f9f9d528715d1e941726e_002.png" class="avatar avatar-64 photo" width="64" height="64"><span class="display-name">Craig Gidney</span><span class="username">craig</span></a>		</li>
		<li id="wp-admin-bar-edit-profile"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/profile.php">Edit My Profile</a>		</li>
		<li id="wp-admin-bar-logout"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-login.php?action=logout&amp;_wpnonce=e29c9a1a74">Log Out</a>		</li></ul></div>		</li></ul>			</div>
			<a class="screen-reader-shortcut" href="http://twistedoakstudios.com/blog/wp-login.php?action=logout&amp;_wpnonce=e29c9a1a74">Log Out</a>
		</div></body></html>