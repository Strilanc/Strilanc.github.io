<!DOCTYPE html>
<!-- paulirish.com/2008/conditional-stylesheets-vs-css-hacks-answer-neither/ -->
<!--[if lt IE 7]> <html class="no-js ie6 oldie" lang="en"> <![endif]-->
<!--[if IE 7]>    <html class="no-js ie7 oldie" lang="en"> <![endif]-->
<!--[if IE 8]>    <html class="no-js ie8 oldie" lang="en"> <![endif]-->
<!-- Consider adding an manifest.appcache: h5bp.com/d/Offline -->
<!--[if gt IE 8]><!-->
<html class=" js flexbox canvas canvastext webgl no-touch geolocation postmessage no-websqldatabase indexeddb hashchange history draganddrop websockets rgba hsla multiplebgs backgroundsize borderimage borderradius boxshadow textshadow opacity cssanimations csscolumns cssgradients no-cssreflections csstransforms csstransforms3d csstransitions fontface generatedcontent video audio localstorage sessionstorage webworkers applicationcache svg inlinesvg smil svgclippaths" xmlns="http://www.w3.org/1999/xhtml" xmlns:og="http://ogp.me/ns#" xmlns:fb="https://www.facebook.com/2008/fbml" lang="en"><script id="bug.surrogate">var urchinTracker=function(){},_gaq={push:function(){try {if(arguments[0][0]=='_link')window.location.href=arguments[0][1]}catch(er){}}},_gat={_createTracker:function(){}, _getTracker:function(){return{__noSuchMethod__:function(){},_link:function(o){if(o)location.href=o;},_linkByPost:function(){return true;},_getLinkerUrl:function(o){return o;},_trackEvent:function(){}}}}; if (document.location.host == 'www.salon.com') {var _ga_ = document.querySelectorAll('script[src$=ga\\.js]')[0], ga_e = document.createEvent('Event'); ga_e.initEvent('load', true, true);_ga_.dispatchEvent(ga_e);}</script><!--<![endif]--><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
  <meta charset="utf-8">
   <!-- blog feed link -->
  <link href="http://twistedoakstudios.com/blog/?feed=rss" rel="alternate" type="application/rss+xml" title="Twisted Oak Studios Blog">

  <!-- Use the .htaccess and remove these lines to avoid edge case issues.
       More info: h5bp.com/b/378 -->
  <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">

  <title>Twisted Oak Studios | Unity3D Consulting | Technical Magic</title>
  <meta name="description" content="As a lean co-operative team of seasoned developers, Twisted Oak is able to offer efficient, flexible remote and on-the-floor development and consulting without any middle-man or excessive administrivia.">
  <meta name="author" content="/humans.txt">

  <meta name="viewport" content="width=device-width,initial-scale=1">

  <link rel="shortcut icon" href="http://twistedoakstudios.com/blog/favicon.ico">
  <link rel="apple-touch-icon-precomposed" href="http://twistedoakstudios.com/blog/apple-touch-icon-precomposed.png">

  	<!-- The 1140px Grid - http://cssgrid.net/ -->
	<link rel="stylesheet" href="Repeat%20Yourself%20Differently_files/1140.css">
    <link rel="stylesheet" href="Repeat%20Yourself%20Differently_files/style.css">
    <link rel="stylesheet" href="Repeat%20Yourself%20Differently_files/blogstyle.css">
<link rel="stylesheet" href="Repeat%20Yourself%20Differently_files/prettify.css" media="all">
<link rel="stylesheet" href="Repeat%20Yourself%20Differently_files/sunburst.css" media="all">
<script type="text/javascript" src="Repeat%20Yourself%20Differently_files/prettify.js"></script>

	<!-- Webfonts! -->
	<link href="Repeat%20Yourself%20Differently_files/css.css" rel="stylesheet" type="text/css">

	<!-- Open Graph -->
	<meta property="og:title" content="Twisted Oak Studios">
	<meta property="og:type" content="company">
	<meta property="og:url" content="http://www.twistedoakstudios.com/">
	<meta property="og:image" content="http://www.twistedoakstudios.com/images/logo.png">
	<meta property="og:description" content="As a lean co-operative team of seasoned developers, Twisted Oak is able to offer efficient, flexible remote and on-the-floor development and consulting without any middle-man or excessive administrivia.">
  
  <script src="Repeat%20Yourself%20Differently_files/modernizr-2.js"></script>
</head>
<body class=" customize-support" onload="prettyPrint()">
<!-- begin header -->
<div class="container header-container">
	<div class="row">
		<header>
			<div class="threecol">
				<a href="#"><img class="logo" src="Repeat%20Yourself%20Differently_files/logo.png"></a>
			</div><!-- .threecol -->
		
			<div class="fourcol navcol">
				<nav>
					<ul class="primary-nav clearfix">
						<li><a href="http://twistedoakstudios.com/">Home</a></li>
						<li><a href="http://twistedoakstudios.com/portfolio/">Portfolio</a></li>
						<li><a href="http://twistedoakstudios.com/labs/">Labs</a></li>
						<li><a class="scroll" href="#contact">Contact</a></li>
						<li><a href="http://twistedoakstudios.com/blog/">Blog</a></li>
					</ul>
				</nav>
			</div>    

    	</header>
	</div><!-- .row -->
</div><!-- .container -->


	<div id="main">
<span class="blog">
<div class="container home-container" id="home">
	<div class="row">
		<section>
			
			<div class="ninecol">


<h2><a href="http://twistedoakstudios.com/blog/Post2852_repeat-yourself-differently" rel="bookmark" title="Permanent Link to Repeat Yourself Differently">Repeat Yourself Differently</a></h2>
<div class="meta">posted by Craig Gidney on March 12, 2013</div>

<p>Rules of thumb, by their very nature, tend to contradict each other. 
They oversimplify, and break down in corner cases. Software 
development’s many rules of thumb (<a href="http://en.wikipedia.org/wiki/KISS_principle">Keep it simple, stupid</a>, <a href="http://en.wikipedia.org/wiki/YAGNI">You ain’t gonna need it</a>, <a href="http://www.codelord.net/2011/03/05/fake-it-till-you-make-it-team-edition">Fake it till you make it</a>, <a href="http://jasonroelofs.com/2012/10/01/naming-is-everything/">Naming is everything</a>, <a href="http://blog.muonlab.com/2012/04/12/why-you-suck-at-estimating-a-lesson-in-psychology/">You suck at estimating</a>, …), are no exception. Should my code be <a href="http://en.wikipedia.org/wiki/Self-documenting_code">self-documenting</a> or <a href="http://en.wikipedia.org/wiki/Literate_programming">literate</a>? Should I be <a href="http://www.paulgraham.com/power.html">succinct</a> or <a href="http://programmers.stackexchange.com/questions/91854/how-to-train-yourself-to-avoid-writing-clever-code">not “clever”</a>?</p>
<p>A great example of a rule of thumb is “<a href="http://en.wikipedia.org/wiki/DRY_principle">Don’t Repeat Yourself</a>“.
 Take any real world code, and it can probably be improved by extracting
 repeated patterns to reduce redundancy. Take the idea too far, and you 
can create some truly difficult to understand programs. Take it <em>way</em> too far, and there might be <a href="http://en.wikipedia.org/wiki/Kolmogorov_complexity#Incomputability_of_Kolmogorov_complexity">no possible proof your code works (even though it does)</a>!</p>
<p>“Testing is Good” is another good rule of thumb. Yet… a test must be 
redundant, violating “Don’t Repeat Yourself”. If you can learn some fact
 about the code from a test, then you can also learn it from the 
implementation. Tests contain repackaged information, not new 
information. It may be more difficult to learn facts about the code 
through the implementation rather than the tests, but it must be 
possible. A blind optimizer of the DRY principle would be in favor of 
removing the redundant tests.</p>
<p>The redundancy in tests is (obviously) pragmatically justified, but 
how? Are there other ways to achieve the benefits of tests? This week, I
 talk (read: ramble) about the benefits of repeating yourself <em>differently</em>.</p>
<h3>Preamble: Repeating yourself is bad</h3>
<p>Unintentionally repeating yourself is, generally, bad. The best predictor we have for the number of bugs in a program <a href="http://blog.vivekhaldar.com/post/10669678292/size-is-the-best-predictor-of-code-quality">is the number of lines of code</a> (<a href="http://www.codinghorror.com/blog/2006/07/diseconomies-of-scale-and-lines-of-code.html">UNLESS</a>. <a href="http://stackoverflow.com/questions/184071/when-if-ever-is-number-of-lines-of-code-a-useful-metric">YOU</a>. <a href="http://www.inc.com/magazine/20081001/how-hard-could-it-be-sins-of-commissions.html">INCENTIVIZE</a>. <a href="http://en.wikipedia.org/wiki/Source_lines_of_code#Utility">THAT</a>.). Repeating yourself increases the size of the code, and (based on the heuristic) thus tends to increase the number of bugs.</p>
<p>This is not just some theoretical idea without practical 
applications. Some time ago, a company asked us to review some code 
(written by another company) and give advice on how to proceed. The code
 was awful. Some of the worst I’ve ever seen. Amongst other flaws, the 
code blatantly and constantly repeated itself. (Note: fabricated details
 ahead, for anonymization.)</p>
<p>For example, the names of waypoints were hard-coded into the program.
 Many times. There was a hard-coded dictionary from waypoint names to 
waypoint locations, a hard-coded dictionary from waypoint names to 
secondary names of waypoints and even a hard-coded dictionary for the 
opposite direction from waypoint secondary names to the original 
waypoint names. A nice little trap for anyone who might have crazy ideas
 like “Lets improve the name of that waypoint.” or “Lets localize the 
waypoint names based on the user’s language.”.</p>
<p>On top of the repetition of data, there was a lot of repeated code 
(copy pasta). Every possible network request/response had its own static
 dictionary field for mapping request ids to callbacks, its own 
slightly-customized method to send a request and place a callback in the
 appropriate dictionary, and its own slightly-customized method to 
invoke the stored callback when a response was received. Naturally the 
dictionary entries were inconsistently cleared and callbacks could 
potentially overwrite each other because the ids weren’t necessarily 
unique. The copy pasta repeated these bugs (and minor variations) dozens
 and dozens of times.</p>
<p>Ultimately the authoring company was, technically, let go for repeating themselves so  much. Clearly something to avoid.</p>
<h3>Flawed humans</h3>
<p>Ideally, you would never repeat yourself. Unfortunately, we humans 
are not perfect. Come to think of it, we’re barely adequate. We miss key
 presses, type one word when intending to type another, infer based on 
temporarily confused mathematical intuitions, and are generally terrible
 at consistently correctly performing tasks.</p>
<p>The best way to reduce errors in a process is <a href="http://tmdefinition.wordpress.com/2006/10/15/reducing-human-errors-through-process-automation/">removing the humans</a>.
 Unfortunately, that’s not achievable when it comes to software 
development. It’s hard to translate human intentions into executable 
specifications (a.k.a. developing software) without a human to source 
intentions from.</p>
<p>Human error happens. This is an unavoidable fact. We’re going to make
 mistakes. However, that doesn’t mean we can’t later detect and correct 
those mistakes.</p>
<h3>Do it again</h3>
<p>The simplest technique for catching mistakes is… repetition. 
Implement the same thing twice (or more), and compare the two 
implementations. Differences are guaranteed to be bugs (mistakes), and 
bugs tend to be represented in the differences. We’re not <em>unnecessarily</em> repeating ourselves, we’re trying to reduce errors.</p>
<p>The problem with doing the same thing twice, even if different people
 are doing the two implementations, is that bugs can correlate. If I 
make a mistake because I’m confused about some mathematical fact (as 
opposed to just making a typo), I’m going to make the same mistake again
 and again and again. I might even un-repair correct code. There’s no 
guarantee another person won’t be confused in the same way, either. 
There are <a href="http://mathoverflow.net/questions/23478/examples-of-common-false-beliefs-in-mathematics">common false beliefs in mathematics</a>.</p>
<p>There is a benefit to doing the same thing twice. You’ll catch some 
dumb mistakes. However, you’ll also miss all the interesting mistakes, 
and take twice as long to do anything.</p>
<p>Repeating the same implementation has a large cost in repetition, and
 its benefit in error reduction is debatable. We want something better.</p>
<h3>Do it again, but not the same</h3>
<p>In order to avoid correlated bugs, you can approach problems from 
multiple directions. Instead of repeating your solution twice, try to 
create a totally different solution using a totally different approach.</p>
<p>For example, mistakes in <a href="http://en.wikipedia.org/wiki/Imperative_program">imperative</a> programs and mistakes in <a href="http://en.wikipedia.org/wiki/Functional_programming">functional</a> programs don’t always translate. You can’t mistakenly use <code>&lt;=</code> when you’re using List.map instead of <code>for (int i = 0; i &lt; n; i++)</code>.
 You can’t accidentally modify a list while iterating it, if you can’t 
modify lists in the first place. You can’t blow the stack with an 
accidentally-not-tail-recursive call, if you’re using while loops 
instead of recursion.</p>
<p><a href="http://en.wikipedia.org/wiki/Logic_programming">Logic programming</a>
 is even further removed from imperative programming, compared to 
functional programming. Both imperative programs and functional programs
 tend to explicitly construct results, but a logical program implicitly 
constrains what a result can be. In an imperative language, a 
choose-smaller-value function would be implemented like this: <code>if (a &lt; b) return a; else return b;</code>. In a logic language, it would be implemented totally differently:</p>
<pre><code class="prettyprint"><span class="kwd">int</span><span class="pln"> min</span><span class="pun">(</span><span class="kwd">int</span><span class="pln"> a</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">int</span><span class="pln"> b</span><span class="pun">):</span><span class="pln">
    </span><span class="kwd">ensure</span><span class="pln"> result </span><span class="pun">&lt;=</span><span class="pln"> a
    </span><span class="kwd">ensure</span><span class="pln"> result </span><span class="pun">&lt;=</span><span class="pln"> b
    </span><span class="kwd">ensure</span><span class="pln"> result </span><span class="pun">==</span><span class="pln"> a </span><span class="kwd">or</span><span class="pln"> result </span><span class="pun">==</span><span class="pln"> b</span></code></pre>
<p>You have to be mistaken about what you want <strong>and</strong> how 
to get it, in order to translate an error between an imperative-style 
implementation and a logic-style implementation. That's a pretty high 
bar, though it's still possible to make mistakes. Even computer-checked 
theorems might accidentally prove the wrong thing (i.e. I think the most
 likely way the computer proof of (say) the <a href="http://en.wikipedia.org/wiki/Four_color_theorem">four color theorem</a> <em>could</em>
 be wrong, is that there was a mistake in the translation from the human
 understanding of the problem to the theorem proving language.).</p>
<p>Using a different paradigm for each implementation has great error reduction benefits. After all, even <a href="http://en.wikipedia.org/wiki/Formal_verification">formal verification</a>
 is an example of checking that an implementation matches a logical 
implementation / specification. Actually, comparing implementations 
across different paradigms <em>is</em> formal verification.</p>
<p>Unfortunately, doing a full re-implementation of a program into a 
logical style is a lot of work. Comparing the two implementations is 
also difficult, because they might use totally different abstractions or
 separate the problem domain differently (especially if you have 
separate programmers writing each implementation, which is reasonable 
since most wouldn't be good at both styles). It would be ideal to have 
something more flexible in terms of cost, and more approachable / 
concrete in terms of concepts.</p>
<h3>Do it again, but not the same, and only a little bit</h3>
<p>To make it easier to map functionality between our two hypothetical 
implementations, we can use consistent pieces (i.e. control the allowed 
types of differences). Instead of independently creating the 
architecture of the logic-style program, make sure it has the same 
components as the imperative program (perhaps straight down to having 
the same functions).</p>
<p>A nice bonus of using the same pieces is that you no longer have to 
implement the entire logical implementation before you can start 
comparing. You can do it piece by piece. If that sounds like a test to 
you... well, it's actually more like a fully-specified <a href="http://en.wikipedia.org/wiki/Design_by_contract">contract</a>:</p>
<pre><code class="prettyprint"><span class="kwd">int</span><span class="pln"> </span><span class="typ">Divide</span><span class="pun">(</span><span class="kwd">int</span><span class="pln"> numerator</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">int</span><span class="pln"> denominator</span><span class="pun">):</span><span class="pln">
    </span><span class="kwd">require</span><span class="pln"> denominator </span><span class="pun">!=</span><span class="pln"> </span><span class="lit">0</span><span class="pln">
    </span><span class="kwd">ensure</span><span class="pln"> result</span><span class="pun">.</span><span class="pln">remainder </span><span class="pun">+</span><span class="pln"> result</span><span class="pun">.</span><span class="pln">quotient </span><span class="pun">*</span><span class="pln"> denominator </span><span class="pun">==</span><span class="pln"> numerator
    </span><span class="kwd">ensure</span><span class="pln"> sign</span><span class="pun">(</span><span class="pln">results</span><span class="pun">.</span><span class="pln">remainder</span><span class="pun">)</span><span class="pln"> </span><span class="pun">!=</span><span class="pln"> </span><span class="pun">-</span><span class="pln">sign</span><span class="pun">(</span><span class="pln">denominator</span><span class="pun">)</span><span class="pln">
    </span><span class="kwd">ensure</span><span class="pln"> </span><span class="lit">0</span><span class="pln"> </span><span class="pun">&lt;=</span><span class="pln"> abs</span><span class="pun">(</span><span class="pln">results</span><span class="pun">.</span><span class="pln">remainder</span><span class="pun">)</span><span class="pln"> </span><span class="pun">&lt;</span><span class="pln"> abs</span><span class="pun">(</span><span class="pln">denominator</span><span class="pun">)</span></code></pre>
<p>Tests are one tiny step further, where we let the logical 
implementation be significantly 'looser' than the imperative 
implementation. This allows us to check concrete details, without having
 to mimic all the minutia of the other implementation:</p>
<pre><code class="prettyprint"><span class="kwd">assert</span><span class="pln"> </span><span class="typ">Divide</span><span class="pun">(</span><span class="lit">5</span><span class="pun">,</span><span class="lit">3</span><span class="pun">)</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> </span><span class="pun">{</span><span class="pln">quotient</span><span class="pun">:</span><span class="pln"> </span><span class="lit">1</span><span class="pun">,</span><span class="pln"> remainder</span><span class="pun">:</span><span class="pln"> </span><span class="lit">2</span><span class="pun">}</span><span class="pln">
</span><span class="kwd">assert</span><span class="pln"> </span><span class="typ">Divide</span><span class="pun">(</span><span class="lit">5</span><span class="pun">,-</span><span class="lit">3</span><span class="pun">)</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> </span><span class="pun">{</span><span class="pln">quotient</span><span class="pun">:</span><span class="pln"> </span><span class="lit">1</span><span class="pun">,</span><span class="pln"> remainder</span><span class="pun">:</span><span class="pln"> </span><span class="pun">-</span><span class="lit">2</span><span class="pun">}</span><span class="pln">
</span><span class="kwd">assert</span><span class="pln"> </span><span class="typ">Divide</span><span class="pun">(-</span><span class="lit">5</span><span class="pun">,</span><span class="lit">3</span><span class="pun">)</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> </span><span class="pun">{</span><span class="pln">quotient</span><span class="pun">:</span><span class="pln"> </span><span class="pun">-</span><span class="lit">2</span><span class="pun">,</span><span class="pln"> remainder</span><span class="pun">:</span><span class="pln"> </span><span class="lit">1</span><span class="pun">}</span></code></pre>
<p>So, it turns out, tests are a natural way to repeat yourself 
differently. They're concrete, they're a totally different way of 
looking at the problem ("what" vs "how"), and they allow you to 
independently verify small bits of functionality. They're not quite as 
safe as a full logical specification to compare against, but a great 
trade-off.</p>
<h3>Summary</h3>
<p>To catch human errors, you must repeat yourself.</p>
<p>To catch tricky human errors, you must repeat yourself differently.</p>
<p>Tests, contracts, formal verification, and even 
running-it-and-changing-if-it-looks-wrong are all examples of repeating 
yourself differently.</p>
<p>This is incredibly obvious in hindsight.</p>
<p>---</p>
<h3>Discuss on <a href="https://news.ycombinator.com/item?id=5360515">Hacker News</a>, <a href="http://www.reddit.com/r/programming/comments/1a4ujh/repeat_yourself_differently/">Reddit</a></h3>
<p>---</p>

<blockquote><p>
<span style="color:#4A9EC2"><em><br>
Twisted Oak Studios offers consulting and development on high-tech interactive projects. Check out our <a href="http://twistedoakstudios.com/portfolio/">portfolio</a>, or <a href="mailto:contact@twistedoakstudios.com">Give us a shout</a> if you have anything you think some really rad engineers should help you with.<br>
</em></span>
</p></blockquote>
<h2 class="endofpage">Older Posts</h2>
<p></p><ul>
     <li><a href="http://twistedoakstudios.com/blog/Post4008_collapsing-futures-easy-to-use-hard-to-represent" rel="bookmark" title="Permanent Link to Collapsing Futures: Easy to Use, Hard to Represent">Collapsing Futures: Easy to Use, Hard to Represent</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post3858_eventual-exceptions-vs-programming-in-a-minimal-functional-style" rel="bookmark" title="Permanent Link to Eventual Exceptions vs Programming in a Minimal Functional Style">Eventual Exceptions vs Programming in a Minimal Functional Style</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post3769_the-mystery-of-flunf" rel="bookmark" title="Permanent Link to The Mystery of Flunf">The Mystery of Flunf</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post3724_explain-it-like-im-five-the-socialist-millionaire-problem-and-secure-multi-party-computation" rel="bookmark" title="Permanent Link to Explain it like I’m Five: The Socialist Millionaire Problem and Secure Multi-Party Computation">Explain it like I’m Five: The Socialist Millionaire Problem and Secure Multi-Party Computation</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post3631_computer-science-blows-my-mind" rel="bookmark" title="Permanent Link to Computer Science Blows My Mind">Computer Science Blows My Mind</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post3484_a-visit-to-execution-labs-in-montreal" rel="bookmark" title="Permanent Link to A visit to Execution Labs in Montréal">A visit to Execution Labs in Montréal</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post3573_transmuting-dice-conserving-entropy" rel="bookmark" title="Permanent Link to Transmuting Dice, Conserving Entropy">Transmuting Dice, Conserving Entropy</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post3516_rule-of-thumb-ask-for-the-clock" rel="bookmark" title="Permanent Link to Rule of Thumb: Ask for the Clock">Rule of Thumb: Ask for the Clock</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post3477_rule-of-thumb-use-purposefully-weakened-methods" rel="bookmark" title="Permanent Link to Rule of Thumb: Use Purposefully Weakened Methods">Rule of Thumb: Use Purposefully Weakened Methods</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post3376_rule-of-thumb-preconditions-should-be-checked-explicitly" rel="bookmark" title="Permanent Link to Rule of thumb: Preconditions Should be Checked Explicitly">Rule of thumb: Preconditions Should be Checked Explicitly</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post3280_intersecting-linked-lists-faster" rel="bookmark" title="Permanent Link to Intersecting Linked Lists Faster">Intersecting Linked Lists Faster</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post3138_mouse-path-smoothing-for-jack-lumber" rel="bookmark" title="Permanent Link to Mouse Path Smoothing for Jack Lumber">Mouse Path Smoothing for Jack Lumber</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post3044_my-bug-my-bad-2-sunk-by-float" rel="bookmark" title="Permanent Link to My Bug, My Bad #2: Sunk by Float">My Bug, My Bad #2: Sunk by Float</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post2644_grovers-quantum-search-algorithm" rel="bookmark" title="Permanent Link to Grover’s Quantum Search Algorithm">Grover’s Quantum Search Algorithm</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post2766_followup-to-non-nullable-types-vs-c" rel="bookmark" title="Permanent Link to Followup to Non-Nullable Types vs C#">Followup to Non-Nullable Types vs C#</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post2540_optimizing-just-in-time-with-expression-trees" rel="bookmark" title="Permanent Link to Optimizing Just in Time with Expression Trees">Optimizing Just in Time with Expression Trees</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post2353_when-one-way-latency-doesnt-matter" rel="bookmark" title="Permanent Link to When One-Way Latency Doesn’t Matter">When One-Way Latency Doesn’t Matter</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post2194_determining-exactly-ifwhenwhere-a-moving-line-intersected-a-moving-point" rel="bookmark" title="Permanent Link to Determining exactly if/when/where a moving line intersected a moving point">Determining exactly if/when/where a moving line intersected a moving point</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post2061_emulating-actors-in-c-with-asyncawait" rel="bookmark" title="Permanent Link to Emulating Actors in C# with Async/Await">Emulating Actors in C# with Async/Await</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post2096_making-an-immutable-queue-with-guaranteed-constant-time-operations" rel="bookmark" title="Permanent Link to Making an immutable queue with guaranteed constant time operations">Making an immutable queue with guaranteed constant time operations</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post399_improving-checked-exceptions" rel="bookmark" title="Permanent Link to Improving Checked Exceptions">Improving Checked Exceptions</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post1941_perishable-collections-the-benefits-of-removal-by-lifetime" rel="bookmark" title="Permanent Link to Perishable Collections: The Benefits of Removal-by-Lifetime">Perishable Collections: The Benefits of Removal-by-Lifetime</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post1823_decoupling-shared-control" rel="bookmark" title="Permanent Link to Decoupling shared control">Decoupling shared control</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post1694_decoupling-inlined-ui-code" rel="bookmark" title="Permanent Link to Decoupling inlined UI code">Decoupling inlined UI code</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post1585_linq-to-collections-beyond-ienumerablet" rel="bookmark" title="Permanent Link to Linq to Collections: Beyond IEnumerable&lt;T&gt;">Linq to Collections: Beyond IEnumerable&lt;T&gt;</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post1295_publish-your-net-library-as-a-nuget-package" rel="bookmark" title="Permanent Link to Publish your .Net library as a NuGet package">Publish your .Net library as a NuGet package</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post1130_when-null-is-not-enough-an-option-type-for-c" rel="bookmark" title="Permanent Link to When null is not enough: an option type for C#">When null is not enough: an option type for C#</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post1473_unfathomable-bugs-5-readonly-or-not" rel="bookmark" title="Permanent Link to Unfathomable Bugs #5: Readonly or not">Unfathomable Bugs #5: Readonly or not</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post667_minkowski-sums-examples" rel="bookmark" title="Permanent Link to Minkowski sums: examples">Minkowski sums: examples</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post1080_my-bug-my-bad-1-fractal-spheres" rel="bookmark" title="Permanent Link to My Bug, My Bad #1: Fractal Spheres">My Bug, My Bad #1: Fractal Spheres</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post1007_working-around-the-brittle-ui-virtualization-in-windows-8" rel="bookmark" title="Permanent Link to Working around the brittle UI Virtualization in Windows 8">Working around the brittle UI Virtualization in Windows 8</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post938_encapsulating-angles" rel="bookmark" title="Permanent Link to Encapsulating Angles">Encapsulating Angles</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post925_unfathomable-bugs-4-keys-that-arent" rel="bookmark" title="Permanent Link to Unfathomable Bugs #4: Keys that aren’t">Unfathomable Bugs #4: Keys that aren’t</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post867_how-would-i-even-use-a-monad-in-c" rel="bookmark" title="Permanent Link to How would I even use a monad (in C#)?">How would I even use a monad (in C#)?</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post822_useful-methods-1-observable-wheneach" rel="bookmark" title="Permanent Link to Useful/Interesting Methods #1: Observable.WhenEach">Useful/Interesting Methods #1: Observable.WhenEach</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post818_unfathomable-bugs-3-stringing-you-along" rel="bookmark" title="Permanent Link to Unfathomable Bugs #3: Stringing you along">Unfathomable Bugs #3: Stringing you along</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post774_anonymous-implementation-classes-a-design-pattern-for-c" rel="bookmark" title="Permanent Link to Anonymous Implementation Classes – A Design Pattern for C#">Anonymous Implementation Classes – A Design Pattern for C#</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post532_tasks-for-action-script-3" rel="bookmark" title="Permanent Link to Tasks for ActionScript 3 – Improving on Event-Driven Programming">Tasks for ActionScript 3 – Improving on Event-Driven Programming</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post554_minkowski-sums-and-differences" rel="bookmark" title="Permanent Link to Minkowski sums and differences">Minkowski sums and differences</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post330_non-nullable-types-vs-c-fixing-the-billion-dollar-mistake" rel="bookmark" title="Permanent Link to Non-Nullable Types vs C#: Fixing the Billion Dollar Mistake">Non-Nullable Types vs C#: Fixing the Billion Dollar Mistake</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post384_unfathomable-bugs-2-slashing-out" rel="bookmark" title="Permanent Link to Unfathomable Bugs #2: Slashing Out">Unfathomable Bugs #2: Slashing Out</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post404_script-templates-and-base-classes" rel="bookmark" title="Permanent Link to Script templates and base classes">Script templates and base classes</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post373_unity-font-extraction" rel="bookmark" title="Permanent Link to Unity font extraction">Unity font extraction</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post341_abusing-phantom-types-to-encode-list-lengths-into-their-type" rel="bookmark" title="Permanent Link to Abusing “Phantom Types” to Encode List Lengths Into Their Type">Abusing “Phantom Types” to Encode List Lengths Into Their Type</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post261_constructive-criticism-of-the-reactive-extensions-api" rel="bookmark" title="Permanent Link to Constructive Criticism of the Reactive Extensions API">Constructive Criticism of the Reactive Extensions API</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post241_quaternions-part-3-2" rel="bookmark" title="Permanent Link to Quaternions part 3">Quaternions part 3</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post204_quaternions-part-2" rel="bookmark" title="Permanent Link to Quaternions part 2">Quaternions part 2</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post144_quaternions-part-1" rel="bookmark" title="Permanent Link to Quaternions part 1">Quaternions part 1</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post157_unfathomable-bugs-1-you-can-have-things-you-can-have-things-in-things-you-can-have" rel="bookmark" title="Permanent Link to Unfathomable Bugs #1: You can have things! You can have things IN things! You can have …">Unfathomable Bugs #1: You can have things! You can have things IN things! You can have …</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post83_coroutines-more-than-you-want-to-know" rel="bookmark" title="Permanent Link to Coroutines – More than you want to know">Coroutines – More than you want to know</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post74_asset-bundle-helper" rel="bookmark" title="Permanent Link to Asset Bundle Helper">Asset Bundle Helper</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post60_the-visual-studio-goes-away" rel="bookmark" title="Permanent Link to The Visual Studio goes away">The Visual Studio goes away</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post57_nets-time-traveling-stopwatch" rel="bookmark" title="Permanent Link to .Net’s time traveling StopWatch">.Net’s time traveling StopWatch</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post3718_polish" rel="bookmark" title="Permanent Link to Polish">Polish</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post29_introducing-catalyst" rel="bookmark" title="Permanent Link to Introducing Catalyst">Introducing Catalyst</a></li>
  </ul>
<p></p>


			</div><!-- #content -->
			</section>

			</div>
		</div><!-- #container -->


</span></div><!-- .container -->

 <div id="upprev_box" style="right: -400px;">
	<h6>
		More interesting posts <span class="num"> (6 of 37 articles)</span>
	</h6>
	<div class="upprev_excerpt">
		<p>
			<a href="http://twistedoakstudios.com/blog/Post1694_decoupling-inlined-ui-code" rel="prev">Decoupling inlined UI code</a>
		</p>
	</div>
	
		<p>
Or check out our <a href="http://twistedoakstudios.com/portfolio">Portfolio</a>.		</p><button id="upprev_close" type="button">Close</button>
</div><!-- #upprev_box -->
<link rel="stylesheet" id="al2fb_style-css" href="Repeat%20Yourself%20Differently_files/add-link-to-facebook.css" type="text/css" media="all">
<link rel="stylesheet" id="admin-bar-css" href="Repeat%20Yourself%20Differently_files/admin-bar.css" type="text/css" media="all">
<link rel="stylesheet" id="upprev-css-css" href="Repeat%20Yourself%20Differently_files/upprev.css" type="text/css" media="all">
<link rel="stylesheet" id="wp-quicklatex-format-css" href="Repeat%20Yourself%20Differently_files/quicklatex-format.css" type="text/css" media="all">
<script type="text/javascript" src="Repeat%20Yourself%20Differently_files/admin-bar.js"></script>
<script type="text/javascript" src="Repeat%20Yourself%20Differently_files/jquery_002.js"></script>
<script type="text/javascript" src="Repeat%20Yourself%20Differently_files/upprev_js.php"></script>
<script type="text/javascript" src="Repeat%20Yourself%20Differently_files/comment-reply.js"></script>
	<script type="text/javascript">
		(function() {
			var request, b = document.body, c = 'className', cs = 'customize-support', rcs = new RegExp('(^|\\s+)(no-)?'+cs+'(\\s+|$)');

			request = true;

			b[c] = b[c].replace( rcs, ' ' );
			b[c] += ( window.postMessage && request ? ' ' : ' no-' ) + cs;
		}());
	</script>
			

		 
<!-- BEGIN footer-type stuff -->
<div class="container footer-container">
	<div class="row">
		
		<div class="fourcol last"><!-- .last b/c it's floated right -->
      <!-- home portfolio used to be here -->
		</div>

		<div class="eightcol" id="contact">
			<p>Twisted Oak Studios<br>
				138-1657 Barrington St.<br>
				Halifax, NS, Canada B3J 2A1</p>
			
			<p>001-902-237-7326<br>
			<a href="mailto:contact@twistedoakstudios.com">contact@twistedoakstudios.com</a></p>
		</div>

		<div class="twelvecol">
			<footer>
				<small>©2012
					<script>
						var d=new Date(); 
						yr=d.getFullYear();
						if (yr!=2012)
						document.write("- "+yr);
					</script>- 2013 Twisted Oak Studios Ltd. -- All Rights Reserved -- All images and logos are property of their respective owners.
				</small>
			</footer>
		</div>
		
		
	</div><!-- .row -->
</div><!-- .container -->
<!-- END footer stuff-->

<!-- jQuery and scrolly script for contact link -->
<script src="Repeat%20Yourself%20Differently_files/jquery.js"></script>
  <script>window.jQuery || document.write('<script src="../js/libs/jquery-1.6.2.min.js"><\/script>')</script>

<script src="Repeat%20Yourself%20Differently_files/scrolly.js"></script>


  <!-- Don't forget Analytics! -->



  <!-- Prompt IE 6 users to install Chrome Frame. Remove this if you want to support IE 6.
       chromium.org/developers/how-tos/chrome-frame-getting-started -->
  <!--[if lt IE 7 ]>
    <script src="//ajax.googleapis.com/ajax/libs/chrome-frame/1.0.3/CFInstall.min.js"></script>
    <script>window.attachEvent('onload',function(){CFInstall.check({mode:'overlay'})})</script>
  <![endif]-->
  


<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-31441525-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>
<div id="wpadminbar" class="nojq " role="navigation">
			<a class="screen-reader-shortcut" href="#wp-toolbar" tabindex="1">Skip to toolbar</a>
			<div class="quicklinks" id="wp-toolbar" role="navigation" aria-label="Top navigation toolbar." tabindex="0">
				<ul id="wp-admin-bar-root-default" class="ab-top-menu">
		<li id="wp-admin-bar-wp-logo" class="menupop"><a class="ab-item" aria-haspopup="true" href="http://twistedoakstudios.com/blog/wp-admin/about.php" title="About WordPress"><span class="ab-icon"></span></a><div class="ab-sub-wrapper"><ul id="wp-admin-bar-wp-logo-default" class="ab-submenu">
		<li id="wp-admin-bar-about"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/about.php">About WordPress</a>		</li></ul><ul id="wp-admin-bar-wp-logo-external" class="ab-sub-secondary ab-submenu">
		<li id="wp-admin-bar-wporg"><a class="ab-item" href="http://wordpress.org/">WordPress.org</a>		</li>
		<li id="wp-admin-bar-documentation"><a class="ab-item" href="http://codex.wordpress.org/">Documentation</a>		</li>
		<li id="wp-admin-bar-support-forums"><a class="ab-item" href="http://wordpress.org/support/">Support Forums</a>		</li>
		<li id="wp-admin-bar-feedback"><a class="ab-item" href="http://wordpress.org/support/forum/requests-and-feedback">Feedback</a>		</li></ul></div>		</li>
		<li id="wp-admin-bar-site-name" class="menupop"><a class="ab-item" aria-haspopup="true" href="http://twistedoakstudios.com/blog/wp-admin/">twistedoakstudios.com</a><div class="ab-sub-wrapper"><ul id="wp-admin-bar-site-name-default" class="ab-submenu">
		<li id="wp-admin-bar-dashboard"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/">Dashboard</a>		</li></ul><ul id="wp-admin-bar-appearance" class="ab-submenu">
		<li id="wp-admin-bar-themes"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/themes.php">Themes</a>		</li>
		<li id="wp-admin-bar-customize" class="hide-if-no-customize"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/customize.php?url=http%3A%2F%2Ftwistedoakstudios.com%2Fblog%2FPost2852_repeat-yourself-differently">Customize</a>		</li></ul></div>		</li>
		<li id="wp-admin-bar-updates"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/update-core.php" title="2 Plugin Updates, 1 Theme Update"><span class="ab-icon"></span><span class="ab-label">3</span><span class="screen-reader-text">2 Plugin Updates, 1 Theme Update</span></a>		</li>
		<li id="wp-admin-bar-comments"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/edit-comments.php" title="0 comments awaiting moderation"><span class="ab-icon"></span><span id="ab-awaiting-mod" class="ab-label awaiting-mod pending-count count-0">0</span></a>		</li>
		<li id="wp-admin-bar-new-content" class="menupop"><a class="ab-item" aria-haspopup="true" href="http://twistedoakstudios.com/blog/wp-admin/post-new.php" title="Add New"><span class="ab-icon"></span><span class="ab-label">New</span></a><div class="ab-sub-wrapper"><ul id="wp-admin-bar-new-content-default" class="ab-submenu">
		<li id="wp-admin-bar-new-post"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/post-new.php">Post</a>		</li>
		<li id="wp-admin-bar-new-media"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/media-new.php">Media</a>		</li>
		<li id="wp-admin-bar-new-link"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/link-add.php">Link</a>		</li>
		<li id="wp-admin-bar-new-page"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/post-new.php?post_type=page">Page</a>		</li>
		<li id="wp-admin-bar-new-user"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/user-new.php">User</a>		</li></ul></div>		</li>
		<li id="wp-admin-bar-edit"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/post.php?post=2852&amp;action=edit">Edit Post</a>		</li></ul><ul id="wp-admin-bar-top-secondary" class="ab-top-secondary ab-top-menu">
		<li id="wp-admin-bar-search" class="admin-bar-search"><div class="ab-item ab-empty-item" tabindex="-1"><form action="http://twistedoakstudios.com/blog/" method="get" id="adminbarsearch"><input class="adminbar-input" name="s" id="adminbar-search" maxlength="150" type="text"><input class="adminbar-button" value="Search" type="submit"></form></div>		</li>
		<li id="wp-admin-bar-my-account" class="menupop with-avatar"><a class="ab-item" aria-haspopup="true" href="http://twistedoakstudios.com/blog/wp-admin/profile.php" title="My Account">Howdy, Craig Gidney<img alt="" src="Repeat%20Yourself%20Differently_files/31a6ce579f8f9f9d528715d1e941726e.png" class="avatar avatar-16 photo" height="16" width="16"></a><div class="ab-sub-wrapper"><ul id="wp-admin-bar-user-actions" class="ab-submenu">
		<li id="wp-admin-bar-user-info"><a class="ab-item" tabindex="-1" href="http://twistedoakstudios.com/blog/wp-admin/profile.php"><img alt="" src="Repeat%20Yourself%20Differently_files/31a6ce579f8f9f9d528715d1e941726e_002.png" class="avatar avatar-64 photo" height="64" width="64"><span class="display-name">Craig Gidney</span><span class="username">craig</span></a>		</li>
		<li id="wp-admin-bar-edit-profile"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-admin/profile.php">Edit My Profile</a>		</li>
		<li id="wp-admin-bar-logout"><a class="ab-item" href="http://twistedoakstudios.com/blog/wp-login.php?action=logout&amp;_wpnonce=8450958ce8">Log Out</a>		</li></ul></div>		</li></ul>			</div>
			<a class="screen-reader-shortcut" href="http://twistedoakstudios.com/blog/wp-login.php?action=logout&amp;_wpnonce=8450958ce8">Log Out</a>
		</div></body></html>