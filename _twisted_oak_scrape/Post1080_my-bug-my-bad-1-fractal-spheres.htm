<!DOCTYPE html>
<!-- paulirish.com/2008/conditional-stylesheets-vs-css-hacks-answer-neither/ -->
<!--[if lt IE 7]> <html class="no-js ie6 oldie" lang="en"> <![endif]-->
<!--[if IE 7]>    <html class="no-js ie7 oldie" lang="en"> <![endif]-->
<!--[if IE 8]>    <html class="no-js ie8 oldie" lang="en"> <![endif]-->
<!-- Consider adding an manifest.appcache: h5bp.com/d/Offline -->
<!--[if gt IE 8]><!-->
<html class=" js flexbox canvas canvastext webgl no-touch geolocation postmessage no-websqldatabase indexeddb hashchange history draganddrop websockets rgba hsla multiplebgs backgroundsize borderimage borderradius boxshadow textshadow opacity cssanimations csscolumns cssgradients no-cssreflections csstransforms csstransforms3d csstransitions fontface generatedcontent video audio localstorage sessionstorage webworkers applicationcache svg inlinesvg smil svgclippaths" xmlns="http://www.w3.org/1999/xhtml" xmlns:og="http://ogp.me/ns#" xmlns:fb="https://www.facebook.com/2008/fbml" lang="en"><script id="bug.surrogate">var urchinTracker=function(){},_gaq={push:function(){try {if(arguments[0][0]=='_link')window.location.href=arguments[0][1]}catch(er){}}},_gat={_createTracker:function(){}, _getTracker:function(){return{__noSuchMethod__:function(){},_link:function(o){if(o)location.href=o;},_linkByPost:function(){return true;},_getLinkerUrl:function(o){return o;},_trackEvent:function(){}}}}; if (document.location.host == 'www.salon.com') {var _ga_ = document.querySelectorAll('script[src$=ga\\.js]')[0], ga_e = document.createEvent('Event'); ga_e.initEvent('load', true, true);_ga_.dispatchEvent(ga_e);}</script><!--<![endif]--><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
  <meta charset="utf-8">
   <!-- blog feed link -->
  <link href="http://twistedoakstudios.com/blog/?feed=rss" rel="alternate" type="application/rss+xml" title="Twisted Oak Studios Blog">

  <!-- Use the .htaccess and remove these lines to avoid edge case issues.
       More info: h5bp.com/b/378 -->
  <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">

  <title>Twisted Oak Studios | Game Developers | Unity 3D Development</title>
  <meta name="description" content="As a lean co-operative team of seasoned developers, Twisted Oak is able to offer efficient, flexible remote and on-the-floor development and consulting without any middle-man or excessive administrivia.">
  <meta name="author" content="/humans.txt">

  <meta name="viewport" content="width=device-width,initial-scale=1">

  <link rel="shortcut icon" href="http://twistedoakstudios.com/blog/favicon.ico">
  <link rel="apple-touch-icon-precomposed" href="http://twistedoakstudios.com/blog/apple-touch-icon-precomposed.png">

  	<!-- The 1140px Grid - http://cssgrid.net/ -->
	<link rel="stylesheet" href="Post1080_my-bug-my-bad-1-fractal-spheres_files/1140.css">
    <link rel="stylesheet" href="Post1080_my-bug-my-bad-1-fractal-spheres_files/style.css">
    <link rel="stylesheet" href="Post1080_my-bug-my-bad-1-fractal-spheres_files/blogstyle.css">
<link rel="stylesheet" href="Post1080_my-bug-my-bad-1-fractal-spheres_files/prettify.css" media="all">
<link rel="stylesheet" href="Post1080_my-bug-my-bad-1-fractal-spheres_files/sunburst.css" media="all">
<script type="text/javascript" src="Post1080_my-bug-my-bad-1-fractal-spheres_files/prettify.js"></script>

	<!-- Webfonts! -->
	<link href="Post1080_my-bug-my-bad-1-fractal-spheres_files/css.css" rel="stylesheet" type="text/css">

	<!-- Open Graph -->
	<meta property="og:title" content="Twisted Oak Studios">
	<meta property="og:type" content="company">
	<meta property="og:url" content="http://www.twistedoakstudios.com/">
	<meta property="og:image" content="http://www.twistedoakstudios.com/images/logo.png">
	<meta property="og:description" content="As a lean co-operative team of seasoned developers, Twisted Oak is able to offer efficient, flexible remote and on-the-floor development and consulting without any middle-man or excessive administrivia.">
  
  <script src="Post1080_my-bug-my-bad-1-fractal-spheres_files/modernizr-2.js"></script>
</head>
<body onload="prettyPrint()">
<!-- begin header -->
<div class="container header-container">
	<div class="row">
		<header>
			<div class="threecol">
				<a href="#"><img class="logo" src="Post1080_my-bug-my-bad-1-fractal-spheres_files/logo.png"></a>
			</div><!-- .threecol -->
		
			<div class="fourcol navcol">
				<nav>
					<ul class="primary-nav clearfix">
						<li><a href="http://twistedoakstudios.com/">Home</a></li>
						<li><a href="http://twistedoakstudios.com/portfolio/">Portfolio</a></li>
						<li><a class="scroll" href="#contact">Contact</a></li>
						<li><a href="http://twistedoakstudios.com/blog/">Blog</a></li>
					</ul>
				</nav>
			</div>    

    	</header>
	</div><!-- .row -->
</div><!-- .container -->


	<div id="main">
<span class="blog">
<div class="container home-container" id="home">
	<div class="row">
		<section>
			
			<div class="ninecol">


<h2><a href="http://twistedoakstudios.com/blog/Post1080_my-bug-my-bad-1-fractal-spheres" rel="bookmark" title="Permanent Link to My Bug, My Bad #1: Fractal Spheres">My Bug, My Bad #1: Fractal Spheres</a></h2>
<div class="meta">posted by Craig Gidney on November 27, 2012</div>

<p>In this series of posts, the dual of the “Unfathomable Bugs” series, I describe interesting bugs that are my own fault.</p>
<p>Today’s bug comes courtesy of me. Thanks, self, this series wouldn’t 
exist without the generous contributions of entities like you.</p>
<h3>The Setup</h3>
<p>Recently, I had my first foray into tessellating a sphere (computing 
an approximation of its surface with a set of triangles). Considering I 
work at a company known for expertise in a development platform for 
creating 3d games, you might find this surprising. However, unlike my 
co-workers, my professional background is actually in application 
development and, although I did create games as a hobby, they were 
mainly maps/mods for StarCraft (e.g. <a href="http://www.gamerconfigs.com/scmaps/maps/131705-storm-the-fort-vs.04b">Storm the Fort</a>) and WarCraft 3 (e.g. <a href="http://www.epicwar.com/maps/217909/">Power Towers</a>)
 instead of stand-alone programs with custom graphics engines. As a 
result, even though I understand the math behind 3d graphics very well, I
 haven’t had to solve a lot of the common problems like sphere 
tessellation.</p>
<p>I encountered the sphere tessellation problem as part of optimizing 
and augmenting bubble-rendering code to allow deformations of the 
bubbles. After implementing some obvious optimizations, like caching the
 vertices making up the tessellation instead of constantly recomputing 
them, I noticed that the tessellation itself could be improved. It was 
constructed out of points evenly spaced by longitude and latitude. As a 
result, there were significantly more points near the “poles” than there
 were near the “equator”. You can see this for yourself if you have a 
globe of the earth: the areas separated by the latitude and longitude 
lines are smaller near the poles. I figured that, by constructing a more
 uniform tessellation, I could cut the number of points by about a 
quarter while maintaining an equivalent level of detail.</p>
<p>After thinking about how to tessellate uniformly for all of a minute,
 I realized the problem had probably already been solved a thousand 
times. A quick googling gave an answer: <a href="http://stackoverflow.com/a/4406790/52239">refine a simple starting shape by placing new points at the center of faces</a>.
 “Of course!” I thought, “What an obvious strategy (in hindsight)!”. I 
quickly implemented it: one method to create a tetrahedron, one method 
to refine a shape to be more sphere-like, and one method to iteratively 
refine the tetrahedron to a desired level of detail. Package it into a 
class and voila! Bubbles that look… erm… hmmm:</p>
<p><img src="Post1080_my-bug-my-bad-1-fractal-spheres_files/ZwAbQ.png" alt="Incorrect bubble spheres"></p>
<p>The shader makes it hard to tell what exactly is wrong here, but it 
looks sort of like some of the triangles are missing or overlapping. I 
stared at this, and the code I wrote, for quite some time without being 
able to find the bug. Maybe you’re a bit more clever than I was, and you
 don’t even need to see the code to know what’s wrong. Do you know what 
the problem is? Here’s the code, including the refining method that 
works by placing a new vertex in the center of each triangular face and 
connecting it to the corners of that face:</p>
<pre><code class="prettyprint"><span class="com">//WARNING: THE FOLLOWING CODE CONTAINS A BUG</span><span class="pln">

</span><span class="kwd">class</span><span class="pln"> </span><span class="typ">UnitSphereApproximation</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
</span><span class="kwd">public</span><span class="pun">:</span><span class="pln">
    shared_ptr</span><span class="pun">&lt;</span><span class="pln">std</span><span class="pun">::</span><span class="pln">vector</span><span class="pun">&lt;</span><span class="typ">Vector3</span><span class="pun">&gt;&gt;</span><span class="pln"> m_vertices</span><span class="pun">;</span><span class="pln">
    shared_ptr</span><span class="pun">&lt;</span><span class="pln">std</span><span class="pun">::</span><span class="pln">vector</span><span class="str">&lt;uint16&gt;</span><span class="pun">&gt;</span><span class="pln"> m_triangles</span><span class="pun">;</span><span class="pln">
    </span><span class="typ">UnitSphereApproximation</span><span class="pun">(</span><span class="pln">shared_ptr</span><span class="pun">&lt;</span><span class="pln">std</span><span class="pun">::</span><span class="pln">vector</span><span class="pun">&lt;</span><span class="typ">Vector3</span><span class="pun">&gt;&gt;</span><span class="pln"> vertices</span><span class="pun">,</span><span class="pln"> shared_ptr</span><span class="pun">&lt;</span><span class="pln">std</span><span class="pun">::</span><span class="pln">vector</span><span class="str">&lt;uint16&gt;</span><span class="pun">&gt;</span><span class="pln"> triangles</span><span class="pun">)</span><span class="pln">
        </span><span class="pun">:</span><span class="pln"> m_vertices</span><span class="pun">(</span><span class="pln">vertices</span><span class="pun">),</span><span class="pln">
          m_triangles</span><span class="pun">(</span><span class="pln">triangles</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
    </span><span class="kwd">static</span><span class="pln"> </span><span class="typ">UnitSphereApproximation</span><span class="pln"> </span><span class="typ">Tetrahedron</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        </span><span class="com">// vertices</span><span class="pln">
        </span><span class="kwd">auto</span><span class="pln"> tetrahedronVertices </span><span class="pun">=</span><span class="pln"> std</span><span class="pun">::</span><span class="pln">make_shared</span><span class="pun">&lt;</span><span class="pln">std</span><span class="pun">::</span><span class="pln">vector</span><span class="pun">&lt;</span><span class="typ">Vector3</span><span class="pun">&gt;&gt;();</span><span class="pln">
        </span><span class="kwd">auto</span><span class="pln"> e </span><span class="pun">=</span><span class="pln"> sqrtf</span><span class="pun">(</span><span class="lit">0.5f</span><span class="pun">);</span><span class="pln">
        tetrahedronVertices</span><span class="pun">-&gt;</span><span class="pln">push_back</span><span class="pun">(</span><span class="typ">Vector3</span><span class="pun">(+</span><span class="lit">1</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0</span><span class="pun">,-</span><span class="pln">e</span><span class="pun">).</span><span class="pln">normalize</span><span class="pun">());</span><span class="pln">
        tetrahedronVertices</span><span class="pun">-&gt;</span><span class="pln">push_back</span><span class="pun">(</span><span class="typ">Vector3</span><span class="pun">(-</span><span class="lit">1</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0</span><span class="pun">,-</span><span class="pln">e</span><span class="pun">).</span><span class="pln">normalize</span><span class="pun">());</span><span class="pln">
        tetrahedronVertices</span><span class="pun">-&gt;</span><span class="pln">push_back</span><span class="pun">(</span><span class="typ">Vector3</span><span class="pun">(</span><span class="pln"> </span><span class="lit">0</span><span class="pun">,+</span><span class="lit">1</span><span class="pun">,+</span><span class="pln">e</span><span class="pun">).</span><span class="pln">normalize</span><span class="pun">());</span><span class="pln">
        tetrahedronVertices</span><span class="pun">-&gt;</span><span class="pln">push_back</span><span class="pun">(</span><span class="typ">Vector3</span><span class="pun">(</span><span class="pln"> </span><span class="lit">0</span><span class="pun">,-</span><span class="lit">1</span><span class="pun">,+</span><span class="pln">e</span><span class="pun">).</span><span class="pln">normalize</span><span class="pun">());</span><span class="pln">

        </span><span class="com">// triangles</span><span class="pln">
        </span><span class="kwd">auto</span><span class="pln"> tetrahedronTriangles </span><span class="pun">=</span><span class="pln"> std</span><span class="pun">::</span><span class="pln">make_shared</span><span class="pun">&lt;</span><span class="pln">std</span><span class="pun">::</span><span class="pln">vector</span><span class="str">&lt;uint16&gt;</span><span class="pun">&gt;();</span><span class="pln">
        tetrahedronTriangles</span><span class="pun">-&gt;</span><span class="pln">push_back</span><span class="pun">(</span><span class="lit">0</span><span class="pun">);</span><span class="pln">
        tetrahedronTriangles</span><span class="pun">-&gt;</span><span class="pln">push_back</span><span class="pun">(</span><span class="lit">2</span><span class="pun">);</span><span class="pln">
        tetrahedronTriangles</span><span class="pun">-&gt;</span><span class="pln">push_back</span><span class="pun">(</span><span class="lit">1</span><span class="pun">);</span><span class="pln">

        tetrahedronTriangles</span><span class="pun">-&gt;</span><span class="pln">push_back</span><span class="pun">(</span><span class="lit">0</span><span class="pun">);</span><span class="pln">
        tetrahedronTriangles</span><span class="pun">-&gt;</span><span class="pln">push_back</span><span class="pun">(</span><span class="lit">3</span><span class="pun">);</span><span class="pln">
        tetrahedronTriangles</span><span class="pun">-&gt;</span><span class="pln">push_back</span><span class="pun">(</span><span class="lit">2</span><span class="pun">);</span><span class="pln">

        tetrahedronTriangles</span><span class="pun">-&gt;</span><span class="pln">push_back</span><span class="pun">(</span><span class="lit">0</span><span class="pun">);</span><span class="pln">
        tetrahedronTriangles</span><span class="pun">-&gt;</span><span class="pln">push_back</span><span class="pun">(</span><span class="lit">1</span><span class="pun">);</span><span class="pln">
        tetrahedronTriangles</span><span class="pun">-&gt;</span><span class="pln">push_back</span><span class="pun">(</span><span class="lit">3</span><span class="pun">);</span><span class="pln">

        tetrahedronTriangles</span><span class="pun">-&gt;</span><span class="pln">push_back</span><span class="pun">(</span><span class="lit">3</span><span class="pun">);</span><span class="pln">
        tetrahedronTriangles</span><span class="pun">-&gt;</span><span class="pln">push_back</span><span class="pun">(</span><span class="lit">1</span><span class="pun">);</span><span class="pln">
        tetrahedronTriangles</span><span class="pun">-&gt;</span><span class="pln">push_back</span><span class="pun">(</span><span class="lit">2</span><span class="pun">);</span><span class="pln">

        </span><span class="kwd">return</span><span class="pln"> </span><span class="typ">UnitSphereApproximation</span><span class="pun">(</span><span class="pln">tetrahedronVertices</span><span class="pun">,</span><span class="pln"> tetrahedronTriangles</span><span class="pun">);</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
    </span><span class="kwd">static</span><span class="pln"> </span><span class="typ">UnitSphereApproximation</span><span class="pln"> </span><span class="typ">Refine</span><span class="pun">(</span><span class="typ">UnitSphereApproximation</span><span class="pln"> sphere</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">auto</span><span class="pln"> refinedVertices </span><span class="pun">=</span><span class="pln"> std</span><span class="pun">::</span><span class="pln">make_shared</span><span class="pun">&lt;</span><span class="pln">std</span><span class="pun">::</span><span class="pln">vector</span><span class="pun">&lt;</span><span class="typ">Vector3</span><span class="pun">&gt;&gt;();</span><span class="pln">
        </span><span class="kwd">auto</span><span class="pln"> refinedTriangles </span><span class="pun">=</span><span class="pln"> std</span><span class="pun">::</span><span class="pln">make_shared</span><span class="pun">&lt;</span><span class="pln">std</span><span class="pun">::</span><span class="pln">vector</span><span class="str">&lt;uint16&gt;</span><span class="pun">&gt;();</span><span class="pln">
        </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">auto</span><span class="pln"> e </span><span class="pun">:</span><span class="pln"> </span><span class="pun">*</span><span class="pln">sphere</span><span class="pun">.</span><span class="pln">m_vertices</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="com">// re-use existing vertices, maintaining indexes</span><span class="pln">
            refinedVertices</span><span class="pun">-&gt;</span><span class="pln">push_back</span><span class="pun">(</span><span class="pln">e</span><span class="pun">);</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">
        </span><span class="com">// for each triangle</span><span class="pln">
        </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">auto</span><span class="pln"> tri </span><span class="pun">=</span><span class="pln"> sphere</span><span class="pun">.</span><span class="pln">m_triangles</span><span class="pun">-&gt;</span><span class="kwd">begin</span><span class="pun">();</span><span class="pln"> tri </span><span class="pun">!=</span><span class="pln"> sphere</span><span class="pun">.</span><span class="pln">m_triangles</span><span class="pun">-&gt;</span><span class="kwd">end</span><span class="pun">();</span><span class="pln"> tri </span><span class="pun">+=</span><span class="pln"> </span><span class="lit">3</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
            </span><span class="com">// compute center vertex of face</span><span class="pln">
            </span><span class="kwd">auto</span><span class="pln"> ic </span><span class="pun">=</span><span class="pln"> refinedVertices</span><span class="pun">-&gt;</span><span class="pln">size</span><span class="pun">();</span><span class="pln">
            </span><span class="kwd">auto</span><span class="pln"> vc </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Vector3</span><span class="pun">::</span><span class="pln">ZERO</span><span class="pun">;</span><span class="pln">
            </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">auto</span><span class="pln"> j </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"> j </span><span class="pun">&lt;</span><span class="pln"> </span><span class="lit">3</span><span class="pun">;</span><span class="pln"> j</span><span class="pun">++)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
                vc </span><span class="pun">+=</span><span class="pln"> </span><span class="pun">(*</span><span class="pln">sphere</span><span class="pun">.</span><span class="pln">m_vertices</span><span class="pun">)[</span><span class="pln">tri</span><span class="pun">[</span><span class="pln">j</span><span class="pun">]];</span><span class="pln">
            </span><span class="pun">}</span><span class="pln">
            refinedVertices</span><span class="pun">-&gt;</span><span class="pln">push_back</span><span class="pun">(</span><span class="pln">vc</span><span class="pun">.</span><span class="pln">normalize</span><span class="pun">());</span><span class="pln">

            </span><span class="com">// replace triangle with three triangles surrounding the center vertex</span><span class="pln">
            </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">auto</span><span class="pln"> j </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"> j </span><span class="pun">&lt;</span><span class="pln"> </span><span class="lit">3</span><span class="pun">;</span><span class="pln"> j</span><span class="pun">++)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
                refinedTriangles</span><span class="pun">-&gt;</span><span class="pln">push_back</span><span class="pun">(</span><span class="pln">tri</span><span class="pun">[(</span><span class="pln">j </span><span class="pun">+</span><span class="pln"> </span><span class="lit">0</span><span class="pun">)</span><span class="pln"> </span><span class="pun">%</span><span class="pln"> </span><span class="lit">3</span><span class="pun">]);</span><span class="pln">
                refinedTriangles</span><span class="pun">-&gt;</span><span class="pln">push_back</span><span class="pun">(</span><span class="pln">tri</span><span class="pun">[(</span><span class="pln">j </span><span class="pun">+</span><span class="pln"> </span><span class="lit">1</span><span class="pun">)</span><span class="pln"> </span><span class="pun">%</span><span class="pln"> </span><span class="lit">3</span><span class="pun">]);</span><span class="pln">
                refinedTriangles</span><span class="pun">-&gt;</span><span class="pln">push_back</span><span class="pun">(</span><span class="pln">ic</span><span class="pun">);</span><span class="pln">
            </span><span class="pun">}</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">
        </span><span class="kwd">return</span><span class="pln"> </span><span class="typ">UnitSphereApproximation</span><span class="pun">(</span><span class="pln">refinedVertices</span><span class="pun">,</span><span class="pln"> refinedTriangles</span><span class="pun">);</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
    </span><span class="kwd">static</span><span class="pln"> </span><span class="typ">UnitSphereApproximation</span><span class="pln"> </span><span class="typ">WithMinimumPointCount</span><span class="pun">(</span><span class="kwd">int</span><span class="pln"> minimumPointCount</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">auto</span><span class="pln"> sphere </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Tetrahedron</span><span class="pun">();</span><span class="pln">
        </span><span class="kwd">while</span><span class="pln"> </span><span class="pun">(</span><span class="pln">sphere</span><span class="pun">.</span><span class="pln">m_vertices</span><span class="pun">-&gt;</span><span class="pln">size</span><span class="pun">()</span><span class="pln"> </span><span class="pun">&lt;</span><span class="pln"> minimumPointCount</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
            sphere </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Refine</span><span class="pun">(</span><span class="pln">sphere</span><span class="pun">);</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">
        </span><span class="kwd">return</span><span class="pln"> sphere</span><span class="pun">;</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
</span><span class="pun">};</span></code></pre>
<p>(My apologies to veteran C++ programmers, who can probably recognize 
that I'm used to writing in C# based on the presence of some unnecessary
 copies and the gratuitous use of smart pointers.)</p>
<p>Don't spend too long scouring the code for misplaced vertices, 
reversed orderings, or memory corruption. It's not that type of bug.</p>
<h3>The Bug</h3>
<p>Eventually, I mentioned my predicament to a coworker. Intrigued, they
 reviewed the code and confirmed that it looked right. However, having 
lots of experience in 3d graphics, they knew about the <a href="http://msdn.microsoft.com/en-us/library/hh873207.aspx">graphics diagnostics functionality in visual studio 2012</a> that lets you see what's being drawn in stages.</p>
<p>One good look at my "spheres", without a shader obscuring the 
problem, and I knew what was wrong (view the image directly for a larger
 version):</p>
<p><img src="Post1080_my-bug-my-bad-1-fractal-spheres_files/DUUnf.gif" alt="Fractal tessellation created by refining faces of tetrahedron" height="256/" width="256"></p>
<p>The problem is the refining strategy. Not the code implementing the strategy, but the idea itself. In particular, <em>it never makes any edges shorter</em>.
 It adds shorter and shorter edges, but the original edges are never 
replaced. This creates a very cool shape, with a volume that does 
approximate the volume of a sphere, but with a fractal surface instead 
of a smooth spherical surface. The computer was doing exactly what I 
said, but what I said did not imply what I really wanted. While looking 
for the bug I might as well have been trying to figure out why 2+2 
didn't return 5 by confirming there were no arithmetic overflows in the 
code.</p>
<p>Fixing the bug is straightforward: place new vertices at the center 
of each edge instead of at the center of each face. This ensures edges 
get shorter which, in combination with ensuring vertices are on the unit
 sphere, ensures the approximation gets smoother. I could also have 
continued placing new vertices at the center of faces, with a more 
intelligent method to choose neighbors, but I expected that to be 
significantly more tricky to get right. In any case the edge refining 
strategy works:</p>
<p><img src="Post1080_my-bug-my-bad-1-fractal-spheres_files/53RZw.gif" alt="Sphere tessellation created by refining edges of tetrahedron" height="256/" width="256"></p>
<p>With the benefit of a surface that isn't being fractalled, the 
bubbles even end up looking like bubbles (note: using a different shader
 than the shot showing the incorrect bubbles):</p>
<p><img src="Post1080_my-bug-my-bad-1-fractal-spheres_files/cGSis.png" alt="Correct bubble spheres"></p>
<p>The fixed code for refining a shape is a bit more complicated but, on the other hand, is actually correct. Here it is:</p>
<pre><code class="prettyprint"><span class="kwd">static</span><span class="pln"> </span><span class="typ">UnitSphereApproximation</span><span class="pln"> </span><span class="typ">Refine</span><span class="pun">(</span><span class="typ">UnitSphereApproximation</span><span class="pln"> sphere</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">auto</span><span class="pln"> refinedVertices </span><span class="pun">=</span><span class="pln"> std</span><span class="pun">::</span><span class="pln">make_shared</span><span class="pun">&lt;</span><span class="pln">std</span><span class="pun">::</span><span class="pln">vector</span><span class="pun">&lt;</span><span class="typ">Vector3</span><span class="pun">&gt;&gt;();</span><span class="pln">
    </span><span class="com">// re-use existing vertices, maintaining their indexes</span><span class="pln">
    </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">auto</span><span class="pln"> e </span><span class="pun">:</span><span class="pln"> </span><span class="pun">*</span><span class="pln">sphere</span><span class="pun">.</span><span class="pln">m_vertices</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        refinedVertices</span><span class="pun">-&gt;</span><span class="pln">push_back</span><span class="pun">(</span><span class="pln">e</span><span class="pun">);</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
    </span><span class="com">// place new vertices at centers of spherical edges between existing vertices</span><span class="pln">
    </span><span class="kwd">auto</span><span class="pln"> edgeVertexMap </span><span class="pun">=</span><span class="pln"> std</span><span class="pun">::</span><span class="pln">map</span><span class="pun">&lt;</span><span class="kwd">int</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">int</span><span class="pun">&gt;();</span><span class="pln">
    </span><span class="com">// for each triangle</span><span class="pln">
    </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">auto</span><span class="pln"> tri </span><span class="pun">=</span><span class="pln"> sphere</span><span class="pun">.</span><span class="pln">m_triangles</span><span class="pun">-&gt;</span><span class="kwd">begin</span><span class="pun">();</span><span class="pln"> tri </span><span class="pun">!=</span><span class="pln"> sphere</span><span class="pun">.</span><span class="pln">m_triangles</span><span class="pun">-&gt;</span><span class="kwd">end</span><span class="pun">();</span><span class="pln"> tri </span><span class="pun">+=</span><span class="pln"> </span><span class="lit">3</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">auto</span><span class="pln"> j </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"> j </span><span class="pun">&lt;</span><span class="pln"> </span><span class="lit">3</span><span class="pun">;</span><span class="pln"> j</span><span class="pun">++)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
            </span><span class="kwd">auto</span><span class="pln"> i1 </span><span class="pun">=</span><span class="pln"> tri</span><span class="pun">[</span><span class="pln">j</span><span class="pun">];</span><span class="pln">
            </span><span class="kwd">auto</span><span class="pln"> i2 </span><span class="pun">=</span><span class="pln"> tri</span><span class="pun">[(</span><span class="pln">j </span><span class="pun">+</span><span class="pln"> </span><span class="lit">1</span><span class="pun">)</span><span class="pln"> </span><span class="pun">%</span><span class="pln"> </span><span class="lit">3</span><span class="pun">];</span><span class="pln">
            </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">i1 </span><span class="pun">&gt;=</span><span class="pln"> i2</span><span class="pun">)</span><span class="pln"> </span><span class="kwd">continue</span><span class="pun">;</span><span class="pln"> </span><span class="com">// avoid adding the same edge vertex twice (once from X to Y and once from Y and X)</span><span class="pln">
            </span><span class="kwd">auto</span><span class="pln"> undirectedEdgeId </span><span class="pun">=</span><span class="pln"> i1</span><span class="pun">*</span><span class="pln">sphere</span><span class="pun">.</span><span class="pln">m_vertices</span><span class="pun">-&gt;</span><span class="pln">size</span><span class="pun">()</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> i2</span><span class="pun">;</span><span class="pln">

            edgeVertexMap</span><span class="pun">[</span><span class="pln">undirectedEdgeId</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> refinedVertices</span><span class="pun">-&gt;</span><span class="pln">size</span><span class="pun">();</span><span class="pln">
            </span><span class="kwd">auto</span><span class="pln"> edgeCenter </span><span class="pun">=</span><span class="pln"> </span><span class="pun">((*</span><span class="pln">sphere</span><span class="pun">.</span><span class="pln">m_vertices</span><span class="pun">)[</span><span class="pln">i1</span><span class="pun">]</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> </span><span class="pun">(*</span><span class="pln">sphere</span><span class="pun">.</span><span class="pln">m_vertices</span><span class="pun">)[</span><span class="pln">i2</span><span class="pun">]).</span><span class="pln">normalize</span><span class="pun">();</span><span class="pln">
            refinedVertices</span><span class="pun">-&gt;</span><span class="pln">push_back</span><span class="pun">(</span><span class="pln">edgeCenter</span><span class="pun">);</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">

    </span><span class="kwd">auto</span><span class="pln"> refinedTriangles </span><span class="pun">=</span><span class="pln"> std</span><span class="pun">::</span><span class="pln">make_shared</span><span class="pun">&lt;</span><span class="pln">std</span><span class="pun">::</span><span class="pln">vector</span><span class="str">&lt;uint16&gt;</span><span class="pun">&gt;();</span><span class="pln">
    </span><span class="com">// for each triangle: create new triangles, using old and new vertices</span><span class="pln">
    </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">auto</span><span class="pln"> tri </span><span class="pun">=</span><span class="pln"> sphere</span><span class="pun">.</span><span class="pln">m_triangles</span><span class="pun">-&gt;</span><span class="kwd">begin</span><span class="pun">();</span><span class="pln"> tri </span><span class="pun">!=</span><span class="pln"> sphere</span><span class="pun">.</span><span class="pln">m_triangles</span><span class="pun">-&gt;</span><span class="kwd">end</span><span class="pun">();</span><span class="pln"> tri </span><span class="pun">+=</span><span class="pln"> </span><span class="lit">3</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        </span><span class="com">// find vertices at the center of each of the triangle's edges</span><span class="pln">
        </span><span class="kwd">int</span><span class="pln"> edgeCenterVertices</span><span class="pun">[</span><span class="lit">3</span><span class="pun">];</span><span class="pln">
        </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">auto</span><span class="pln"> j </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"> j </span><span class="pun">&lt;</span><span class="pln"> </span><span class="lit">3</span><span class="pun">;</span><span class="pln"> j</span><span class="pun">++)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
            </span><span class="kwd">auto</span><span class="pln"> i1 </span><span class="pun">=</span><span class="pln"> tri</span><span class="pun">[</span><span class="pln">j</span><span class="pun">];</span><span class="pln">
            </span><span class="kwd">auto</span><span class="pln"> i2 </span><span class="pun">=</span><span class="pln"> tri</span><span class="pun">[(</span><span class="pln">j </span><span class="pun">+</span><span class="pln"> </span><span class="lit">1</span><span class="pun">)</span><span class="pln"> </span><span class="pun">%</span><span class="pln"> </span><span class="lit">3</span><span class="pun">];</span><span class="pln">
            </span><span class="kwd">auto</span><span class="pln"> undirectedEdgeId </span><span class="pun">=</span><span class="pln"> min</span><span class="pun">(</span><span class="pln">i1</span><span class="pun">,</span><span class="pln"> i2</span><span class="pun">)*</span><span class="pln">sphere</span><span class="pun">.</span><span class="pln">m_vertices</span><span class="pun">-&gt;</span><span class="pln">size</span><span class="pun">()</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> max</span><span class="pun">(</span><span class="pln">i1</span><span class="pun">,</span><span class="pln"> i2</span><span class="pun">);</span><span class="pln">
            edgeCenterVertices</span><span class="pun">[</span><span class="pln">j</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> edgeVertexMap</span><span class="pun">[</span><span class="pln">undirectedEdgeId</span><span class="pun">];</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">

        </span><span class="com">// create a triangle covering the center, touching the three edges</span><span class="pln">
        refinedTriangles</span><span class="pun">-&gt;</span><span class="pln">push_back</span><span class="pun">(</span><span class="pln">edgeCenterVertices</span><span class="pun">[</span><span class="lit">0</span><span class="pun">]);</span><span class="pln">
        refinedTriangles</span><span class="pun">-&gt;</span><span class="pln">push_back</span><span class="pun">(</span><span class="pln">edgeCenterVertices</span><span class="pun">[</span><span class="lit">1</span><span class="pun">]);</span><span class="pln">
        refinedTriangles</span><span class="pun">-&gt;</span><span class="pln">push_back</span><span class="pun">(</span><span class="pln">edgeCenterVertices</span><span class="pun">[</span><span class="lit">2</span><span class="pun">]);</span><span class="pln">
        </span><span class="com">// create a triangle for each corner of the existing triangle</span><span class="pln">
        </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">auto</span><span class="pln"> j </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"> j </span><span class="pun">&lt;</span><span class="pln"> </span><span class="lit">3</span><span class="pun">;</span><span class="pln"> j</span><span class="pun">++)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
            refinedTriangles</span><span class="pun">-&gt;</span><span class="pln">push_back</span><span class="pun">(</span><span class="pln">tri</span><span class="pun">[</span><span class="pln">j</span><span class="pun">]);</span><span class="pln">
            refinedTriangles</span><span class="pun">-&gt;</span><span class="pln">push_back</span><span class="pun">(</span><span class="pln">edgeCenterVertices</span><span class="pun">[(</span><span class="pln">j </span><span class="pun">+</span><span class="pln"> </span><span class="lit">0</span><span class="pun">)</span><span class="pln"> </span><span class="pun">%</span><span class="pln"> </span><span class="lit">3</span><span class="pun">]);</span><span class="pln">
            refinedTriangles</span><span class="pun">-&gt;</span><span class="pln">push_back</span><span class="pun">(</span><span class="pln">edgeCenterVertices</span><span class="pun">[(</span><span class="pln">j </span><span class="pun">+</span><span class="pln"> </span><span class="lit">2</span><span class="pun">)</span><span class="pln"> </span><span class="pun">%</span><span class="pln"> </span><span class="lit">3</span><span class="pun">]);</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> </span><span class="typ">UnitSphereApproximation</span><span class="pun">(</span><span class="pln">refinedVertices</span><span class="pun">,</span><span class="pln"> refinedTriangles</span><span class="pun">);</span><span class="pln">
</span><span class="pun">}</span></code></pre>
<p>(Again, my apologies to veteran C++-ers.)</p>
<h3>Summary</h3>
<p>This bug was particularly subtle to me, which is a bit embarrassing 
considering how obvious it is in hindsight. In my defense the bug is not
 only hiding in the spec, instead of the code, but it only appears after
 the second iteration of refinement. I simulated the first iteration 
with pen and paper, but the result is just a cube (a perfectly fine 
low-quality approximation of a sphere). Also, it's hard to feel bad 
about making a stupid mistake when you get a neat looking fractal out of
 it.</p>
<h3>Extra: Icosahedron</h3>
<p>One thing I noticed, while making the animation of a tetrahedron 
being refined, is that the vertices of the original tetrahedron remain 
quite obvious. I decided to try starting from an icosahedron:</p>
<p><img src="Post1080_my-bug-my-bad-1-fractal-spheres_files/keiya.gif" alt="Sphere tessellation created by refining edges of icosahedron" height="256/" width="256"></p>
<p>This looks better initially but after shading my eyes can't see a 
difference, and we ended up just using the tetrahedron. In any case, 
here's the code I wrote to generate an icosahedron:</p>
<pre><code class="prettyprint"><span class="typ">UnitSphereApproximation</span><span class="pln"> </span><span class="typ">UnitSphereApproximation</span><span class="pun">::</span><span class="typ">Icosahedron</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">auto</span><span class="pln"> vertices </span><span class="pun">=</span><span class="pln"> std</span><span class="pun">::</span><span class="pln">make_shared</span><span class="pun">&lt;</span><span class="pln">std</span><span class="pun">::</span><span class="pln">vector</span><span class="pun">&lt;</span><span class="typ">Vector3</span><span class="pun">&gt;&gt;();</span><span class="pln">
    </span><span class="kwd">auto</span><span class="pln"> e </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0.5f</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> sqrtf</span><span class="pun">(</span><span class="lit">1.25f</span><span class="pun">);</span><span class="pln">
    </span><span class="com">// create vertices (4 per axis plane)</span><span class="pln">
    </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">auto</span><span class="pln"> d </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"> d </span><span class="pun">&lt;</span><span class="pln"> </span><span class="lit">3</span><span class="pun">;</span><span class="pln"> d</span><span class="pun">++)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">auto</span><span class="pln"> s1 </span><span class="pun">=</span><span class="pln"> </span><span class="pun">-</span><span class="lit">1</span><span class="pun">;</span><span class="pln"> s1 </span><span class="pun">&lt;=</span><span class="pln"> </span><span class="pun">+</span><span class="lit">1</span><span class="pun">;</span><span class="pln"> s1 </span><span class="pun">+=</span><span class="pln"> </span><span class="lit">2</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
            </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">auto</span><span class="pln"> s2 </span><span class="pun">=</span><span class="pln"> </span><span class="pun">-</span><span class="lit">1</span><span class="pun">;</span><span class="pln"> s2 </span><span class="pun">&lt;=</span><span class="pln"> </span><span class="pun">+</span><span class="lit">1</span><span class="pun">;</span><span class="pln"> s2 </span><span class="pun">+=</span><span class="pln"> </span><span class="lit">2</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
                </span><span class="kwd">auto</span><span class="pln"> v </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Vector3</span><span class="pun">::</span><span class="pln">ZERO</span><span class="pun">;</span><span class="pln">
                v</span><span class="pun">[(</span><span class="pln">d </span><span class="pun">+</span><span class="pln"> </span><span class="lit">1</span><span class="pun">)</span><span class="pln"> </span><span class="pun">%</span><span class="pln"> </span><span class="lit">3</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> e </span><span class="pun">*</span><span class="pln"> s1</span><span class="pun">;</span><span class="pln">
                v</span><span class="pun">[(</span><span class="pln">d </span><span class="pun">+</span><span class="pln"> </span><span class="lit">2</span><span class="pun">)</span><span class="pln"> </span><span class="pun">%</span><span class="pln"> </span><span class="lit">3</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">1</span><span class="pln"> </span><span class="pun">*</span><span class="pln"> s2</span><span class="pun">;</span><span class="pln">
                vertices</span><span class="pun">-&gt;</span><span class="pln">push_back</span><span class="pun">(</span><span class="pln">v</span><span class="pun">.</span><span class="pln">normalize</span><span class="pun">());</span><span class="pln">
            </span><span class="pun">}</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">

    </span><span class="kwd">auto</span><span class="pln"> triangles </span><span class="pun">=</span><span class="pln"> std</span><span class="pun">::</span><span class="pln">make_shared</span><span class="pun">&lt;</span><span class="pln">std</span><span class="pun">::</span><span class="pln">vector</span><span class="str">&lt;uint16&gt;</span><span class="pun">&gt;();</span><span class="pln">
    </span><span class="com">// create the triangles that have a point on each of the three axis planes</span><span class="pln">
    </span><span class="kwd">auto</span><span class="pln"> id </span><span class="pun">=</span><span class="pln"> </span><span class="pun">[](</span><span class="kwd">int</span><span class="pln"> d</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">int</span><span class="pln"> s1</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">int</span><span class="pln"> s2</span><span class="pun">){</span><span class="pln"> </span><span class="kwd">return</span><span class="pln"> d </span><span class="pun">*</span><span class="pln"> </span><span class="lit">4</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> </span><span class="pun">(</span><span class="pln">s1 </span><span class="pun">+</span><span class="pln"> </span><span class="lit">1</span><span class="pun">)</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> </span><span class="pun">((</span><span class="pln">s2 </span><span class="pun">+</span><span class="pln"> </span><span class="lit">1</span><span class="pun">)</span><span class="pln"> </span><span class="pun">&gt;&gt;</span><span class="pln"> </span><span class="lit">1</span><span class="pun">);</span><span class="pln"> </span><span class="pun">};</span><span class="pln">
    </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">auto</span><span class="pln"> s1 </span><span class="pun">=</span><span class="pln"> </span><span class="pun">-</span><span class="lit">1</span><span class="pun">;</span><span class="pln"> s1 </span><span class="pun">&lt;=</span><span class="pln"> </span><span class="pun">+</span><span class="lit">1</span><span class="pun">;</span><span class="pln"> s1 </span><span class="pun">+=</span><span class="pln"> </span><span class="lit">2</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">auto</span><span class="pln"> s2 </span><span class="pun">=</span><span class="pln"> </span><span class="pun">-</span><span class="lit">1</span><span class="pun">;</span><span class="pln"> s2 </span><span class="pun">&lt;=</span><span class="pln"> </span><span class="pun">+</span><span class="lit">1</span><span class="pun">;</span><span class="pln"> s2 </span><span class="pun">+=</span><span class="pln"> </span><span class="lit">2</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
            </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">auto</span><span class="pln"> s3 </span><span class="pun">=</span><span class="pln"> </span><span class="pun">-</span><span class="lit">1</span><span class="pun">;</span><span class="pln"> s3 </span><span class="pun">&lt;=</span><span class="pln"> </span><span class="pun">+</span><span class="lit">1</span><span class="pun">;</span><span class="pln"> s3 </span><span class="pun">+=</span><span class="pln"> </span><span class="lit">2</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
                </span><span class="kwd">auto</span><span class="pln"> rev </span><span class="pun">=</span><span class="pln"> s1</span><span class="pun">*</span><span class="pln">s2</span><span class="pun">*</span><span class="pln">s3 </span><span class="pun">==</span><span class="pln"> </span><span class="pun">-</span><span class="lit">1</span><span class="pun">;</span><span class="pln">
                </span><span class="kwd">auto</span><span class="pln"> i1 </span><span class="pun">=</span><span class="pln"> id</span><span class="pun">(</span><span class="lit">0</span><span class="pun">,</span><span class="pln">s1</span><span class="pun">,</span><span class="pln">s2</span><span class="pun">);</span><span class="pln">
                </span><span class="kwd">auto</span><span class="pln"> i2 </span><span class="pun">=</span><span class="pln"> id</span><span class="pun">(</span><span class="lit">1</span><span class="pun">,</span><span class="pln">s2</span><span class="pun">,</span><span class="pln">s3</span><span class="pun">);</span><span class="pln">
                </span><span class="kwd">auto</span><span class="pln"> i3 </span><span class="pun">=</span><span class="pln"> id</span><span class="pun">(</span><span class="lit">2</span><span class="pun">,</span><span class="pln">s3</span><span class="pun">,</span><span class="pln">s1</span><span class="pun">);</span><span class="pln">
                triangles</span><span class="pun">-&gt;</span><span class="pln">push_back</span><span class="pun">(</span><span class="pln">i1</span><span class="pun">);</span><span class="pln">
                triangles</span><span class="pun">-&gt;</span><span class="pln">push_back</span><span class="pun">(</span><span class="pln">rev </span><span class="pun">?</span><span class="pln"> i3 </span><span class="pun">:</span><span class="pln"> i2</span><span class="pun">);</span><span class="pln">
                triangles</span><span class="pun">-&gt;</span><span class="pln">push_back</span><span class="pun">(</span><span class="pln">rev </span><span class="pun">?</span><span class="pln"> i2 </span><span class="pun">:</span><span class="pln"> i3</span><span class="pun">);</span><span class="pln">
            </span><span class="pun">}</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
    </span><span class="com">// create the triangles that have two points on one axis plane and one point on another</span><span class="pln">
    </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">auto</span><span class="pln"> d </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"> d </span><span class="pun">&lt;</span><span class="pln"> </span><span class="lit">3</span><span class="pun">;</span><span class="pln"> d</span><span class="pun">++)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">auto</span><span class="pln"> s1 </span><span class="pun">=</span><span class="pln"> </span><span class="pun">-</span><span class="lit">1</span><span class="pun">;</span><span class="pln"> s1 </span><span class="pun">&lt;=</span><span class="pln"> </span><span class="pun">+</span><span class="lit">1</span><span class="pun">;</span><span class="pln"> s1 </span><span class="pun">+=</span><span class="pln"> </span><span class="lit">2</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
            </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">auto</span><span class="pln"> s2 </span><span class="pun">=</span><span class="pln"> </span><span class="pun">-</span><span class="lit">1</span><span class="pun">;</span><span class="pln"> s2 </span><span class="pun">&lt;=</span><span class="pln"> </span><span class="pun">+</span><span class="lit">1</span><span class="pun">;</span><span class="pln"> s2 </span><span class="pun">+=</span><span class="pln"> </span><span class="lit">2</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
                </span><span class="kwd">auto</span><span class="pln"> rev </span><span class="pun">=</span><span class="pln"> s1</span><span class="pun">*</span><span class="pln">s2 </span><span class="pun">==</span><span class="pln"> </span><span class="pun">+</span><span class="lit">1</span><span class="pun">;</span><span class="pln">
                </span><span class="kwd">auto</span><span class="pln"> i2 </span><span class="pun">=</span><span class="pln"> id</span><span class="pun">(</span><span class="pln">d</span><span class="pun">,</span><span class="pln">s1</span><span class="pun">,-</span><span class="lit">1</span><span class="pun">);</span><span class="pln">
                </span><span class="kwd">auto</span><span class="pln"> i1 </span><span class="pun">=</span><span class="pln"> id</span><span class="pun">(</span><span class="pln">d</span><span class="pun">,</span><span class="pln">s1</span><span class="pun">,+</span><span class="lit">1</span><span class="pun">);</span><span class="pln">
                </span><span class="kwd">auto</span><span class="pln"> i3 </span><span class="pun">=</span><span class="pln"> id</span><span class="pun">((</span><span class="pln">d </span><span class="pun">+</span><span class="pln"> </span><span class="lit">2</span><span class="pun">)</span><span class="pln"> </span><span class="pun">%</span><span class="pln"> </span><span class="lit">3</span><span class="pun">,</span><span class="pln">s2</span><span class="pun">,</span><span class="pln">s1</span><span class="pun">);</span><span class="pln">
                triangles</span><span class="pun">-&gt;</span><span class="pln">push_back</span><span class="pun">(</span><span class="pln">i1</span><span class="pun">);</span><span class="pln">
                triangles</span><span class="pun">-&gt;</span><span class="pln">push_back</span><span class="pun">(</span><span class="pln">rev </span><span class="pun">?</span><span class="pln"> i3 </span><span class="pun">:</span><span class="pln"> i2</span><span class="pun">);</span><span class="pln">
                triangles</span><span class="pun">-&gt;</span><span class="pln">push_back</span><span class="pun">(</span><span class="pln">rev </span><span class="pun">?</span><span class="pln"> i2 </span><span class="pun">:</span><span class="pln"> i3</span><span class="pun">);</span><span class="pln">
            </span><span class="pun">}</span><span class="pln">
        </span><span class="pun">}</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">

    </span><span class="kwd">return</span><span class="pln"> </span><span class="typ">UnitSphereApproximation</span><span class="pun">(</span><span class="pln">vertices</span><span class="pun">,</span><span class="pln"> triangles</span><span class="pun">);</span><span class="pln">
</span><span class="pun">}</span></code></pre>
<p>Maybe someone will find that useful or at least interesting.</p>
<p>---</p>
<h3><a href="http://www.reddit.com/r/programming/comments/13v67a/my_bug_my_bad_fractal_spheres/">Discuss on Reddit</a></h3>
<p>---</p>

<blockquote><p>
<span style="color:#4A9EC2"><em><br>
Twisted Oak Studios offers efficient, flexible remote and on-the-floor 
development and consulting without any middle-man or excessive 
administrivia. <a href="mailto:contact@twistedoakstudios.com">Give us a shout</a> if you have anything you think some really rad engineers should help you with.<br>
</em></span>
</p></blockquote>
<h2>Older Posts</h2>
<p></p><ul>
     <li><a href="http://twistedoakstudios.com/blog/Post1295_publish-your-net-library-as-a-nuget-package" rel="bookmark" title="Permanent Link to Publish your .Net library as a NuGet package">Publish your .Net library as a NuGet package</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post1130_when-null-is-not-enough-an-option-type-for-c" rel="bookmark" title="Permanent Link to When null is not enough: an option type for C#">When null is not enough: an option type for C#</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post1473_unfathomable-bugs-5-readonly-or-not" rel="bookmark" title="Permanent Link to Unfathomable Bugs #5: Readonly or not">Unfathomable Bugs #5: Readonly or not</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post667_minkowski-sums-examples" rel="bookmark" title="Permanent Link to Minkowski sums: examples">Minkowski sums: examples</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post1007_working-around-the-brittle-ui-virtualization-in-windows-8" rel="bookmark" title="Permanent Link to Working around the brittle UI Virtualization in Windows 8">Working around the brittle UI Virtualization in Windows 8</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post938_encapsulating-angles" rel="bookmark" title="Permanent Link to Encapsulating Angles">Encapsulating Angles</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post925_unfathomable-bugs-4-keys-that-arent" rel="bookmark" title="Permanent Link to Unfathomable Bugs #4: Keys that aren’t">Unfathomable Bugs #4: Keys that aren’t</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post867_how-would-i-even-use-a-monad-in-c" rel="bookmark" title="Permanent Link to How would I even use a monad (in C#)?">How would I even use a monad (in C#)?</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post822_useful-methods-1-observable-wheneach" rel="bookmark" title="Permanent Link to Useful/Interesting Methods #1: Observable.WhenEach">Useful/Interesting Methods #1: Observable.WhenEach</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post818_unfathomable-bugs-3-stringing-you-along" rel="bookmark" title="Permanent Link to Unfathomable Bugs #3: Stringing you along">Unfathomable Bugs #3: Stringing you along</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post774_anonymous-implementation-classes-a-design-pattern-for-c" rel="bookmark" title="Permanent Link to Anonymous Implementation Classes – A Design Pattern for C#">Anonymous Implementation Classes – A Design Pattern for C#</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post532_tasks-for-action-script-3" rel="bookmark" title="Permanent Link to Tasks for ActionScript 3 – Improving on Event-Driven Programming">Tasks for ActionScript 3 – Improving on Event-Driven Programming</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post554_minkowski-sums-and-differences" rel="bookmark" title="Permanent Link to Minkowski sums and differences">Minkowski sums and differences</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post330_non-nullable-types-vs-c-fixing-the-billion-dollar-mistake" rel="bookmark" title="Permanent Link to Non-Nullable Types vs C#: Fixing the Billion Dollar Mistake">Non-Nullable Types vs C#: Fixing the Billion Dollar Mistake</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post384_unfathomable-bugs-2-slashing-out" rel="bookmark" title="Permanent Link to Unfathomable Bugs #2: Slashing Out">Unfathomable Bugs #2: Slashing Out</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post404_script-templates-and-base-classes" rel="bookmark" title="Permanent Link to Script templates and base classes">Script templates and base classes</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post373_unity-font-extraction" rel="bookmark" title="Permanent Link to Unity font extraction">Unity font extraction</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post341_abusing-phantom-types-to-encode-list-lengths-into-their-type" rel="bookmark" title="Permanent Link to Abusing “Phantom Types” to Encode List Lengths Into Their Type">Abusing “Phantom Types” to Encode List Lengths Into Their Type</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post261_constructive-criticism-of-the-reactive-extensions-api" rel="bookmark" title="Permanent Link to Constructive Criticism of the Reactive Extensions API">Constructive Criticism of the Reactive Extensions API</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post241_quaternions-part-3-2" rel="bookmark" title="Permanent Link to Quaternions part 3">Quaternions part 3</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post204_quaternions-part-2" rel="bookmark" title="Permanent Link to Quaternions part 2">Quaternions part 2</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post144_quaternions-part-1" rel="bookmark" title="Permanent Link to Quaternions part 1">Quaternions part 1</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post157_unfathomable-bugs-1-you-can-have-things-you-can-have-things-in-things-you-can-have" rel="bookmark" title="Permanent Link to Unfathomable Bugs #1: You can have things! You can have things IN things! You can have …">Unfathomable Bugs #1: You can have things! You can have things IN things! You can have …</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post83_coroutines-more-than-you-want-to-know" rel="bookmark" title="Permanent Link to Coroutines – More than you want to know">Coroutines – More than you want to know</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post74_asset-bundle-helper" rel="bookmark" title="Permanent Link to Asset Bundle Helper">Asset Bundle Helper</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post60_the-visual-studio-goes-away" rel="bookmark" title="Permanent Link to The Visual Studio goes away">The Visual Studio goes away</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post57_nets-time-traveling-stopwatch" rel="bookmark" title="Permanent Link to .Net’s time traveling StopWatch">.Net’s time traveling StopWatch</a></li>
     <li><a href="http://twistedoakstudios.com/blog/Post29_introducing-catalyst" rel="bookmark" title="Permanent Link to Introducing Catalyst">Introducing Catalyst</a></li>
  </ul>
<p></p>


			</div><!-- #content -->
			</section>

			</div>
		</div><!-- #container -->


</span></div><!-- .container -->


<!-- BEGIN footer-type stuff -->
<div class="container footer-container">
	<div class="row">
		
		<div class="fourcol last"><!-- .last b/c it's floated right -->
			<nav>
				<ul class="primary-nav clearfix">
					<li><a href="http://www.twistedoakstudios.com/">Home</a></li>
					<li><a href="http://twistedoakstudios.com/portfolio">Portfolio</a></li>
				</ul>
			</nav>
		</div>
		
		<div class="eightcol" id="contact">
			<p>Twisted Oak Studios<br>
				6082 Shirley Street<br>
				Halifax, NS, Canada B3H 2M8</p>
			
			<p>001-902-237-7326<br>
			<a href="mailto:contact@twistedoakstudios.com">contact@twistedoakstudios.com</a></p>
		</div>
		
		<div class="twelvecol">
			<footer>
				<small>©2012
					<script>
						var d=new Date(); 
						yr=d.getFullYear();
						if (yr!=2012)
						document.write("- "+yr);
					</script> Twisted Oak Studios Ltd. -- All Rights Reserved -- All images and logos are property of their respective owners.
				</small>
			</footer>
		</div>
		
		
	</div><!-- .row -->
</div><!-- .container -->
<!-- END footer stuff-->

<!-- jQuery and scrolly script for contact link -->
<script src="Post1080_my-bug-my-bad-1-fractal-spheres_files/jquery.js"></script>
  <script>window.jQuery || document.write('<script src="../js/libs/jquery-1.6.2.min.js"><\/script>')</script>

<script src="Post1080_my-bug-my-bad-1-fractal-spheres_files/scrolly.js"></script>


  <!-- Don't forget Analytics! -->



  <!-- Prompt IE 6 users to install Chrome Frame. Remove this if you want to support IE 6.
       chromium.org/developers/how-tos/chrome-frame-getting-started -->
  <!--[if lt IE 7 ]>
    <script src="//ajax.googleapis.com/ajax/libs/chrome-frame/1.0.3/CFInstall.min.js"></script>
    <script>window.attachEvent('onload',function(){CFInstall.check({mode:'overlay'})})</script>
  <![endif]-->
  

<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-31441525-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script></body></html>